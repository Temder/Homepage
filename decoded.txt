[{"name":"aesthetic-list","modelText":"title = Aesthetic Style Generator
subtitle = This generator grabs from the Aesthetics wiki!
fontSize = 190
fontColor = black
buttonText = randomize
numberOfItems = 1
itemSeperator = <br/>
description
\t{import:simple-gen-footer} NOTE: These are all taken from the Aesthetics Wiki! I have removed some of the... questionable ones. (Not joking whenI say "N*zi Chic" was one. Yeah, no.) Some are probably still not ideal, but I mainly intended on removing the objectively racist/distasteful ones
  
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)


$output = [AES]

// Credit goes to: https://github.com/dariusk/corpora
\t
AES
  Abstract Tech
  Acid Pixie
  Acidwave
  Adventure Pulp
  Adventurecore
  Aetherpunk
  Afrofuturism
  Afro-Victorian
  After Hours
  Agropeople
  Alien
  Alternative
  Americana
  Analog Horror
  American Pioneers
  American Revolution
  Androgynous
  Anemoiacore
  Angelcore
  Anglocore
  Anglo Gothic
  Angura Kei
  Animecore
  Antique Grunge
  Anti-Fashion
  Art Academia
  Arts and Crafts Movement
  Art Deco
  Art Hoe
  Art Nouveau
  Athlete
  Atompunk
  Auroracore
  Autumn
  Avant Apocalypse
  Avant-garde
  Babycore
  Babygirl
  Baddie
  Ballet Academia
  Barbiecore
  Bardcore
  Baroque
  Bastardcore
  Beach Bunny
  Beatnik
  Biker
  Biohazard
  Biopunk
  Bizarro Fiction
  Black-Holed Meme
  Bloomcore
  Bodikon
  Bohemian
  Bombacore
  Bookstore Girl
  Bosozoku
  Boujee
  Breakcore
  Britpop
  Brocore
  Bronzepunk
  Bubble Bujo
  Bubble Goth
  Bubblegum Bitch
  Bubblegum Witch
  Cabincore
  Cagole
  Camp
  Campcore
  Candycore
  Cargopunk
  Carnivalcore
  Cartelcore
  Cartooncore
  Casino
  Cassette Futurism
  Celtic
  Changelingcore
  Chaotic Academia
  Chav
  Cheiron Crush
  Cherry Emoji Twitter
  Chic Modernist
  Cholo
  Christcore
  Christian Girl Autumn
  Christmas
  City Pop
  Classic Academia
  Classic Lolita
  Classicism
  Cleancore
  Clockpunk
  Cloudcore
  Clowncore
  Club
  Club Kids
  Coastal Grandmother
  Coffee House/Cafe
  Coffinwood
  Colourful Black
  Comfy/Cozy
  Common White Girl
  Concore
  Constructivism
  Corporate
  Corporate Memphis
  Corporate Punk
  Cottagecore
  Cottagegore
  Coquette
  Country
  C-Pop
  Craftcore
  Cripplepunk
  Crowcore
  Crustpunk
  Cryptid Academia
  Cryptidcore
  Cubism
  Cuddle Party
  Cultcore
  Cult Party Kei
  Cyber Minimalism
  Cyberdelic
  Cyberghetto
  Cybergoth
  Cybergrunge
  CyberneticPunk
  Cyberparadism
  Cyberpop
  Cyberprep
  Cyberpunk
  Danish Pastel
  DarkErrorcore
  Dark Academia
  Dark Fantasy
  Dark Naturalism
  Dark Nautical
  Dark Nymphet
  Dark Paradise
  Darkcore
  Darkest Academia
  Daydreampunk
  Dazecore
  De Stijl
  Deathcore
  Deathrock
  Decopunk
  Decora
  Delicate Sweet
  Desertwave
  Dethereal
  Devilcore
  Dieselpunk
  Diner
  Dionysism
  Dolly Kei
  Dracopunk
  Dragoncore
  Drainer
  Dreamcore
  Dreamy
  Drugcore
  Dual Kawaii
  Duckcore
  Dullcore
  Dungeon Synth
  E-Boy
  E-Girl
  Earthcore
  ElectroPop 08
  Electro Swing
  Emo
  English Major
  Equestrian
  Erokawa
  Ethereal
  Europunk
  Expressionism
  Fairy Academia
  Fairy Grunge
  Fairy Kei
  Fairy Tale
  Fairycore
  Fanfare
  Fantasy
  Fantasy Astronomy
  Fashwave
  Fauvism
  Fawncore
  Femboy
  Femcel Weeaboo
  Femme Fatale
  Feralcore
  Film Noir
  Flapper
  Fluowave
  Folk Punk
  Foodie
  Forestpunk
  French Girl
  French Girly
  Frogcore
  Frutiger Aero
  Funky Seasons
  Furry
  Futago
  Futurism
  Gadgetpunk
  Game Night
  Gamercore
  Gamine
  Geek
  Gen X Soft Club
  Ghostcore
  Girl-Next-Door
  Glam Girl
  Glam Rock
  Glitchcore
  Gloomcore
  Glowwave
  Goblin Academia
  Goblincore
  Golden Age of Detective Fiction
  Golden Hour
  Gopnik
  Gorecore
  Gorpcore
  Goth
  Gothcore
  Gothic
  Gothic Lolita
  Grandmillenial
  Grandparentcore
  Greaser
  Green Academia
  Grifes
  Grindhouse
  Groundcore
  Grunge
  Gull Girl
  Gurokawa
  Gyaru
  Hackercore
  Halloween
  Hallyu
  Happycore
  Hatecore
  Hauntology
  Haussmann Paris
  Havencore
  Health Goth
  Heatwave
  Heistcore
  Hellenic
  Hermaphroditus
  Hermitpunk
  Hexatron
  Hi-NRG
  High School Dream
  Hikecore
  Hime Lolita
  Hip-Hop
  Hippie
  Hipster
  Historical Americana
  Holosexual
  Honeycore
  Horror
  Horror Academia
  Hot Topic
  Hustlewave
  Hydrogen
  Hyperpop
  Icepunk
  Impressionism
  Indie
  Indie Kid
  Indie Sleaze
  Indicolite
  Internet Academia
  Italo Disco
  Jamcore
  Jersey Shore
  Joyride
  Juggalo
  Jungle Grunge
  Junglecore
  Karasu Zoku
  Kawaii
  Kawaii Gamer
  Key West Kitten
  Kidcore
  Kid Science
  Kimoicore
  Kinderwhore
  Kingcore
  King Gas
  Knightcore
  Kogal
  Kuromicore
  La Sape
  LI-core
  Labcore
  Laborwave
  Lagenlook
  Larme Kei
  Libertywave
  Light Academia
  Light Blue Subculture
  Lightcore
  Lightningwave
  Lil Girl
  Liminal Space
  Lit Kid
  Lo-Fi
  Lobotomy-Chic
  Lolita
  Lounge
  Lovecore
  Lunarpunk
  Macaute
  Mad Scientist
  Magewave
  Magical Girls
  Maidcore
  Mallgoth
  Mall Pop
  Mall Ninja
  Maximalism
  McBling
  Meatcore
  Medicalcore
  Medieval
  MTV Green Sky
  Memphis
  Mermaid
  Metal
  Metalcore
  Metalheart
  Metrosexual
  Miami Metro
  Midwest Emo
  Midwest Gothic
  Military
  Miniaturecore
  Minimalism
  Miscellaneous Academia
  Mizuiro Kaiwai
  Modernism
  Mori Kei
  Morute
  Mote Kei
  Mulchcore
  Mushroomcore
  Mosscore
  Ms Paint
  Musical Academia
  Mythpunk
  Nanopunk
  Naturecore
  Nautical
  Neo-Romanism
  Neo-Tokyo
  Nerd
  Nerdcore
  New England Gothic
  New Age
  New Money
  New Romantic
  New Wave
  Nihilcore
  Nintencore
  Normcore
  Northerness
  Nostalgiacore
  Nuclear
  Nu-Goth
  Nymphet
  Ocean Academia
  Ocean Grunge
  Old Hollywood
  Old Memecore
  Old Money
  Old Web
  Onii Kei
  Oshare Kei
  Otaku
  Pachuco
  Pale Grunge
  Paleocore
  Palewave
  Party Animal
  Party Kei
  Pastel
  Pastel Academia
  Pastel Goth
  Pastel Punk
  PC Music
  Peach
  Pearly
  Pink
  Pink Parisian
  Pink Princess
  Pin-up
  Pirate
  Pixel Cutie
  Pixiecore
  Plaguecore
  Plant Mom
  Playboy
  Pop
  Pop Art
  Pop Kei
  Post-Apocalyptic
  Post-Impressionism
  Post-Punk
  Post-rock
  Prairiecore
  Pre-Raphaelite
  Prehistoricore
  Preppy
  Pretty preppy
  Pride
  Princecore
  Princesscore
  Printcore
  Progressive Academia
  Psychedelica
  Punk
  Purism
  Queencore
  Queer Academia
  Queercore
  R&B
  Racaille
  Ragecore
  Rainbowcore
  Rainy Day
  Randumb
  Rangercore
  Ratcore
  Ravencore
  Raver
  Realism
  Reefwave
  Regency
  Regional Gothic
  Retro-Futurism
  Rivethead
  Roaring 20s
  Robotics Kid
  Rock
  Rococo
  Roguecore
  Rollerwave
  Roma
  Romantic Academia
  Romantic Goth
  Romantic Italian
  Romanticism
  Rotcore
  Royalcore
  Rusticcore
  Sad people
  Salon Kei
  Salvagepunk
  Sandalpunk
  Sanriocore
  Scene
  Schizowave
  Science Academia
  Scoutcore
  Scrapbook
  Scrapper
  Seapunk
  Selkiecore
  Shabby Chic
  Shanzhai
  Shā mǎ tè
  Sharpies
  Shibuya Punk
  Shironuri
  Shoegaze
  Sizz
  Skater
  Sleepycore
  Slimepunk
  Sloanies
  Slutcore
  Snowdrop
  Snow Bunny
  Soft Apocalypse
  Soft grunge
  Soft Macabre
  Softie
  Soggy
  Solarpunk
  Southern Belle
  Southern Gothic
  Sovietwave
  Spacecore
  Sparklecore
  Spiritcore
  Spring
  Spy fiction
  Steampunk
  Steelpunk
  Stilyagi
  Stimwave
  Stonepunk
  Stoner
  Stripcore
  Studyblr
  Studyplace
  Suburban Gothic
  Sukeban
  Summer
  Suspect Girl
  Superflat Pop
  Suprematism
  Surf Crush
  Surrealism
  Surreal Memer
  Swenkas
  Swordpunk
  Synthwave
  Tacticool
  Takenokozoku
  Tanbi Kei
  Technical Scene
  Technocore
  Technozen
  Techwear
  Teddies
  Teethcore
  Tenwave
  Terrorwave
  Teslapunk
  That Girl
  Theatre Academia
  Theatre Kids
  Thrasher
  Thriftcore
  Tinkercore
  Tinycore
  Tomboy
  Trad Goth
  Traditional Korean
  Trailer Park Princess
  Trashcore
  Traumacore
  Trenchcore
  Trendercore
  Trillwave
  Tropical
  Tumblewave
  Tupinipunk
  Tweencore
  Twee
  Ukiyo-e
  Unicorncore
  Urban Fantasy
  Urbancore
  Utopian Scholastic
  VARIOUSXYZ
  Vacation Dadcore
  Vampire
  Vaporwave
  Vectorheart
  Vibrant Academia
  Victorian
  Victorian Goth
  Viking
  Villagecore
  Villaincore
  Vintage
  Vintage Parisian
  Virgo's Tears
  Visual Kei
  VSCO
  VSCO Preppy
  Voidcore
  Voidpunk
  Vorticism
  Vulture Culture
  Wabi-Sabi
  Waif
  Waldorf
  Wanderlust
  Warmcore
  Weathercore
  Web Creep
  Weeaboo
  Weirdcore
  Werewolf
  Western
  Wetcore
  Wild Child
  Winter
  Winter Fairy Coquette
  Witchy Academia
  Witch House
  Witchcore
  Wizardcore
  Wonderland
  Woodland Goth
  Wormcore
  Writer Academia
  Wuxia
  XO
  Y2K
  Yami Kawaii
  Yankeecore
  Yanki
  Youthquake
  Yume Kawaii
  Zombiecore
  1950s Suburbia
  2 Tone
  2000's Autumn
  2014 era tumblr
  2K Animecore
  70s Disco","imports":["simple-gen-footer"],"lastEditTime":1690853131052,"found":true},{"name":"animal","modelText":"title = Random Animal Generator
subtitle = A simple generator that gives you a random animal name.
fontSize = 230
fontColor = black
buttonText = randomize 
numberOfItems = 1
itemSeperator = <br/>
description
  {import:simple-gen-footer}
  $output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)


$output = [animal]

// Credit goes to: https://github.com/dariusk/corpora
animal
  aardvark
  alligator
  alpaca
  antelope
  ape
  armadillo
  baboon
  badger
  bat
  bear
  beaver
  bison
  boar
  buffalo
  bull
  camel
  canary
  capybara
  cat
  chameleon
  cheetah
  chimpanzee
  chinchilla
  chipmunk
  cougar
  cow
  coyote
  crocodile
  crow
  deer
  dingo
  dog
  donkey
  dromedary
  elephant
  elk
  ewe
  ferret
  finch
  fish
  fox
  frog
  gazelle
  gila monster
  giraffe
  gnu
  goat
  gopher
  gorilla
  grizzly bear
  ground hog
  guinea pig
  hamster
  hedgehog
  hippopotamus
  hog
  horse
  hyena
  ibex
  iguana
  impala
  jackal
  jaguar
  kangaroo
  koala
  lamb
  lemur
  leopard
  lion
  lizard
  llama
  lynx
  mandrill
  marmoset
  mink
  mole
  mongoose
  monkey
  moose
  mountain goat
  mouse
  mule
  muskrat
  mustang
  mynah bird
  newt
  ocelot
  opossum
  orangutan
  oryx
  otter
  ox
  panda
  panther
  parakeet
  parrot
  pig
  platypus
  polar bear
  porcupine
  porpoise
  prairie dog
  puma
  rabbit
  raccoon
  ram
  rat
  reindeer
  reptile
  rhinoceros
  salamander
  seal
  sheep
  shrew
  silver fox
  skunk
  sloth
  snake
  squirrel
  tapir
  tiger
  toad
  turtle
  walrus
  warthog
  weasel
  whale
  wildcat
  wolf
  wolverine
  wombat
  woodchuck
  yak
  zebra
  anaconda
  anteater
  bobcat
  buzzard
  catfish
  chicken
  cobra
  crab
  cuckoo
  dinosaur
  dolphin
  dove
  duck
  eagle
  eel
  emu
  falcon
  flamingo
  goose
  hare
  hawk
  hummingbird
  lobster
  meerkat
  octopus
  ostrich
  owl
  oyster
  peacock
  pelican
  penguin
  pheasant
  pigeon
  pony
  quail
  rattlesnake
  rooster
  shark
  sparrow","imports":["simple-gen-footer"],"lastEditTime":1725191809726,"found":true},{"name":"art-style-updated","modelText":"// note that `input` is a global variable (i.e. `input` is `window.input`), which is created by t2i-framework-plugin
// see here for an example generator that imports these styles: https://perchance.org/ai-character-generator#edit

// style tester: https://perchance.org/prompt-style-tester

$output
  Painted Anime Plus
    prompt
      [input.description], anime, masterpiece, fine details, breathtaking artwork, painterly art style, high quality, 8k, very detailed, high resolution, exquisite composition and lighting, pretty anime character, adorable, featured on pixiv, very detailed, absolute masterpiece, sharp, realistic light, pastel, ((highlight)), (soft), (pretty), realistic background, realistic background light, ray-tracing, background, beautiful, (8k), realistic light, realistic light effect
    negative
      [input.negative], (worst quality, low quality, blurry:1.3), low-quality, deformed, text, poorly drawn, hilariously bad drawing, bad 3D render, ((line, outline)), face only, big head, Bad mouth, unnatural mouth, bad eyes, bad chin, unnatural chin
    meta:tags = [({anime:100, painting:50, paintedAnime:50, drawing:55, cartoon:50, realistic:70})]
    modifiers = [animeModifiers]
  Painted Anime
    prompt // this style is biased towards female characters due to the biases of the artists mentioned, so we alter the description if 'male' is mentioned to boost 'maleness' and supress 'femaleness'
      ([/\b(male|man)\b/i.test(input.description) ? input.description.replace(/\b(male|man)\b/i, "(male, masculine, masc, male)") : input.description]), art by atey ghailan, painterly anime style at pixiv, art by kantoku, in art style of redjuice/necömi/rella/tiv pixiv collab, your name anime art style, masterpiece digital painting, exquisite lighting and composition, inspired by wlop art style, 8k, sharp, very detailed, high resolution, illustration ^2
      painterly anime artwork, [input.description], masterpiece, fine details, breathtaking artwork, painterly art style, high quality, 8k, very detailed, high resolution, exquisite composition and lighting
    negative
      (worst quality, low quality, blurry:1.3), [input.negative], low-quality, deformed, text, poorly drawn[/\bmale\b/i.test(input.description) ? ", female, feminine, fem, female" : ""]
      [input.negative], (worst quality, low quality, blurry:1.3), black and white, low-quality, deformed, text, poorly drawn, bad art, bad anatomy, bad lighting, disfigured, faded, blurred face
    meta:tags = [({anime:100, painting:100, paintedAnime:100, drawing:55, cartoon:50})]
    modifiers = [animeModifiers]
  Casual Photo
    prompt = [input.description], casual photo
    negative = [input.negative], bad photo, bad lighting, high production value, unnatural studio lighting, commercial photoshoot, photoshopped, terrible photo, disfigured
    meta:tags = [({photo:98, casualPhoto:100, portrait:80})]
    modifiers
      shot = [photoModifiers.shot]
      color = [photoModifiers.color]
      effect = [photoModifiers.effect]
  Cinematic
    prompt = [input.description], cinematic shot, dynamic lighting, 75mm, Technicolor, Panavision, cinemascope, sharp focus, fine details, 8k, HDR, realism, realistic, key visual, film still, cinematic color grading, depth of field
    negative = [input.negative], bad lighting, low-quality, deformed, text, poorly drawn, holding camera, bad art, bad angle, boring, low-resolution, worst quality, bad composition, disfigured
    meta:tags = [({photo:100, portrait:85, render:70, cinematic:100})]
    modifiers
      shot = [photoModifiers.shot]
      color = [photoModifiers.color]
      effect = [photoModifiers.effect]
      genre
        adventure = , adventure
        b-horror = , b-horror film screencap
        epic fantasy = , epic fantasy
        sci-fi = , sci-fi
        film noir = , film noir
        horror = , horror
        indie = , indie film screencap
        western = , western, wild west
        thriller = , thriller
  Digital Painting
    prompt = [input.description], breathtaking digital art, trending on artstation, by atey ghailan, by greg rutkowski, by greg tocchini, by james gilleard, 8k, high resolution, best quality
    negative = [input.negative], low-quality, deformed, signature watermark text, poorly drawn
    meta:tags = [({painting:90, landscape:70, digitalPainting:100, drawing:60})]
  Concept Art
    prompt = [input.description], concept art, digital art, illustration, inspired by wlop style, 8k, fine details, sharp, very detailed, high resolution, masterpiece
    negative = [input.negative], low-quality, deformed, text, poorly drawn, worst quality, blurry
    meta:tags = [({painting:50, landscape:70})]
    modifiers
      modifier
        league of legends = , league of legends style concept art
        epic fantasy = , epic fantasy concept art by noah bradley
        sci-fi = , sci-fi concept art
        horror = , horror concept art
        western = , western, wild west concept art
  3D Disney Character
    prompt = 3D cartoon Disney character portrait render. [input.description], bokeh, 4k, highly detailed, Pixar render, CGI Animation, Disney, cute big circular reflective eyes, dof, (cinematic film), Disney realism, subtle details, breathtaking Pixar short, fine details, close up, sharp focus, HDR, Disney-style octane render, incredible composition, superb lighting and detail, [input.description]
    negative = [input.negative], worst quality, poorly drawn, bad art, boring, deformed, bad composition, crappy artwork, bad lighting
    meta:tags = [({disney:95, render:80, portrait:75, cartoon:90})]
  2D Disney Character
    prompt = 2D cartoon Disney character digital art of [input.description]. superb linework, classic 2D Disney style art, close-up, inspired by the art styles of Glen Keane and Aaron Blaise, Disney-style character concept with a Disney-style face, (trending on artstation), Disney-style version of [input.description]
    negative = [input.negative], bad 3D render, bad 3D shadowing, worst quality, poorly drawn, low-resolution render, bad colors, a photo, terrible art, text, logo, bad composition, bad lighting, disfigured, deformed, bad anatomy, crappy educational infographic cartoon, bad 3D render, black and white photo
    meta:tags = [({disney:90, portrait:75, cartoon:100, comic:80, drawing:75})]
  Disney Sketch
    prompt = Glen Keane character concept art (black and white) pencil sketch of [input.description]. (rough pencil sketch by Glen Keane:1.2), rough pencil sketch, close up, loose Disney-style character concept art sketch, (nice sketchy pencil strokes), Disney character design sketch, pencil texture, a concept art pencil sketch of [input.description], (by Glen Keane:1.3)
    negative = [input.negative], a photo, photorealistic style, with color, (a bad photo), bad digital art, bad 3D render, gradient, overly detailed, high contrast, bloom, a color photo, smooth shading, hilariously bad drawings, bad anatomy, bad art, 3D, a photo, soft shadows, lot of color
    meta:tags = [({disney:90, cartoon:85, sketch:80, comic:80, drawing:70})]
  Concept Sketch
    prompt = black and white technical drawing showcasing {a} [input.description], annotation details, masterpiece black and white, pencil strokes, annotated technical concept art sketch, pencil texture
    negative = [input.negative]
    meta:tags = [({sketch:75, comic:50, drawing:75})] 
  Painterly
    prompt = painterly digital painting, [input.description], digital painting by Ilya Kuvshinov with painterly brush strokes, by Ilya Kuvshinov, painterly masterpiece
    negative = brush, [input.negative], bad 3D render, (holding paintbrush), easel, bad photo, bad art, boring, bad 3D render
    meta:tags = [({painting:85, landscape:65, digitalPainting:95, drawing:45})]
  Oil Painting
    prompt = breathtaking alla prima oil painting, [input.description], close up, (alla prima style:1.3), oil on linen, painterly oil on canvas, (painterly style:1.3), exquisite composition and lighting, modern painterly masterpiece, by alexi zaitsev, award-winning painterly alla prima oil painting
    negative = [input.negative], framed, faded colors, terrible photo, bad composition, hilariously bad drawing, bad photo, bad anatomy, extremely high contrast, worst quality, watermarked signature, bad colors, deformed, amputee, washed out, glare, boring colors, bad crayon drawing
    meta:tags = [({painting:87, oilPainting:100, landscape:60, portrait:65, drawing:40})]
  Oil Painting - Realism
    prompt = breathtaking oil painting, [input.description], photorealistic oil painting, by charlie bowater, fine details, by wlop, trending on artstation, very detailed
    negative = [input.negative], low-quality, deformed, text, poorly drawn, worst quality
    meta:tags = [({painting:87, oilPainting:95, landscape:60, portrait:70, drawing:40})]
  Oil Painting - Old
    prompt = ([input.description]) (Oil painting) (by Jean-François Millet), (by Gustave Courbet), (by Jules Breton), close up
    negative = [input.negative], (badly drawn hands), extra limbs, extra fingers, bad anatomy
    meta:tags = [({painting:85, oilPainting:90, landscape:55, portrait:65, drawing:35})]
  Professional Photo
    prompt = [input.description], {sharp|soft} focus, depth of field, 8k photo, HDR, professional lighting, taken with Canon EOS R5, 75mm lens
    negative = [input.negative], worst quality, bad lighting, cropped, blurry, low-quality, deformed, text, poorly drawn, bad art, bad angle, boring, low-resolution, worst quality, bad composition, terrible lighting, bad anatomy
    meta:tags = [({photo:95, portrait:60})]
    modifiers
      shot = [photoModifiers.shot]
      color = [photoModifiers.color]
      effect = [photoModifiers.effect]
  Anime
    prompt = (anime art of [input.description]:1.2), masterpiece, 4k, best quality, anime art
    negative = (worst quality, low quality:1.3), [input.negative], low-quality, deformed, text, poorly drawn, hilariously bad drawing, bad 3D render
    meta:tags = [({basicAnime:100, anime:60, drawing:50, cartoon:30})]
    modifiers = [animeModifiers]
  Drawn Anime
    prompt = digital art drawing, illustration of ([input.description]), anime drawing/art, bold linework, illustration, cel shaded, painterly style, digital art, masterpiece
    negative = [input.negative], boring flat infographic, oversaturated, bad photo, terrible 3D render, bad anatomy, worst quality, greyscale, black and white, disfigured, deformed, glitch, cross-eyed, lazy eye, ugly, deformed, distorted, glitched, lifeless, low quality, bad proportions
    meta:tags = [({anime:60, drawing:85, drawnAnime:100, cartoon:40})]
    modifiers = [animeModifiers]
  Cute Anime
    prompt = (((adorable, cute, kawaii)), [input.description], cute moe anime character portrait, adorable, featured on pixiv, kawaii moé masterpiece, cuteness overload, very detailed, sooooo adorable!!!, absolute masterpiece
    negative = (worst quality, low quality:1.3), [input.negative], worst quality, ugly, 3D, photograph, bad art, blurry, boring
    meta:tags = [({anime:55, drawing:50, cuteAnime:100, cartoon:30})]
    modifiers = [animeModifiers]
  Soft Anime
    prompt = [input.description], anime masterpiece, soft lighting, intricate, highly detailed, pixiv, anime art, 4k, art from your name anime, garden of words style art, high quality
    negative = (worst quality, low quality:1.3), [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({anime:50, drawing:50, cartoon:30})]
    modifiers = [animeModifiers]
  Mix Anime
    prompt = (anime art of [input.description]:1.2), masterpiece, 4k, best quality, anime art, very cute
    negative = painterly anime artwork, [input.description], masterpiece, fine details, breathtaking artwork, painterly art style, high quality, 8k, very detailed, high resolution, exquisite composition and lighting[input.negative], (worst quality, low quality, blurry:1.3), black and white, low-quality, deformed, text, poorly drawn, bad art, bad anatomy, bad lighting, disfigured, faded, blurred facemeta:tags = [({anime:100, painting:100, paintedAnime:100, drawing:55, cartoon:50})]
    meta:tags = [({anime:100, painting:100, paintedAnime:100, drawing:55, cartoon:50})]
    modifiers = [animeModifiers]
  Fantasy Painting
    prompt = [input.description], d&d, fantasy, highly detailed, digital painting, artstation, sharp focus, fantasy art, illustration, 8k, in the style of greg rutkowski
    negative = [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({painting:50, landscape:80, fantasy:80})]
  Fantasy Landscape
    prompt = [input.description], fantasy matte painting, absolute masterpiece, detailed matte painting by andreas rocha and greg rutkowski, by Brothers Hildebrandt, superb composition, vivid fantasy art, breathtaking fantasy masterpiece
    negative = [input.negative], faded, blurry, bad art, boring
    meta:tags = [({painting:30, poster:30, coverArt:50, vintage:30, landscape:90, fantasy:20})]
    modifiers
      shot = [landscapeModifiers.shot]
      color = [landscapeModifiers.color]
      effect = [landscapeModifiers.effect]
  Fantasy Portrait
    prompt = [input.description], d&d, fantasy, highly detailed, digital painting, artstation, sharp focus, fantasy art, character art, illustration, 8k, art by artgerm and greg rutkowski
    negative = [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({painting:50, fantasy:70, portrait:75})]
  Studio Ghibli
    prompt = [input.description], (studio ghibli style art:1.3), sharp, very detailed, high resolution, inspired by hayao miyazaki, anime, art from ghibli movie
    negative = (worst quality, low quality:1.3), [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({anime:50, cartoon:50})]
  50s Enamel Sign
    prompt = 50s enamel sign of [input.description], 50s advert enamel sign, masterpiece, authentic vintage enamel sign
    negative = [input.negative]
    meta:tags = [({vintage:85})]
  Vintage Comic
    prompt = comic book style art of [input.description], (drawing, by Dave Stevens, by Adam Hughes, 1940's, 1950's:1.2), hand-drawn, color, high resolution, best quality, closeup
    negative = [input.negative], terrible photoshop, low contrast, disfigured, poorly drawn, deformed, tiled, cropped, framed
    meta:tags = [({vintage:80, comic:90, cartoon:70})]
    modifiers
      effect
        retrofuturism = , (retrofuturism, atompunk)
        gritty noir = , (gritty noir)
        pop art = , (pop art style)
        cyberpunk = , (cyberpunk aesthetic)
        steampunk = , (steampunk)
        watercolor = , (watercolor wash)
        sketchy ink = , sketchy ink work
        manga fusion = , (manga fusion)
        psychedelic = , psychedelic imagery
        pulp magazine = , pulp magazine look
        heroic proportions = , heroic proportions
  Franco-Belgian Comic
    prompt = franco-belgian color comic about [input.description], bande dessinée, franco-belgian comic panel, masterpiece, breathtaking composition, intricate, detailed, best quality, close-up
    negative = [input.negative], framed blurry crappy photo, overexposed, worst quality, border, deformed horror, overly faded
    meta:tags = [({vintage:75, comic:85, cartoon:75})]
    modifiers
      modifier
        single-panel = , splash panel, full cover image
        multi-panel = , multi-panel comic book page, comic panel layout
        cyberpunk = , (cyberpunk aesthetic)
        steampunk = , (steampunk)
        manga fusion = , (manga fusion)
        psychedelic = , psychedelic imagery
        pulp magazine = , pulp magazine look
        heroic proportions = , heroic proportions
  Tintin Comic
    prompt = color comic panel in the style of Hergé about [input.description], by Hergé, tintin style, french comic panel, franco-belgian style, close-up, masterpiece, high-resolution Hergé style
    negative = [input.negative], blurry, framed edge border, text, overexposed, bad anatomy, deformed, disfigured, blur, horror, dead eyes, boring, faded, (worst quality, low quality:1.2)
    meta:tags = [({vintage:77, comic:87, cartoon:77})]
  Vintage Comic
    prompt = comic book style art of [input.description], (drawing by Jack Kirby, Steve Ditko art, 1940's, 1950's:1.2), closeup, color, vintage masterpiece, best quality
    negative = [input.negative], worst quality, low resolution, fuzzy, jpeg compression artifacts, blurry, low quality
    meta:tags = [({vintage:80, comic:90, cartoon:70})]
  90s Comic
    prompt = [input.description], (90s comic book artwork), colored comic book panel, classic 90s style, masterpiece
    negative = [input.negative], bad photo, greyscale, blurry, bad 3D render, crappy 3D art, barcode, logo, bad photo
    meta:tags = [({vintage:80, comic:80})]
  90s Superhero
    prompt = [input.description], (90s comic book artwork), colored comic book panel, classic 90s style, masterpiece, art by Greg Capullo, art by Jim Lee, art by Todd McFarlane
    negative = [input.negative], bad photo, greyscale, blurry, bad 3D render, crappy 3D art, barcode, logo, bad photo
    meta:tags = [({vintage:80, comic:80})]
  Medieval
    prompt = medieval illuminated manuscript picture of [input.description], medieval illuminated manuscript art, masterpiece medieval color illustration, 16th century, 8k high-resolution scan of 16th century illuminated manuscript painting, detailed medieval masterpiece, close-up
    negative = [input.negative], worst quality, blurry
    meta:tags = [({vintage:80, painting:70, portrait:40})]
  Pixel Art
    prompt = [input.description.length > 40 ? "(pixel art), " : ""][input.description], best pixel art, neo-geo graphical style, retro nostalgic masterpiece, 128px, 16-bit pixel art [input.description.length < 10 ? "of "+input.description : ""], 2D pixel art style, adventure game pixel art, inspired by the art style of hyper light drifter, masterful dithering, superb composition, beautiful palette, exquisite pixel detail
    negative = [input.negative], glitched, deep fried, jpeg artifacts, out of focus, gradient, soft focus, low quality, poorly drawn, blur, grainy fabric texture, text, bad art, boring colors, blurry platformer screenshot
    meta:tags = [({pixelArt:90, vintage:70})]
    // randomPrompt = {mermaid|goblin}
  Cute Figurine
    prompt = [input.description], figurine, modern Disney style, octane render, chibi
    negative = [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({disney:20, emoji:60})]
  3D Emoji
    prompt = masterpiece (([input.description])) cartoon emoji concept render, (close-up:1.3), facing forward, (matte), emoji render trending on artstation, noto color emoji, app icon, joypixels, simple design, new iOS 16.4 ((([input.description]))) emoji render, (simple background:1.2), (centered:1.2), masterpiece, telegram sticker, clash of clans character concept, (looking at camera), crisp render, sharp focus, simple cartoon design, 4k, sharp focus, an emoji with cartoon proportions, masterpiece emoji-style figurine render, transparent background png
    negative = [input.negative], framed, inset, border, glare, blurry, out of focus, shiny, (on pedestal:1.2), on platform, with base, gradient background, off-center, casting shadow, ((deformed, disfigured)), glitchy, vector art, text, signature, bad anatomy, messed up, bad art, gradient background, complex background, blurry, worst quality, low resolution, messy, complex, gradient background, bad lighting
    meta:tags = [({emoji:90})]
  Illustration
    prompt = breathtaking illustration of [input.description], (illustration:1.3), masterpiece, breathtaking illustration
    negative = [input.negative], low-quality, deformed, text, poorly drawn, bad 3D render, bad composition, bad photo, worst quality
    meta:tags = [({illustration:100, drawing:75})]
  Flat Illustration
    prompt = [input.description], illustration, flat, 2D, vector art, masterpiece, made with adobe illustrator, behance competition winner, trending on dribble, 4k, high resolution, crisp lines
    negative = [input.negative], bad art, children's crayon drawing, worst quality, blurry, blur, jpeg artifacts, compression artifacts, text, worst quality, noise, messy, low resolution
    meta:tags = [({illustration:85, drawing:40})]
  Watercolor
    prompt = [input.description], (watercolor), high resolution, intricate details, 4k, wallpaper, concept art, watercolor on textured paper
    negative = [input.negative], low-quality, deformed, text, poorly drawn
    meta:tags = [({painting:30})]
  1990s Photo
    prompt = [input.description], 90s home video, nostalgic 90s photo, taken with kodak disposable camera
    negative = [input.negative], blurry, blur, deformed
    meta:tags = [({vintage:80})]
    modifiers
      shot = [photoModifiers.shot] 
      color = [photoModifiers.color]
      effect = [photoModifiers.effect]
  1980s Photo
    prompt = famous vintage 80s photo, [input.description], grainy photograph, 80s photo with film grain, Kodacolor II 80s photo with vignetting, retro, r/OldSchoolCool, 80s photo with wear and tear and minor creasing and scratches, vintage color photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:90, portrait:72})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1970s Photo
    prompt = famous vintage 70s photo, [input.description], grainy photograph, 1970s photo with film grain, 70s photo with vignetting, retro, r/OldSchoolCool, 70s photo, vintage photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1960s Photo
    prompt = famous vintage 60s photo, [input.description], grainy photograph, 1960s photo with film grain, 60s photo with vignetting, retro, r/OldSchoolCool, 60s photo, vintage photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1950s Photo
    prompt = famous vintage 50s photo, [input.description], grainy photograph, 1950s photo with film grain, 1950s photo with vignetting, retro, r/OldSchoolCool, 1950s photo, vintage photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1940s Photo
    prompt = famous vintage 1940s photo, [input.description], grainy photograph, 1940s photo with film grain, 1940s photo with vignetting, retro, r/OldSchoolCool, 1940s photo, vintage photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1930s Photo
    prompt = famous vintage 1930s photo, [input.description], grainy photograph, 1930s photo with film grain, 1930s photo with vignetting, retro, r/OldSchoolCool, 1930s photo, vintage photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  1920s Photo
    prompt = famous vintage 1920s photo, [input.description], 1920s photo, restored photograph, {sepia|black and white}, historical archive photo
    negative = [input.negative], deformed
    meta:tags = [({photo:30, vintage:80})]
    modifiers
      shot = [photoModifiers.shot]
      effect = [photoModifiers.effect]
  Vintage Pulp Art
    prompt = (((1970s vintage pulp art))), [input.description], vintage pulp art, by Earle K. Bergey, by Kelly Freas, by Alex Schomburg, by H. J. Ward, glossy pulp art, Amazing Stories, Weird Tales, 8k, high resolution, best quality
    negative = [input.negative], text, cropped, bad art, deformed, worst quality, watermark, text
    meta:tags = [({painting:30, poster:30, coverArt:50, vintage:60, comic:40, cartoon:50})]
  50s Infomercial Anime
    prompt = [input.description], 1950s infomercial style, (delicate linework:1.1), paprika anime art style, close-up, (chromatic aberration glow:1.2), 2d painted cel animation, close-up, soft focus, 2D pixiv 1950s
    negative = worst quality, low quality, [input.negative], neon tube, bad art, messy, disfigured, bad anatomy, out of focus, grainy, blurry, jpeg artifact noise, deformed
    meta:tags = [({painting:30, anime:50, vintage:60, cartoon:50})]
  3D Pokemon
    prompt = a pokemon creature, [input.description], [input.pokemonType ? input.pokemonType+", " : ""]4k render, beautiful pokemon digital art, fakemon, pokemon creature, cryptid, fakemon, masterpiece, {soft|sharp} focus, (best quality, high quality:1.3)
    negative = [input.negative], distorted, deformed, bad art, low quality, over saturated, extreme contrast, (worst quality, low quality:1.3)
    meta:tags = [({pokemon:60})]
  Painted Pokemon
    prompt = [input.description], [input.pokemonType ? input.pokemonType+", " : ""]4k digital painting of a pokemon, amazing pokemon art by piperdraws, cryptid creations by Piper Thibodeau, by Naoki Saito and {Tokiya|Mitsuhiro Arita}, incredible composition
    negative = [input.negative], crappy 3D render, distorted, deformed, bad art, low quality, text, signature
    meta:tags = [({pokemon:50})]
  2D Pokemon
    prompt = [input.description], [input.pokemonType ? input.pokemonType+", " : ""]pokemon creature concept, superb line art, beautiful pokemon digital art, fakemon, by Sowsow, pokemon creature, cryptid, fakemon, masterpiece, by Yuu Nishida, 4k
    negative = [input.negative], distorted, deformed, bad art, low quality, crappy 3D render, text watermark symbols logo
    meta:tags = [({pokemon:70, drawing:50, cartoon:35})]
  Vintage Anime
    prompt = [input.description], vintage anime, 90's anime style, by hajime sorayama, by greg tocchini, anime masterpiece, pixiv, akira-style art, akira anime art, 4k, high quality
    negative = [input.negative], (worst quality, low quality:1.3), bad art, distorted, deformed
    meta:tags = [({anime:40, vintage:50, drawing:50})]
  Neon Vintage Anime
    prompt = [input.description], ((neon vintage anime)) style, 90's anime style, hajime sorayama, greg tocchini, neon vintage anime masterpiece, anime art, 4k, high quality
    negative = [input.negative], blurry, (worst quality, low quality:1.3), bad art, distorted, deformed
    meta:tags = [({anime:30, vintage:50})]
  Manga
    prompt = [input.description], incredible hand-drawn manga, black and white, by Takehiko Inoue, by Katsuhiro Otomo and akira toriyama manga, hand-drawn art by rumiko takahashi and Inio Asano, Ken Akamatsu manga art
    negative = [input.negative], (worst quality, low quality:1.3), bad photo, bad 3D render, distorted, deformed, fuzzy, noisy, blurry, smudge
    meta:tags = [({anime:40, drawing:50, manga:100, comic:20, cartoon:30})]
  Fantasy World Map
    prompt = beautiful fantasy map of [input.description], beautiful fantasy map inspired by middle earth and azeroth and discworld and westeros and essos and the witcher world and tamriel and faerûn and thedas, 4k, beautiful colors, crisp, high-resolution artistic map, topographic 3D terrain, artistic map
    negative = [input.negative], low quality, blurry, worst quality, childrens drawing, boring, logo, scratchy and grainy, messy, washed out colors, sepia, hazy
    meta:tags = [({map:90, fantasy:20})]
  Fantasy City Map
    prompt = an aerial view of a city, TTRPG city map showing the full city, [input.description], fantasy art, by senior environment artist, beautiful fantasy map
    negative = [input.negative], fuzzy, bad art
    meta:tags = [({map:80, fantasy:20})]
  Old World Map
    prompt = fantasy world map of [input.description], fantasy world map, highly detailed digital painting, fantasy art, map illustration, 8k
    negative = [input.negative], low resolution, worst quality
    meta:tags = [({map:70, fantasy:20})]
  3D Isometric Icon
    prompt = [input.description], 3D isometric render of cute [input.description], 3D app icon, clean isometric design, beautiful design, soft gradient background, soft colors, centered, 3D blender render, masterpiece, best quality, high resolution, 8k octane render, beautiful color scheme, soft smooth lighting, physically based rendering, square image, high polycount
    negative = [input.negative], low quality, terrible design, glitchy compression artefacts, deformed, blurry compression artefacts, text
    meta:tags = [({icon:90, emoji:86})]
  Flat Style Icon
    prompt = [input.description], creative icon, flat style icon, masterpiece, high resolution, crisp, beautiful composition and color choice, beautiful flat painted style, behance contest-winner, award winning icon illustration, 8k, best quality
    negative = [input.negative], gradient, bad design, blurry, jpeg compression artefacts, grainy, gradient, text, messy and inconsistent
    meta:tags = [({icon:80})]
  Flat Style Logo
    prompt = beautiful flat-style logo design depicting [input.description], creative flat-style logo design, trending on dribbble, featured on behance, portfolio piece, minimal flat design, breathtaking graphic design, 8k, high resolution vector logo, plain background, amazingly beautiful logo design, winner of best logo award
    negative = [input.negative], photo, hilariously bad design, bad composition, bad colors, blurry, worst quality, low quality, shadow, boring, bad dsign, worst design ever, hilariously bad design, drop-shadow, gradient, messy, chaotic
    meta:tags = [({icon:80, logo:80})]
  Game Art Icon
    prompt = [input.description], a concept art icon for league of legends, a digital art logo, illustration, league of legends style icon, inspired by wlop style, 8k, dota 2 style icon, fine details, sharp, very detailed icon, high resolution rpg ability/spell/item icon
    negative = [input.negative], low-quality, deformed, text, poorly drawn, multiple
    meta:tags = [({icon:70})]
  Digital Painting Icon
    prompt = [input.description], app logo icon, digital art pictogram icon, trending on artstation, app icon by atey ghailan, app icon by greg rutkowski, app icon by greg tocchini, app icon by james gilleard, 8k, high resolution, best quality
    negative = [input.negative], photo, low-quality, deformed, text, poorly drawn
    meta:tags = [({icon:60})]
  Concept Art Icon
    prompt = [input.description], a concept art icon, a digital art logo, illustration, league of legends style concept art logo icon, inspired by wlop style, 8k, fine details, sharp, very detailed, high resolution logo icon
    negative = [input.negative], low-quality, deformed, text, poorly drawn, multiple
    meta:tags = [({icon:50})]
  Cute 3D Icon
    prompt = [input.description], a cute 3D icon of [description], cartoon 3D icon, very cute shape, stylized octane render, 8k, masterpiece, soooo cute, beautiful cute perfection, beautiful soft lighting, soft colors, centered, high resolution, [description], soft gradient background
    negative = [input.negative], low quality, text, ugly, gross
    meta:tags = [({icon:40})]
  Cute 3D Icon 𝗦𝗲𝘁
    prompt = [input.description], a set of lovely little 3D icons, cute 3D icons, very cute shapes, stylized octane render, 8k, masterpiece, soooo cute, beautiful cute perfection, beautiful soft lighting, soft colors, centered, high resolution, [description], cute icon set
    negative = [input.negative], low quality, text, ugly, gross
    meta:tags = [({icon:30})]
  Crayon Drawing
    prompt = [input.description], crayon drawing
    negative = [input.negative], low-quality, deformed, text, poorly drawn
  Pencil
    prompt = ((black and white pencil drawing)), [input.description], black and white, breathtaking pencil illustration, highly detailed, 4k, (textured paper), pencil texture, sketch
    negative = [input.negative], stationary, holding pen, holding paper, low-quality, deformed, photo, 3D render, text, poorly drawn
    meta:tags = [({drawing:45})]
  Tattoo Design
    prompt = amazing tattoo design, [input.description], breathtaking tattoo design, incredible tattoo design
    negative = [input.negative], low-quality, poorly drawn, blurry, faded, terrible design, worst quality, deformed, amputee, disfigured, ugly, bad, shitty, boring
    meta:tags = [({tattoo:100})]
  Waifu
    prompt = [input.description], waifu character portrait, art by Kazenoko, featured on pixiv, 1 girl, by Ilya Kuvshinov, Kantoku art, very detailed anime art by Redjuice
    negative = (worst quality, low quality:1.3), [input.negative], bad photo, bad art, boring, bad 3D render, worst quality, ugly, blurry, low quality, poorly drawn, bad composition, deformed, bad 3D render, disfigured, bad anatomy, compression artifacts, dead, soulless, photorealistic
    meta:tags = [({anime:40, waifu:100, cartoon:20})]
    modifiers = [animeModifiers]
  YuGiOh Art
    prompt = yugioh card art for [input.description], art by genzoman, by Akina Fujiwara, by rossdraws, yugioh monster, close up, painterly details, breathtaking art, centered, masterpiece, amazing composition, [input.description.length < 30 ? input.description : ""]
    negative = [input.negative], Yugi Mutou, low-quality, blurry, crappy 3D render, worst quality, messy, noisy, framed, with border, cropped, confusing, stacked characters poster, low resolution, bad 3D render, fuzzy
    meta:tags = [({yugioh:100})]
  Traditional Japanese
    prompt = [input.description], in ukiyo-e art style, traditional japanese masterpiece
    negative = [input.negative], blurry, low resolution, worst quality, fuzzy
    meta:tags = [({japanese:100, vintage:50, cartoon:30})]
  Nihonga Painting
    prompt = japanese nihonga painting about [input.description], Nihonga, ancient japanese painting, intricate, detailed
    negative = [input.negative], framed blurry crappy photo, overly faded
    meta:tags = [({japanese:95, vintage:55, comic:70})]
  Claymation
    prompt = [input.description], claymation, incredible claymation style, kubo and the two strings style art, Missing Link 2019 art style, clay texture, clay animation, stop-motion clay
    negative = [input.negative], glossy, creepy, dead eyes, lifeless eyes, blurry, scary, boring, tiling, cropped, terrifying, horror, out of focus
    meta:tags = [({claymation:100})]
  Furry - Painted
    prompt = anthro [input.description] digital art, masterpiece, 4k, fine details
    negative = [input.negative], bad photo, worst quality, bad composition, bad lighting, bad colors, small eyes, low quality, bad art, poorly drawn, deformed, bad 3D render, boring, lifeless, deformed, ugly, low resolution
    meta:tags = [({furry:100})]
    modifiers = [furryModifiers]
  Furry - Drawn
    prompt = anthro [input.description] illustration, hand-drawn, bold linework, anthro illustration, cel shaded, 4k, fine details, masterpiece
    negative = [input.negative], bad photo, terrible 3D render, bad anatomy, worst quality, greyscale, black and white, disfigured, deformed, glitch, cross-eyed, lazy eye, ugly, deformed, distorted, glitched, lifeless, low quality, bad proportions
    meta:tags = [({furry:95})]
    modifiers = [furryModifiers]
  Furry - Cinematic
    prompt = [input.description], cinematic shot, dynamic lighting, 75mm, Technicolor, Panavision, cinemascope, sharp focus, fine details, 8k, HDR, realism, realistic, key visual, film still, cinematic color grading, depth of field, (anthro:0.1)
    negative = [input.negative], bad lighting, low-quality, deformed, text, poorly drawn, holding camera, bad art, bad angle, boring, low-resolution, worst quality, bad composition, disfigured
    meta:tags = [({furry:97, photo:60, portrait:40, render:75, cinematic:65})]
    modifiers
      effect = [furryModifiers.effect]
      shot = [photoModifiers.shot]
      color = [photoModifiers.color]
      photo effect = [photoModifiers.effect]
  Cartoon
    prompt = [input.description], cartoon-style art, superb linework, nice colors and composition, bold linework, close-up, (masterpiece), cute art by Dana Terrace, by Rebecca Sugar, by ry-spirit, amazing and wholesome cartoon-style art, cute art style, (trending on artstation)
    negative = [input.negative], bad art, boring art, hilariously bad drawings, bad 3D render, bad photo, blurry, blur, worst quality, boring colors, logo vector image, monotone, lifeless, expressionless, faded, horror, creepy
    meta:tags = [({cartoon:95, basicCartoon:100})]
  Cursed Photo
    prompt = cursed photo of [input.description], (creepy and cursed:1.2), absolutely cursed photo, nope nope nope nope, what the actual f, (unsettling photo:1.2), cursed_thing, cursedimages, no context, cursed image, bad photo, weird photo, very strange, color photo, creepy photo, (nightmare fuel)
    negative = [input.negative], skeleton face, nice photo, lovely photo, old photo, vintage photo, greyscale, wholesome, eyebleach, bad photoshop
    meta:tags = [({creepy:100})]
    modifiers
      modifier
        found footage = , found footage
        cult = , photo from a real cult
        1920s = , 1920s photo
        old phone = , old cell phone photo
        VHS = , old VHS footage
        CCTV = , old CCTV footage, high-angle CCTV image
        trypophobia = , trypophobia
        backrooms = , backrooms
        black & white = , black & white
        grainy = , grainy, noisy static effect
        extreme close-up = , extreme close-up
        low-angle = , low-angle shot
        dramatic = , dramatic angle, extreme angle shot
  Developed by 9gin
    prompt = [input.description] , (holding sign ((it texted 'By 9gin'))), (((left down located 'by 9gin' watermark on screen)))
    negative = [input.negative] (worst quality, low quality, blurry:1.3), black and white, low-quality, deformed, text, poorly drawn, bad art, bad anatomy, bad lighting, disfigured, faded, blurred face
  
photoModifiers
  shot
    extreme close-up = , extreme close-up
    low-angle = , low-angle shot
    high-angle = , high-angle shot
    aerial = , aerial shot
    close-up = , close-up shot
    portrait = , close-up portrait
    macro = , macro shot
    wide-angle = , wide-angle shot
    establishing = , establishing shot
    over-the-shoulder = , over-the-shoulder shot
    telephoto = , telephoto shot
    handheld = , handheld shot
    panoramic = , panoramic shot
    dramatic = , dramatic angle, extreme angle shot
  color
    vibrant = , vibrant color grading
    warm = , warm color grading
    cool = , cool-toned color grading
    pastel = , pastel color grading
    bright = , bright color grading
    muted = , muted color grading
    neon = , neon color grading
    duotone = , duotone color grading
    monochrome = , monochrome
    sterile = , cool-toned sterile colors
  effect
    bokeh = , bokeh
    tilt-shift = , tilt-shift effect
    soft focus = , soft focus
    background blur = , shallow depth of field
    chromatic aberrations = , chromatic aberrations
    light leaks = , light leaks
    rear projection = , rear projection
    lens flare = , lens flare
    long exposure = , long exposure
    golden hour = , golden hour
    silhouette = , silhouette

animeModifiers
  style
    Ghibli = , Ghibli art style, Spirited Away art style
    Your Name = , (Your Name art style:1.3)
    Paprika = , Paprika art style
    My Hero Academia = , My Hero Academia art style
    Hunter x Hunter = , Hunter x Hunter art style
    Attack on Titan = , (Attack on Titan art style:1.3)
  effect
    multi-view = , (multiple views:1.2)
    toon = , (cartoon-style bold line work:1.2), vibrant colors, cel shading
    vintage = , (cel shading, vintage anime:1.25)
    ethereal = , (glow, god rays, ethereal, dreamy, heavenly, otherworldly, dream-like, breathtaking, captivating, divine)
    outline = , outline, white outline
  NSFW
    nude = , nude, naked
    big breast = , big boob, big breast
    big ass = , big ass
    sexy = , sexy
    mastervation = , mastervation, touching pussy
    shy = , flush, full of tears, shy
    sex = , sex
    sweat = , sweat
    random = , {cute|pretty} sexy {black|brown|pink|cyan|yellow|multi-colored} {long|shot} hair young girl, {nude|nude|bra}, {shy|flush|full of tears|sweat}, {spread legs|cat pose}, {mastervation|sex|}
    
furryModifiers
  effect
    humanoid face = , (human face, not furry:1.3)
    multi-view = , (multiple views:1.2)
    toon = , (cartoon-style bold line work:1.2), vibrant colors, cel shading
    vintage = , (cel shading, vintage anime:1.25)
    ethereal = , (glow, god rays, ethereal, dreamy, heavenly, otherworldly, dream-like, breathtaking, captivating, divine)
    outline = , outline, white outline
  
landscapeModifiers
  shot
    aerial = , aerial view
    low-angle = , low-angle view
    high-angle = , high-angle view
    wide-angle = , wide-angle view
  color
    vibrant = , vibrant color tones
    warm = , warm-toned colors
    cool = , cool-toned colors
    pastel = , pastel tones
    muted = , muted color grading
    sunset = , sunset color tones
    monochrome = , monochrome
  effect
    tilt-shift = , tilt-shift effect
    golden hour = , golden hour
    mist = , misty
    reflection = , water reflection
    sun flare = , sun flare
    starburst = , starburst effect
    light trails = , light trails
    long exposure = , long exposure
    soft focus = , soft focus
  ","imports":[],"lastEditTime":1738741524769,"found":true},{"name":"bw-live","modelText":"$preprocess = {import:pre-pro}

$output = [output()]

output() =>
  window.liveActivity = function() {
    if(document.querySelectorAll('#pubnub-instance').length == 0 && !window.location.hash.includes("edit")) {
      console.log("Length Check for #pubnub-instance Success")
      d('pubnub-plugin')('tracker',d('bw-keys').sub,d('bw-keys').pub,window.generatorName,'#pubnub-instance')
      return `<span id="pubnub-instance" class="publicPerchanceActivityListener">?</span>`
    } else {
      return `<span id="pubnub-instance" class="publicPerchanceActivityListener">${d('tooltip-plugin')('✏️','You are in edit mode, which glitches the PubnubPlugin. For this reason you are blocked 🎉')}</span>`
    }
  }
  return `<span id="status-dot" style="color: #32cd32">●</span><span id="status-message">[window.liveActivity()]</span>`","imports":["dynamic-import-plugin","pre-pro"],"lastEditTime":1737367116127,"found":true},{"name":"common-female-name","modelText":"title = Random Common Female Name Generator
subtitle = Simply generates a random common, <b>English / Western</b> female first name at each click :)
fontSize = 200
fontColor = black
buttonText = randomize
numberOfItems = 1
itemSeperator = <hr style\="opacity:0;margin: 0.15em;"/>
description
\t{import:simple-gen-footer}
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)

$output = [name]

name
  Aadhya
  Aaliyah
  Abby
  Abigail
  Abril
  Ada
  Adaline
  Adalyn
  Adalynn
  Addilyn
  Addilynn
  Addison
  Addisyn
  Addyson
  Adelaide
  Adele
  Adelina
  Adeline
  Adelyn
  Adelynn
  Adilynn
  Adley
  Adriana
  Adrianna
  Adrienne
  Ailani
  Aileen
  Ainsley
  Aisha
  Aitana
  Aiyana
  Alaia
  Alaina
  Alana
  Alani
  Alanna
  Alannah
  Alaya
  Alayah
  Alayna
  Aleah
  Aleena
  Alejandra
  Alena
  Alessandra
  Alessia
  Alexa
  Alexandra
  Alexandria
  Alexia
  Alexis
  Alia
  Aliana
  Alice
  Alicia
  Alina
  Alisa
  Alisha
  Alison
  Alivia
  Aliya
  Aliyah
  Aliza
  Allie
  Allison
  Allyson
  Alma
  Alondra
  Alora
  Alyson
  Alyssa
  Amalia
  Amanda
  Amani
  Amara
  Amari
  Amaris
  Amaya
  Amayah
  Amber
  Amelia
  Amelie
  Amia
  Amina
  Aminah
  Amira
  Amirah
  Amiya
  Amiyah
  Amora
  Amy
  Ana
  Anabelle
  Anahi
  Analia
  Anastasia
  Anaya
  Andi
  Andrea
  Angel
  Angela
  Angelica
  Angelina
  Angelique
  Angie
  Anika
  Aniya
  Aniyah
  Anna
  Annabel
  Annabella
  Annabelle
  Annalee
  Annalise
  Anne
  Annie
  Annika
  Ansley
  Antonella
  Anya
  April
  Arabella
  Aranza
  Arely
  Ari
  Aria
  Ariadne
  Ariah
  Ariana
  Arianna
  Ariel
  Ariella
  Arielle
  Ariya
  Ariyah
  Armani
  Arya
  Aryanna
  Ashley
  Ashlyn
  Ashlynn
  Aspen
  Astrid
  Athena
  Aubree
  Aubrey
  Aubrie
  Aubriella
  Aubrielle
  Audrey
  Audrina
  Aurelia
  Aurora
  Autumn
  Ava
  Avah
  Avalyn
  Avalynn
  Averi
  Averie
  Avery
  Aviana
  Avianna
  Aya
  Ayla
  Ayleen
  Aylin
  Azalea
  Azariah
  Bailee
  Bailey
  Barbara
  Baylee
  Beatrice
  Belen
  Bella
  Belle
  Bethany
  Bexley
  Bianca
  Blair
  Blaire
  Blake
  Blakely
  Bonnie
  Braelyn
  Braelynn
  Braylee
  Breanna
  Brenda
  Brenna
  Bria
  Briana
  Brianna
  Briar
  Bridget
  Briella
  Brielle
  Brinley
  Bristol
  Brittany
  Brooke
  Brooklyn
  Brooklynn
  Brylee
  Brynlee
  Brynn
  Cadence
  Cali
  Callie
  Calliope
  Cameron
  Camila
  Camilla
  Camille
  Camryn
  Cara
  Carla
  Carlee
  Carly
  Carmen
  Carolina
  Caroline
  Carolyn
  Carter
  Casey
  Cassandra
  Cassidy
  Cataleya
  Catalina
  Catherine
  Caylee
  Cecelia
  Cecilia
  Celeste
  Celia
  Celine
  Chana
  Chanel
  Charlee
  Charleigh
  Charley
  Charli
  Charlie
  Charlotte
  Chaya
  Chelsea
  Cheyenne
  Chloe
  Christina
  Christine
  Claire
  Clara
  Clare
  Clarissa
  Claudia
  Clementine
  Colette
  Collins
  Cora
  Coraline
  Corinne
  Courtney
  Crystal
  Cynthia
  Dahlia
  Daisy
  Dakota
  Dalary
  Daleyza
  Dallas
  Dana
  Danica
  Daniela
  Daniella
  Danielle
  Danna
  Daphne
  Davina
  Dayana
  Deborah
  Delaney
  Delilah
  Demi
  Desiree
  Destiny
  Diana
  Dorothy
  Dream
  Dulce
  Dylan
  Eden
  Edith
  Egypt
  Eileen
  Elaina
  Elaine
  Eleanor
  Elena
  Eliana
  Elianna
  Elisa
  Elisabeth
  Elise
  Eliza
  Elizabeth
  Ella
  Elle
  Ellen
  Elliana
  Ellianna
  Ellie
  Elliot
  Elliott
  Ellis
  Ellison
  Eloise
  Elora
  Elsa
  Elsie
  Elyse
  Ember
  Emberly
  Emelia
  Emely
  Emerald
  Emerie
  Emerson
  Emersyn
  Emery
  Emilee
  Emilia
  Emily
  Emma
  Emmaline
  Emmalyn
  Emmalynn
  Emmeline
  Emmie
  Emmy
  Emory
  Ensley
  Erica
  Erika
  Erin
  Esme
  Esmeralda
  Esperanza
  Estella
  Estelle
  Esther
  Estrella
  Eva
  Evalyn
  Evangeline
  Eve
  Evelyn
  Evelynn
  Everlee
  Everleigh
  Everly
  Evie
  Faith
  Fatima
  Faye
  Felicity
  Fernanda
  Finley
  Fiona
  Florence
  Frances
  Francesca
  Frankie
  Freya
  Frida
  Gabriela
  Gabriella
  Gabrielle
  Galilea
  Gemma
  Genesis
  Genevieve
  Georgia
  Gia
  Giana
  Gianna
  Giovanna
  Giselle
  Giuliana
  Gloria
  Grace
  Gracelyn
  Gracelynn
  Gracie
  Greta
  Guadalupe
  Gwen
  Gwendolyn
  Hadassah
  Hadlee
  Hadleigh
  Hadley
  Hailee
  Hailey
  Haley
  Halle
  Hallie
  Hana
  Hanna
  Hannah
  Harlee
  Harleigh
  Harley
  Harlow
  Harmoni
  Harmony
  Harper
  Hattie
  Haven
  Hayden
  Haylee
  Hayley
  Hazel
  Heaven
  Heavenly
  Heidi
  Helen
  Helena
  Henley
  Holland
  Holly
  Hope
  Hunter
  Iliana
  Imani
  India
  Ingrid
  Irene
  Iris
  Isabel
  Isabela
  Isabella
  Isabelle
  Isla
  Itzayana
  Itzel
  Ivanna
  Ivory
  Ivy
  Izabella
  Jacqueline
  Jada
  Jade
  Jaelyn
  Jaelynn
  Jaliyah
  Jamie
  Jana
  Jane
  Janelle
  Janessa
  Janiyah
  Jasmine
  Jaycee
  Jayda
  Jayde
  Jayden
  Jayla
  Jaylah
  Jaylee
  Jayleen
  Jaylene
  Jazlyn
  Jazlynn
  Jazmin
  Jazmine
  Jemma
  Jenna
  Jennifer
  Jenny
  Jessa
  Jessica
  Jessie
  Jewel
  Jillian
  Jimena
  Joanna
  Jocelyn
  Joelle
  Johanna
  Jolene
  Jolie
  Jordan
  Jordyn
  Joselyn
  Josephine
  Josie
  Joslyn
  Journee
  Journey
  Joy
  Joyce
  Judith
  Julia
  Juliana
  Julianna
  Julie
  Juliet
  Julieta
  Juliette
  Julissa
  June
  Juniper
  Jurnee
  Justice
  Kadence
  Kaelyn
  Kai
  Kaia
  Kailani
  Kailee
  Kailey
  Kailyn
  Kairi
  Kaitlyn
  Kaiya
  Kalani
  Kali
  Kaliyah
  Kallie
  Kamila
  Kamryn
  Kara
  Karen
  Karina
  Karla
  Karlee
  Karlie
  Karsyn
  Karter
  Kassandra
  Kassidy
  Katalina
  Kate
  Katelyn
  Katherine
  Kathleen
  Kathryn
  Katie
  Kaya
  Kaydence
  Kayla
  Kaylani
  Kaylee
  Kayleigh
  Kaylie
  Kaylin
  Kehlani
  Keira
  Kelly
  Kelsey
  Kendall
  Kendra
  Kenia
  Kenley
  Kenna
  Kennedi
  Kennedy
  Kensley
  Kenya
  Kenzie
  Keyla
  Khaleesi
  Khloe
  Kiana
  Kiara
  Kiera
  Kimber
  Kimberly
  Kimora
  Kinley
  Kinslee
  Kinsley
  Kira
  Kora
  Kori
  Kristina
  Kyla
  Kylee
  Kyleigh
  Kylie
  Kynlee
  Kyra
  Lacey
  Laila
  Lailah
  Lainey
  Lana
  Landry
  Laney
  Lara
  Laura
  Laurel
  Lauren
  Lauryn
  Layla
  Laylah
  Lea
  Leah
  Leanna
  Legacy
  Leia
  Leighton
  Leila
  Leilani
  Lena
  Lennon
  Lennox
  Leona
  Leslie
  Lexi
  Lexie
  Leyla
  Lia
  Liana
  Liberty
  Lila
  Lilah
  Lilian
  Liliana
  Lilianna
  Lilith
  Lillian
  Lilliana
  Lillianna
  Lillie
  Lilly
  Lily
  Lilyana
  Lina
  Linda
  Lindsey
  Lisa
  Liv
  Livia
  Lizbeth
  Logan
  Lola
  London
  Londyn
  Lorelai
  Lorelei
  Louisa
  Louise
  Lucia
  Luciana
  Lucille
  Lucy
  Luella
  Luna
  Lyanna
  Lydia
  Lyla
  Lylah
  Lyra
  Lyric
  Mabel
  Maci
  Macie
  Mackenzie
  Macy
  Madalyn
  Madalynn
  Maddison
  Madeleine
  Madeline
  Madelyn
  Madelynn
  Madilyn
  Madilynn
  Madison
  Madisyn
  Mae
  Maeve
  Magdalena
  Maggie
  Magnolia
  Maia
  Maisie
  Makayla
  Makenna
  Makenzie
  Malani
  Malaya
  Malaysia
  Maleah
  Malia
  Maliah
  Maliyah
  Mallory
  Mara
  Maren
  Margaret
  Margot
  Maria
  Mariah
  Mariam
  Mariana
  Marianna
  Marie
  Marilyn
  Marina
  Marissa
  Marjorie
  Marlee
  Marleigh
  Marley
  Marlowe
  Martha
  Mary
  Maryam
  Matilda
  Mavis
  Maxine
  Maya
  Mckenna
  Mckenzie
  Mckinley
  Meadow
  Megan
  Meilani
  Melania
  Melanie
  Melany
  Melina
  Melissa
  Melody
  Mercy
  Meredith
  Mia
  Miah
  Micah
  Michaela
  Michelle
  Mikaela
  Mikayla
  Mila
  Milan
  Milana
  Milani
  Milena
  Miley
  Millie
  Mina
  Mira
  Miracle
  Miranda
  Miriam
  Miya
  Molly
  Monica
  Monroe
  Monserrat
  Morgan
  Mya
  Myah
  Myla
  Mylah
  Myra
  Nadia
  Nala
  Nalani
  Nancy
  Naomi
  Natalia
  Natalie
  Nataly
  Natasha
  Nathalia
  Nathalie
  Naya
  Nayeli
  Nevaeh
  Nia
  Nicole
  Nina
  Noa
  Noelle
  Noemi
  Nola
  Noor
  Nora
  Norah
  Nova
  Novalee
  Nyla
  Nylah
  Oaklee
  Oakley
  Oaklyn
  Oaklynn
  Octavia
  Olive
  Olivia
  Opal
  Ophelia
  Paige
  Paislee
  Paisleigh
  Paisley
  Paityn
  Paloma
  Paola
  Paris
  Parker
  Patricia
  Paula
  Paulina
  Payton
  Pearl
  Penelope
  Penny
  Perla
  Peyton
  Phoebe
  Phoenix
  Piper
  Poppy
  Presley
  Princess
  Priscilla
  Quinn
  Rachel
  Raegan
  Raelyn
  Raelynn
  Raina
  Ramona
  Raquel
  Raven
  Raylee
  Rayna
  Rayne
  Reagan
  Rebecca
  Rebekah
  Reese
  Regina
  Reign
  Reina
  Remi
  Remington
  Remy
  Renata
  Renee
  Reyna
  Rhea
  Riley
  River
  Rivka
  Riya
  Romina
  Rory
  Rosa
  Rosalie
  Rosalyn
  Rose
  Roselyn
  Rosemary
  Rosie
  Rowan
  Royal
  Royalty
  Ruby
  Ruth
  Ryan
  Ryann
  Rylan
  Rylee
  Ryleigh
  Rylie
  Saanvi
  Sabrina
  Sadie
  Sage
  Saige
  Salma
  Samantha
  Samara
  Samira
  Sandra
  Saoirse
  Sara
  Sarah
  Sarai
  Sariah
  Sariyah
  Sasha
  Savanna
  Savannah
  Sawyer
  Saylor
  Scarlet
  Scarlett
  Scarlette
  Selah
  Selena
  Selene
  Serena
  Serenity
  Shelby
  Shiloh
  Siena
  Sienna
  Sierra
  Simone
  Sky
  Skye
  Skyla
  Skylar
  Skyler
  Sloan
  Sloane
  Sofia
  Sonia
  Sophia
  Sophie
  Spencer
  Stella
  Stephanie
  Stevie
  Summer
  Sunny
  Susan
  Sutton
  Sydney
  Sylvia
  Sylvie
  Talia
  Taliyah
  Tara
  Tatiana
  Tatum
  Taylor
  Teagan
  Tegan
  Tenley
  Teresa
  Tessa
  Thalia
  Thea
  Tiana
  Tiffany
  Tinley
  Tinsley
  Tori
  Treasure
  Trinity
\tTynnyfer
  Vada
  Valentina
  Valeria
  Valerie
  Vanessa
  Veda
  Vera
  Veronica
  Victoria
  Vienna
  Violet
  Virginia
  Vivian
  Viviana
  Vivienne
  Whitney
  Willa
  Willow
  Winter
  Wren
  Wynter
  Ximena
  Xiomara
  Yamileth
  Yara
  Yareli
  Yaretzi
  Zahra
  Zainab
  Zaniyah
  Zara
  Zaria
  Zariah
  Zariyah
  Zaylee
  Zelda
  Zendaya
  Zion
  Zoe
  Zoey
  Zoie
  Zuri","imports":["simple-gen-footer"],"lastEditTime":1545254995067,"found":true},{"name":"common-male-name","modelText":"title = Random Common Male Name Generator
subtitle = Simply generates a random common, <b>English / Western</b> male first name at each click :)
fontSize = 200
fontColor = black
buttonText = randomize
numberOfItems = 1
itemSeperator = <hr style\="opacity:0;margin: 0.15em;"/>
description
\t{import:simple-gen-footer}
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)

$output = [name]

name
  Aaron
  Abdul
  Abe
  Abel
  Abraham
  Abram
  Adalberto
  Adam
  Adan
  Adolfo
  Adolph
  Adrian
  Agustin
  Ahmad
  Ahmed
  Al
  Alan
  Albert
  Alberto
  Alden
  Aldo
  Alec
  Alejandro
  Alex
  Alexander
  Alexis
  Alfonso
  Alfonzo
  Alfred
  Alfredo
  Ali
  Allan
  Allen
  Alonso
  Alonzo
  Alphonse
  Alphonso
  Alton
  Alva
  Alvaro
  Alvin
  Amado
  Ambrose
  Amos
  Anderson
  Andre
  Andreas
  Andres
  Andrew
  Andy
  Angel
  Angelo
  Anibal
  Anthony
  Antione
  Antoine
  Anton
  Antone
  Antonia
  Antonio
  Antony
  Antwan
  Archie
  Arden
  Ariel
  Arlen
  Arlie
  Armand
  Armando
  Arnold
  Arnoldo
  Arnulfo
  Aron
  Arron
  Art
  Arthur
  Arturo
  Asa
  Ashley
  Aubrey
  August
  Augustine
  Augustus
  Aurelio
  Austin
  Avery
  Barney
  Barrett
  Barry
  Bart
  Barton
  Basil
  Beau
  Ben
  Benedict
  Benito
  Benjamin
  Bennett
  Bennie
  Benny
  Benton
  Bernard
  Bernardo
  Bernie
  Berry
  Bert
  Bertram
  Bill
  Billie
  Billy
  Blaine
  Blair
  Blake
  Bo
  Bob
  Bobbie
  Bobby
  Booker
  Boris
  Boyce
  Boyd
  Brad
  Bradford
  Bradley
  Bradly
  Brady
  Brain
  Branden
  Brandon
  Brant
  Brendan
  Brendon
  Brent
  Brenton
  Bret
  Brett
  Brian
  Brice
  Britt
  Brock
  Broderick
  Brooks
  Bruce
  Bruno
  Bryan
  Bryant
  Bryce
  Bryon
  Buck
  Bud
  Buddy
  Buford
  Burl
  Burt
  Burton
  Buster
  Byron
  Caleb
  Calvin
  Cameron
  Carey
  Carl
  Carlo
  Carlos
  Carlton
  Carmelo
  Carmen
  Carmine
  Carol
  Carrol
  Carroll
  Carson
  Carter
  Cary
  Casey
  Cecil
  Cedric
  Cedrick
  Cesar
  Chad
  Chadwick
  Chance
  Chang
  Charles
  Charley
  Charlie
  Chas
  Chase
  Chauncey
  Chester
  Chet
  Chi
  Chong
  Chris
  Christian
  Christoper
  Christopher
  Chuck
  Chung
  Clair
  Clarence
  Clark
  Claud
  Claude
  Claudio
  Clay
  Clayton
  Clement
  Clemente
  Cleo
  Cletus
  Cleveland
  Cliff
  Clifford
  Clifton
  Clint
  Clinton
  Clyde
  Cody
  Colby
  Cole
  Coleman
  Colin
  Collin
  Colton
  Columbus
  Connie
  Conrad
  Cordell
  Corey
  Cornelius
  Cornell
  Cortez
  Cory
  Courtney
  Coy
  Craig
  Cristobal
  Cristopher
  Cruz
  Curt
  Curtis
  Cyril
  Cyrus
  Dale
  Dallas
  Dalton
  Damian
  Damien
  Damion
  Damon
  Dan
  Dana
  Dane
  Danial
  Daniel
  Danilo
  Dannie
  Danny
  Dante
  Darell
  Daren
  Darin
  Dario
  Darius
  Darnell
  Daron
  Darrel
  Darrell
  Darren
  Darrick
  Darrin
  Darron
  Darryl
  Darwin
  Daryl
  Dave
  David
  Davis
  Dean
  Deandre
  Deangelo
  Dee
  Del
  Delbert
  Delmar
  Delmer
  Demarcus
  Demetrius
  Denis
  Dennis
  Denny
  Denver
  Deon
  Derek
  Derick
  Derrick
  Deshawn
  Desmond
  Devin
  Devon
  Dewayne
  Dewey
  Dewitt
  Dexter
  Dick
  Diego
  Dillon
  Dino
  Dion
  Dirk
  Domenic
  Domingo
  Dominic
  Dominick
  Dominique
  Don
  Donald
  Dong
  Donn
  Donnell
  Donnie
  Donny
  Donovan
  Donte
  Dorian
  Dorsey
  Doug
  Douglas
  Douglass
  Doyle
  Drew
  Duane
  Dudley
  Duncan
  Dustin
  Dusty
  Dwain
  Dwayne
  Dwight
  Dylan
  Earl
  Earle
  Earnest
  Ed
  Eddie
  Eddy
  Edgar
  Edgardo
  Edison
  Edmond
  Edmund
  Edmundo
  Eduardo
  Edward
  Edwardo
  Edwin
  Efrain
  Efren
  Elbert
  Elden
  Eldon
  Eldridge
  Eli
  Elias
  Elijah
  Eliseo
  Elisha
  Elliot
  Elliott
  Ellis
  Ellsworth
  Elmer
  Elmo
  Eloy
  Elroy
  Elton
  Elvin
  Elvis
  Elwood
  Emanuel
  Emerson
  Emery
  Emil
  Emile
  Emilio
  Emmanuel
  Emmett
  Emmitt
  Emory
  Enoch
  Enrique
  Erasmo
  Eric
  Erich
  Erick
  Erik
  Erin
  Ernest
  Ernesto
  Ernie
  Errol
  Ervin
  Erwin
  Esteban
  Ethan
  Eugene
  Eugenio
  Eusebio
  Evan
  Everett
  Everette
  Ezekiel
  Ezequiel
  Ezra
  Fabian
  Faustino
  Fausto
  Federico
  Felipe
  Felix
  Felton
  Ferdinand
  Fermin
  Fernando
  Fidel
  Filiberto
  Fletcher
  Florencio
  Florentino
  Floyd
  Forest
  Forrest
  Foster
  Frances
  Francesco
  Francis
  Francisco
  Frank
  Frankie
  Franklin
  Franklyn
  Fred
  Freddie
  Freddy
  Frederic
  Frederick
  Fredric
  Fredrick
  Freeman
  Fritz
  Gabriel
  Gail
  Gale
  Galen
  Garfield
  Garland
  Garret
  Garrett
  Garry
  Garth
  Gary
  Gaston
  Gavin
  Gayle
  Gaylord
  Genaro
  Gene
  Geoffrey
  George
  Gerald
  Geraldo
  Gerard
  Gerardo
  German
  Gerry
  Gil
  Gilbert
  Gilberto
  Gino
  Giovanni
  Giuseppe
  Glen
  Glenn
  Gonzalo
  Gordon
  Grady
  Graham
  Graig
  Grant
  Granville
  Greg
  Gregg
  Gregorio
  Gregory
  Grover
  Guadalupe
  Guillermo
  Gus
  Gustavo
  Guy
  Hai
  Hal
  Hank
  Hans
  Harlan
  Harland
  Harley
  Harold
  Harris
  Harrison
  Harry
  Harvey
  Hassan
  Hayden
  Haywood
  Heath
  Hector
  Henry
  Herb
  Herbert
  Heriberto
  Herman
  Herschel
  Hershel
  Hilario
  Hilton
  Hipolito
  Hiram
  Hobert
  Hollis
  Homer
  Hong
  Horace
  Horacio
  Hosea
  Houston
  Howard
  Hoyt
  Hubert
  Huey
  Hugh
  Hugo
  Humberto
  Hung
  Hunter
  Hyman
  Ian
  Ignacio
  Ike
  Ira
  Irvin
  Irving
  Irwin
  Isaac
  Isaiah
  Isaias
  Isiah
  Isidro
  Ismael
  Israel
  Isreal
  Issac
  Ivan
  Jacinto
  Jack
  Jackie
  Jackson
  Jacob
  Jacques
  Jae
  Jaime
  Jake
  Jamaal
  Jamal
  Jamar
  Jame
  Jamel
  James
  Jamey
  Jamie
  Jamison
  Jan
  Jared
  Jarod
  Jarred
  Jarrett
  Jarrod
  Jarvis
  Jason
  Jasper
  Javier
  Jay
  Jayson
  Jc
  Jean
  Jed
  Jeff
  Jefferey
  Jefferson
  Jeffery
  Jeffrey
  Jeffry
  Jerald
  Jeramy
  Jere
  Jeremiah
  Jeremy
  Jermaine
  Jerold
  Jerome
  Jeromy
  Jerrell
  Jerrod
  Jerrold
  Jerry
  Jess
  Jesse
  Jessie
  Jesus
  Jewel
  Jewell
  Jim
  Jimmie
  Jimmy
  Joan
  Joaquin
  Jody
  Joe
  Joel
  Joesph
  Joey
  John
  Johnathan
  Johnathon
  Johnie
  Johnnie
  Johnny
  Johnson
  Jon
  Jonah
  Jonas
  Jonathan
  Jonathon
  Jordan
  Jordon
  Jorge
  Jose
  Josef
  Joseph
  Josh
  Joshua
  Josiah
  Jospeh
  Josue
  Juan
  Jude
  Judson
  Jules
  Julian
  Julio
  Julius
  Junior
  Justin
  Kareem
  Karl
  Kasey
  Keenan
  Keith
  Kelley
  Kelly
  Kelvin
  Ken
  Kendall
  Kendrick
  Keneth
  Kenneth
  Kennith
  Kenny
  Kent
  Kenton
  Kermit
  Kerry
  Keven
  Kevin
  Kieth
  Kim
  King
  Kip
  Kirby
  Kirk
  Korey
  Kory
  Kraig
  Kris
  Kristofer
  Kristopher
  Kurt
  Kurtis
  Kyle
  Lacy
  Lamar
  Lamont
  Lance
  Landon
  Lane
  Lanny
  Larry
  Lauren
  Laurence
  Lavern
  Laverne
  Lawerence
  Lawrence
  Lazaro
  Leandro
  Lee
  Leif
  Leigh
  Leland
  Lemuel
  Len
  Lenard
  Lenny
  Leo
  Leon
  Leonard
  Leonardo
  Leonel
  Leopoldo
  Leroy
  Les
  Lesley
  Leslie
  Lester
  Levi
  Lewis
  Lincoln
  Lindsay
  Lindsey
  Lino
  Linwood
  Lionel
  Lloyd
  Logan
  Lon
  Long
  Lonnie
  Lonny
  Loren
  Lorenzo
  Lou
  Louie
  Louis
  Lowell
  Loyd
  Lucas
  Luciano
  Lucien
  Lucio
  Lucius
  Luigi
  Luis
  Luke
  Lupe
  Luther
  Lyle
  Lyman
  Lyndon
  Lynn
  Lynwood
  Mac
  Mack
  Major
  Malcolm
  Malcom
  Malik
  Man
  Manual
  Manuel
  Marc
  Marcel
  Marcelino
  Marcellus
  Marcelo
  Marco
  Marcos
  Marcus
  Margarito
  Maria
  Mariano
  Mario
  Marion
  Mark
  Markus
  Marlin
  Marlon
  Marquis
  Marshall
  Martin
  Marty
  Marvin
  Mary
  Mason
  Mathew
  Matt
  Matthew
  Maurice
  Mauricio
  Mauro
  Max
  Maximo
  Maxwell
  Maynard
  Mckinley
  Mel
  Melvin
  Merle
  Merlin
  Merrill
  Mervin
  Micah
  Michael
  Michal
  Michale
  Micheal
  Michel
  Mickey
  Miguel
  Mike
  Mikel
  Milan
  Miles
  Milford
  Millard
  Milo
  Milton
  Minh
  Miquel
  Mitch
  Mitchel
  Mitchell
  Modesto
  Mohamed
  Mohammad
  Mohammed
  Moises
  Monroe
  Monte
  Monty
  Morgan
  Morris
  Morton
  Mose
  Moses
  Moshe
  Murray
  Myles
  Myron
  Napoleon
  Nathan
  Nathanael
  Nathanial
  Nathaniel
  Neal
  Ned
  Neil
  Nelson
  Nestor
  Neville
  Newton
  Nicholas
  Nick
  Nickolas
  Nicky
  Nicolas
  Nigel
  Noah
  Noble
  Noe
  Noel
  Nolan
  Norbert
  Norberto
  Norman
  Normand
  Norris
  Numbers
  Octavio
  Odell
  Odis
  Olen
  Olin
  Oliver
  Ollie
  Omar
  Omer
  Oren
  Orlando
  Orval
  Orville
  Oscar
  Osvaldo
  Oswaldo
  Otha
  Otis
  Otto
  Owen
  Pablo
  Palmer
  Paris
  Parker
  Pasquale
  Pat
  Patricia
  Patrick
  Paul
  Pedro
  Percy
  Perry
  Pete
  Peter
  Phil
  Philip
  Phillip
  Pierre
  Porfirio
  Porter
  Preston
  Prince
  Quentin
  Quincy
  Quinn
  Quintin
  Quinton
  Rafael
  Raleigh
  Ralph
  Ramiro
  Ramon
  Randal
  Randall
  Randell
  Randolph
  Randy
  Raphael
  Rashad
  Raul
  Ray
  Rayford
  Raymon
  Raymond
  Raymundo
  Reed
  Refugio
  Reggie
  Reginald
  Reid
  Reinaldo
  Renaldo
  Renato
  Rene
  Reuben
  Rex
  Rey
  Reyes
  Reynaldo
  Rhett
  Ricardo
  Rich
  Richard
  Richie
  Rick
  Rickey
  Rickie
  Ricky
  Rico
  Rigoberto
  Riley
  Rob
  Robbie
  Robby
  Robert
  Roberto
  Robin
  Robt
  Rocco
  Rocky
  Rod
  Roderick
  Rodger
  Rodney
  Rodolfo
  Rodrick
  Rodrigo
  Rogelio
  Roger
  Roland
  Rolando
  Rolf
  Rolland
  Roman
  Romeo
  Ron
  Ronald
  Ronnie
  Ronny
  Roosevelt
  Rory
  Rosario
  Roscoe
  Rosendo
  Ross
  Roy
  Royal
  Royce
  Ruben
  Rubin
  Rudolf
  Rudolph
  Rudy
  Rueben
  Rufus
  Rupert
  Russ
  Russel
  Russell
  Rusty
  Ryan
  Sal
  Salvador
  Salvatore
  Sam
  Sammie
  Sammy
  Samual
  Samuel
  Sandy
  Sanford
  Sang
  Santiago
  Santo
  Santos
  Saul
  Scot
  Scott
  Scottie
  Scotty
  Sean
  Sebastian
  Sergio
  Seth
  Seymour
  Shad
  Shane
  Shannon
  Shaun
  Shawn
  Shayne
  Shelby
  Sheldon
  Shelton
  Sherman
  Sherwood
  Shirley
  Shon
  Sid
  Sidney
  Silas
  Simon
  Sol
  Solomon
  Son
  Sonny
  Spencer
  Stacey
  Stacy
  Stan
  Stanford
  Stanley
  Stanton
  Stefan
  Stephan
  Stephen
  Sterling
  Steve
  Steven
  Stevie
  Stewart
  Stuart
  Sung
  Sydney
  Sylvester
  Tad
  Tanner
  Taylor
  Ted
  Teddy
  Teodoro
  Terence
  Terrance
  Terrell
  Terrence
  Terry
  Thad
  Thaddeus
  Thanh
  Theo
  Theodore
  Theron
  Thomas
  Thurman
  Tim
  Timmy
  Timothy
  Titus
  Tobias
  Toby
  Tod
  Todd
  Tom
  Tomas
  Tommie
  Tommy
  Toney
  Tony
  Tory
  Tracey
  Tracy
  Travis
  Trent
  Trenton
  Trevor
  Trey
  Trinidad
  Tristan
  Troy
  Truman
  Tuan
  Ty
  Tyler
  Tyree
  Tyrell
  Tyron
  Tyrone
  Tyson
  Ulysses
  Val
  Valentin
  Valentine
  Van
  Vance
  Vaughn
  Vern
  Vernon
  Vicente
  Victor
  Vince
  Vincent
  Vincenzo
  Virgil
  Virgilio
  Vito
  Von
  Wade
  Waldo
  Walker
  Wallace
  Wally
  Walter
  Walton
  Ward
  Warner
  Warren
  Waylon
  Wayne
  Weldon
  Wendell
  Werner
  Wes
  Wesley
  Weston
  Whitney
  Wilber
  Wilbert
  Wilbur
  Wilburn
  Wiley
  Wilford
  Wilfred
  Wilfredo
  Will
  Willard
  William
  Williams
  Willian
  Willie
  Willis
  Willy
  Wilmer
  Wilson
  Wilton
  Winford
  Winfred
  Winston
  Wm
  Woodrow
  Wyatt
  Xavier
  Yong
  Young
  Zachariah
  Zachary
  Zachery
  Zack
  Zackary
  Zane","imports":["simple-gen-footer"],"lastEditTime":1545319343853,"found":true},{"name":"country-or-territory","modelText":"title = Random Country or Territory Generator
subtitle = Simply generates a random country or territory at each click :)
fontSize = 200
fontColor = black
buttonText = randomize 
numberOfItems = 1
itemSeperator = <hr style\="opacity:0;margin: 0.15em;"/>
description
\t{import:simple-gen-footer}
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)


$output = [country]
output = [c=country.selectOne]<p style\="opacity:0.5;font-size:60%;margin:0;">(<a href\="https://www.google.com.au/maps/search/[c]+country">google maps</a>)</p>


// Credit goes to: https://copypastelist.com/geography/list-of-countries-and-territories/

country
  Afghanistan
  Åland Islands
  Albania
  Algeria
  American Samoa
  Andorra
  Angola
  Anguilla
  Antarctica
  Antigua and Barbuda
  Argentina
  Armenia
  Aruba
  Australia
  Austria
  Azerbaijan
  Bahamas
  Bahrain
  Bangladesh
  Barbados
  Belarus
  Belgium
  Belize
  Benin
  Bermuda
  Bhutan
  Plurinational State of Bolivia
  Bonaire, Sint Eustatius and Saba
  Bosnia and Herzegovina
  Botswana
  Bouvet Island
  Brazil
  British Indian Ocean Territory
  Brunei Darussalam
  Bulgaria
  Burkina Faso
  Burundi
  Cabo Verde
  Cambodia
  Cameroon
  Canada
  Cayman Islands
  Central African Republic
  Chad
  Chile
  China
  Christmas Island
  Cocos (Keeling) Islands
  Colombia
  Comoros
  Congo
  Democratic Republic of the Congo
  Cook Islands
  Costa Rica
  Côte d'Ivoire
  Croatia
  Cuba
  Curaçao
  Cyprus
  Czechia
  Denmark
  Djibouti
  Dominica
  Dominican Republic
  Ecuador
  Egypt
  El Salvador
  Equatorial Guinea
  Eritrea
  Estonia
  Eswatini
  Ethiopia
  Falkland Islands (Malvinas)
  Faroe Islands
  Fiji
  Finland
  France
  French Guiana
  French Polynesia
  French Southern Territories
  Gabon
  Gambia
  Georgia
  Germany
  Ghana
  Gibraltar
  Greece
  Greenland
  Grenada
  Guadeloupe
  Guam
  Guatemala
  Guernsey
  Guinea
  Guinea-Bissau
  Guyana
  Haiti
  Heard Island and McDonald Islands
  Holy See
  Honduras
  Hong Kong
  Hungary
  Iceland
  India
  Indonesia
  Islamic Republic of Iran
  Iraq
  Ireland
  Isle of Man
  Israel
  Italy
  Jamaica
  Japan
  Jersey
  Jordan
  Kazakhstan
  Kenya
  Kiribati
  Democratic People's Republic of Korea
  Republic of Korea
  Kuwait
  Kyrgyzstan
  Lao People's Democratic Republic
  Latvia
  Lebanon
  Lesotho
  Liberia
  Libya
  Liechtenstein
  Lithuania
  Luxembourg
  Macao
  Madagascar
  Malawi
  Malaysia
  Maldives
  Mali
  Malta
  Marshall Islands
  Martinique
  Mauritania
  Mauritius
  Mayotte
  Mexico
  Federated States of Micronesia
  Republic of Moldova
  Monaco
  Mongolia
  Montenegro
  Montserrat
  Morocco
  Mozambique
  Myanmar
  Namibia
  Nauru
  Nepal
  Netherlands
  New Caledonia
  New Zealand
  Nicaragua
  Niger
  Nigeria
  Niue
  Norfolk Island
  North Macedonia
  Northern Mariana Islands
  Norway
  Oman
  Pakistan
  Palau
  Palestine
  Panama
  Papua New Guinea
  Paraguay
  Peru
  Philippines
  Pitcairn
  Poland
  Portugal
  Puerto Rico
  Qatar
  Réunion
  Romania
  Russian Federation
  Rwanda
  Saint Barthélemy
  Saint Helena, Ascension and Tristan da Cunha
  Saint Kitts and Nevis
  Saint Lucia
  Saint Martin (French part)
  Saint Pierre and Miquelon
  Saint Vincent and the Grenadines
  Samoa
  San Marino
  Sao Tome and Principe
  Saudi Arabia
  Senegal
  Serbia
  Seychelles
  Sierra Leone
  Singapore
  Sint Maarten (Dutch part)
  Slovakia
  Slovenia
  Solomon Islands
  Somalia
  South Africa
  South Georgia and the South Sandwich Islands
  South Sudan
  Spain
  Sri Lanka
  Sudan
  Suriname
  Svalbard and Jan Mayen
  Sweden
  Switzerland
  Syrian Arab Republic
  Taiwan
  Tajikistan
  United Republic of Tanzania
  Thailand
  Timor-Leste
  Togo
  Tokelau
  Tonga
  Trinidad and Tobago
  Tunisia
  Turkey
  Turkmenistan
  Turks and Caicos Islands
  Tuvalu
  Uganda
  Ukraine
  United Arab Emirates
  United Kingdom of Great Britain and Northern Ireland
  United States of America
  United States Minor Outlying Islands
  Uruguay
  Uzbekistan
  Vanuatu
  Bolivarian Republic of Venezuela
  Viet Nam
  Virgin Islands (British)
  Virgin Islands (U.S.)
  Wallis and Futuna
  Western Sahara
  Yemen
  Zambia
  Zimbabwe
","imports":["simple-gen-footer"],"lastEditTime":1613516398654,"found":true},{"name":"create-instance-plugin","modelText":"// This is the JavaScript function that powers this plugin:
$output (list, mode) =>
\tlet clone = list.createClone;
  
  fixValues(clone, mode);
  
\treturn clone;

fixValues(node, mode) =>
  for(let key of node.getPropertyKeys) {
    // must use defineProperty because we can't overwrite getters without it
    let propValue = node[key];
    let value;
    if(typeof propValue === "string" || typeof propValue === "number" || typeof propValue === "boolean" || typeof propValue === "symbol" || propValue === undefined || propValue === null) {
      value = propValue;
    } else if(Array.isArray(propValue)) {
      if(propValue.length === 0) {
        value = `(error: createInstance plugin tried to selectOne from an empty array for the '${key}' property of '${node.getName}')`;
      } else {
        value = propValue.selectOne;
      }
    } else if(propValue.getPropertyKeys && propValue.getPropertyKeys.length > 0 && propValue.getLength === 0) {
      value = propValue.createClone; // it doesn't have any items - just properties, so we just set the value to prop directly
      if(mode === "deep") {
        fixValues(value, mode); // <-- if using "deep" mode, recursively fix values of this propValue
      }
    } else if(propValue.getPropertyKeys) { // <-- hackliy check that it's a perchance node
      value = propValue.selectOne;
    } else {
      value = propValue; // a POJO or a function, or something?
    }
    Object.defineProperty(node, key, {
      value,
      writable: true,
      enumerable: false,
      configurable: true,
    });
  }
\t
// You can learn JavaScript here:
// https://www.codecademy.com/learn/javascript


// NOTES:

// Changed on 1st of April 2019 so that when `propValue` turns out to be something on which "selectOne" doesn't
// really make sense, it just sets it directly to propValue rather than propValue.selectOne. More specifically, if it
// has no children and instead just has all properties, then we set it directly to that object, rather than
// selectOne-ing it.
// https://www.reddit.com/r/perchance/comments/b7p4w8/createinstance_rolltable_and_inconsistent_results/


// Important counter-intuitive thing to take note of: https://www.reddit.com/r/perchance/comments/nh31xq/the_best_hack_for_methods_in_list_instances/gz0rebt
// the "deep" option of the createInstance plugin is kinda messed up. I should warn people that the [child] list should ONLY have properties - no sub-lists. That basically solves everything, but it's a bit annoying in many cases. Ideally I'd have only called selectOne on a list if it has no properties (i.e. with equals sign). If it has properties it should be treated just as part of the hierarchical blueprint, and those sub-items should get fixed, rather than having selectOne called on it.
// I basically need a new plugin. createInstance2 = {import:create-instance-2-plugin}
// That's the ideal solution here.
// https://perchance.org/hiad2okk9w
","imports":[],"lastEditTime":1701515765237,"found":true},{"name":"download-button-plugin","modelText":"$output(text, style) => 
  return `<a href="https://perchance.org/api/downloadGenerator?generatorName=${window.location.pathname.slice(1)}" download><button style="color:initial; ${style || ""}">${text || "Download"}</button></a>`;
\t","imports":[],"lastEditTime":1735712739719,"found":true},{"name":"dynamic-import-plugin","modelText":"$output(generatorName, mode) =>
  if(generatorName === undefined) throw new Error(`You passed \`undefined\` (as the generator name) to the dynamic import plugin. For example, you wrote something like \`dynamicImport(foo)\`, but you hadn't yet put a generator name inside the 'foo' variable.`);
  if(window.moduleSpace.hasOwnProperty(generatorName)) { // if we've already got it:
    let root = window.moduleSpace[generatorName].getSelf;
    return root.hasOwnProperty("$output") ? root.$output : root;
  }
  
  // TODO: I should allow generatorName to be an array of names so they can be preloaded/loaded with a single request.
  //       And in that case it'd return an object like {foo:fooRootOr$output, bar:barRootOr$output, ...}
  
  if(!mode) mode = "sync";
  
  if(mode === "sync") {
    // *synchronously* download the lists text (and cache it):
    const request = new XMLHttpRequest();
    
    // This is endpoint is public, stable, and has a backwards-compatibility guarantee, so you're free to use it in your own plugins.
    // You give it a list of comma-separated names like generatorNames=foo,bar and it returns an object like {success:true, generators:{foo:{name:"foo", code:"...", imports:[...]}, bar: ... }
    request.open("GET", `https://perchance.org/api/getGeneratorsAndDependencies?generatorNames=${generatorName}`, false); // `false` makes the request synchronous
    request.send(null);

    if(request.status === 200) {
      let responseJson = JSON.parse(request.responseText);
      
      if(!responseJson.generators[generatorName]) throw new Error(`You passed '${generatorName}' to the dynamic import plugin, but the '${generatorName}' generator doesn't seem to exist.`);
      
      let root = createPerchanceTree(responseJson.generators[generatorName].code, {name:generatorName}); // since we specify the name, it gets added to window.moduleSpace
      
      function compileImports(root) {
        for(let name of root.$imports) {
          if(!window.moduleSpace.hasOwnProperty(name)) {
            if(responseJson.generators[name]) {
              console.log("compiling sub-import:", name, responseJson.generators[name]);
              let subImportRoot = createPerchanceTree(responseJson.generators[name].code, {name:name});
              compileImports(subImportRoot);
            } else {
              console.error(`Sub-import of '${generatorName}' named '${name}' doesn't seem to exist.`);
            }
          }
        }
      }
      compileImports(root);
      
      return root.hasOwnProperty("$output") ? root.$output : root;
    } else {
      console.error(`A generator named '${generatorName}' was not found by the dynamic import plugin.`);
      throw new Error(`A generator named '${generatorName}' was not found by the dynamic import plugin.`);
    }
    
  } else if(mode === "async" || mode === "preload") {
    return fetch(`https://perchance.org/api/getGeneratorsAndDependencies?generatorNames=${generatorName}`).then(r => r.json()).then(async responseJson => {
      if(!responseJson.generators[generatorName]) throw new Error(`You passed '${generatorName}' to the dynamic import plugin, but the '${generatorName}' generator doesn't seem to exist.`);
      
      let root = createPerchanceTree(responseJson.generators[generatorName].code, {name:generatorName});
      
      function compileImports(root) {
        for(let name of root.$imports) {
          if(!window.moduleSpace.hasOwnProperty(name)) {
            if(responseJson.generators[name]) {
              console.log("compiling sub-import:", name, responseJson.generators[name]);
              let subImportRoot = createPerchanceTree(responseJson.generators[name].code, {name:name});
              compileImports(subImportRoot);
            } else {
              console.error(`Sub-import of '${generatorName}' named '${name}' doesn't seem to exist.`);
            }
          }
        }
      }
      compileImports(root);
      
      return root.hasOwnProperty("$output") ? root.$output : root;
    });
  } else {
    throw new Error(`Unknown 'mode' given to dynamic-import-plugin: '${mode}'. The valid modes are 'sync' and 'async' and 'preload'.`);
  }","imports":[],"lastEditTime":1726621545192,"found":true},{"name":"generator-stats-plugin","modelText":"$output (generatorName, dataType) =>
  if(generatorName === null) generatorName = window.generatorName;
  if(dataType == undefined) {
\t  dataType = generatorName;
\t  generatorName = window.generatorName; 
\t}

\tif(dataType === undefined) return "(error: you need to specify a second parameter of either 'views' or 'lastEditTime')";
\tif(dataType !== "views" && dataType !== "lastEditTime") return "(error: invalid second parameter. valid options are 'views' and 'lastEditTime')";

\tif(!window.generatorStatsPlugin092750294857) window.generatorStatsPlugin092750294857 = {};

  if(typeof window.generatorStatsPlugin092750294857[generatorName] === "string") { // if it's a cached cached error message
\t  return `<span>${window.generatorStatsPlugin092750294857[generatorName]}</span>`;
\t} else if(window.generatorStatsPlugin092750294857[generatorName]) {
\t\treturn `<span>${formatData(window.generatorStatsPlugin092750294857[generatorName])[dataType]}</span>`
\t}

\tlet elId = ("generator-stats-"+Math.random()).replace(".","");
\tlet outputEl = `<span id='${elId}'></span>`;
\t
\t(async () => {
\t\t
\t\tlet result = (await (await fetch("/api/getGeneratorStats?name="+generatorName)).json());
\t\tif(result.status !== "success") {
\t\t\tdocument.querySelector("#"+elId).innerHTML = "("+result.status+")";
      window.generatorStatsPlugin092750294857[generatorName] = "("+result.status+")";
\t\t\treturn;
\t\t} else {
\t\t\twindow.generatorStatsPlugin092750294857[generatorName] = result.data;
\t\t}
\t\t
\t\tlet waitUntilElExistsInterval = setInterval(() => {
\t\t  if(document.querySelector("#"+elId)) {
\t\t\t  document.querySelector("#"+elId).innerHTML = formatData(window.generatorStatsPlugin092750294857[generatorName])[dataType];
\t\t\t\tclearInterval(waitUntilElExistsInterval);
\t\t\t}
\t\t}, 50);

\t})();
\t
\treturn outputEl;
\t
\t
formatData (g) =>
\tg = JSON.parse(JSON.stringify(g)); // clone
\tif(!g.views) g.views = 0;
\tg.views = g.views > 999 ? (g.views/1000).toFixed(1) + 'k' : g.views;

  g.lastEditTime = Date.now() - g.lastEditTime;
\tg.lastEditTime /= 1000;
\tif(g.lastEditTime > 60*60*24*30*12) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24*30*12));
\t\tg.lastEditTime = t + ` year${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime > 60*60*24*30) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24*30));
\t\tg.lastEditTime = t + ` month${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime > 60*60*24) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24));
\t\tg.lastEditTime = t + ` day${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime > 60*60) {
\t\tlet t = Math.round(g.lastEditTime/(60*60));
\t\tg.lastEditTime = t + ` hour${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime > 60) {
\t\tlet t = Math.round(g.lastEditTime/(60));
\t\tg.lastEditTime = t + ` minute${t==1?"":"s"} ago`;
\t} else {
\t\tlet t = Math.round(g.lastEditTime);
\t\tg.lastEditTime = t + ` second${t==1?"":"s"} ago`;
\t}
\treturn g;","imports":[],"lastEditTime":1613507979077,"found":true},{"name":"generator-stats-plugin-v2","modelText":"$output (generatorName, dataType) =>
  if(generatorName === null) generatorName = window.generatorName;
  if(dataType == undefined) {
\t  dataType = generatorName;
\t  generatorName = window.generatorName; 
\t}

\tif(dataType === undefined) return "(error: you need to specify a second parameter of either 'views' or 'lastEditTime')";
\tif(dataType !== "views" && dataType !== "lastEditTime") return "(error: invalid second parameter. valid options are 'views' and 'lastEditTime')";

\tif(!window.generatorStatsPlugin092750294857) window.generatorStatsPlugin092750294857 = {};

  if(typeof window.generatorStatsPlugin092750294857[generatorName] === "string") { // if it's a cached cached error message
\t  return `<span>${window.generatorStatsPlugin092750294857[generatorName]}</span>`;
\t} else if(window.generatorStatsPlugin092750294857[generatorName]) {
\t\treturn `<span>${formatData(window.generatorStatsPlugin092750294857[generatorName])[dataType]}</span>`
\t}

\tlet elId = ("generator-stats-"+Math.random()).replace(".","");
\tlet outputEl = `<span id='${elId}'></span>`;
\t
\t(async () => {
\t\t
\t\tlet result = (await (await fetch("/api/getGeneratorStats?name="+generatorName)).json());
\t\tif(result.status !== "success") {
\t\t\tdocument.querySelector("#"+elId).innerHTML = "("+result.status+")";
      window.generatorStatsPlugin092750294857[generatorName] = "("+result.status+")";
\t\t\treturn;
\t\t} else {
\t\t\twindow.generatorStatsPlugin092750294857[generatorName] = result.data;
\t\t}
\t\t
\t\tlet waitUntilElExistsInterval = setInterval(() => {
\t\t  if(document.querySelector("#"+elId)) {
\t\t\t  document.querySelector("#"+elId).innerHTML = formatData(window.generatorStatsPlugin092750294857[generatorName])[dataType];
\t\t\t\tclearInterval(waitUntilElExistsInterval);
\t\t\t}
\t\t}, 50);

\t})();
\t
\treturn outputEl;
$meta
  description=UPDATED!!!
formatData (g) =>
\tg = JSON.parse(JSON.stringify(g)); // clone
\tif(!g.views) g.views = 0;
  g.views=g.views.toLocaleString("en-US");
  g.lastEditTime=Date.now() - g.lastEditTime;
\tg.lastEditTime/=1000;
\tif(g.lastEditTime > 60*60*24*30*12) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24*30*12));
\t\tg.lastEditTime = t + ` year${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime>60*60*24*30) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24*30));
\t\tg.lastEditTime = t + ` month${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime>60*60*24) {
\t\tlet t = Math.round(g.lastEditTime/(60*60*24));
\t\tg.lastEditTime = t + ` day${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime>60*60) {
\t\tlet t = Math.round(g.lastEditTime/(60*60));
\t\tg.lastEditTime = t + ` hour${t==1?"":"s"} ago`;
\t} else if(g.lastEditTime>60) {
\t\tlet t=Math.round(g.lastEditTime/(60));
\t\tg.lastEditTime=t + ` minute${t==1?"":"s"} ago`;
\t} else {
\t\tlet t=Math.round(g.lastEditTime);
\t\tg.lastEditTime=t + ` second${t==1?"":"s"} ago`;
\t}
\treturn g;
com={import:comments-plugin}","imports":["comments-plugin"],"lastEditTime":1676240177990,"found":true},{"name":"huge-emoji-list","modelText":"$output = https://user-uploads.perchance.org/file/cdf7f21f64fba53bd86d598c5f26a962.txt

// The reason I put this simple URL into its own generator is so that I can update the URL
// here (e.g. when I add/remove emojis) and the update automatically propagates to all my generators.

// You can import this into your own generator by putting this line in your comments options:
//    customEmojis = {import:huge-emoji-list}
// But do note that I may add/remove emojis to improve the list, remove some NSFW that I missed, etc.","imports":[],"lastEditTime":1730339202589,"found":true},{"name":"link-plugin","modelText":"
$output(href, ph, target) =>
  if (!href) return "Error: you must provide a link, or I can't find it!";
  ph = ph || "Click Me!";
  target = target || "";
  return `<a class="link-plugin" href="${href}" target="${target}">${ph}</a>`;

$meta
  description = A plugin to easily add links to your generators!

title = Link Plugin

body
  $output=[this.joinItems("<br>")]
  [code("link = \\{import:link-plugin\\}")]
  and you can now display a link like this:
  [code('\\[link("https://perchance.org/tutorial/", "Example Link")\\]')]
  And that will produce this:<br>
  [$output("https://perchance.org/tutorial/", "Example Link")]<br>
  The first variable <code>"https://perchance.org/tutorial/"</code> is the link that you go to when you click it, and <code>"Example Link"</code> is the placeholder text. You can change both of these to your needs!<br>
  Now, what if you wanted to make it so that the link opened in a new tab when clicked? In that case, write this:
  [code('\\[link("https://perchance.org/tutorial/", "Example Link", "newTab")\\]')]
  and that would output this:<br>
  [$output("https://perchance.org/tutorial/", "Example Link", "newTab")]<br>
  Now try clicking on that, and you'll see that it opens a new tab!<br>
  So in general, the format is:
  [code('\\[link(url, placeholder, tab)\\]')]
  If you wanted to insert the above link "manually" (i.e. not using this plugin) your HTML code would look like this:
  [code('&lt;a href\\\\="https://www.perchance.org/tutorial">Example Link&lt;/a>')]
  If you'd prefer not to use this plugin, you can instead copy and paste the above HTML code and just change the URL. Note that there's a backslash before the equals sign (after <code>href</code>) which isn't normal in HTML. This backslash is needed if you're using the code in your Perchance lists editor since otherwise Perchance interprets the equals sign as a "special" character. The equals sign has a special meaning when used in Perchance lists, and the backslash tells Perchance "treat this as just a normal non-special character please".<br>
  If you want to learn more aout HTML, [$output("https://www.w3schools.com/html/default.asp", "this site")] has a great tutorial on it!<br>
  Note that if you're using "raw" HTML (instead of this plugin), you can make the link open in a new tab like this:
  [code('&lt;a href\\\\="https://www.perchance.org/tutorial" target\\\\="_blank">Example Link&lt;/a>')]

notes
  Check out more plugins at [$output("https://perchance.org/plugins", "perchance.org/plugins", "newTab")]
  If you typed the link correctly, but it's not working, make sure you included <code>https://</code> at the beggining of it, otherwise it won't work
  If you're linking to another page on Perchance, you can just include the name of the generator, and not the full URL. eg. <code>\[link("tutorial", "Example")\]</code> rather than <code>\[link("https://perchance.org/tutorial", "Example")\]</code>
  If you want to learn more about HTML, [$output("https://www.w3schools.com/html/default.asp", "this site")] has a great tutorial on it, or if you prefer video tutorials, [$output("https://www.khanacademy.org/computing/computer-programming/html-css", "Khan Academy", "newTab")] and [$output("https://www.youtube.com/watch?v=pQN-pnXPaVg", "freeCodeCamp", "newTab")] are great resources as well!
  Made by [$output("/raggedflights-generators", "Raggedflight", "newTab")]","imports":[],"lastEditTime":1692238476824,"found":true},{"name":"markdown-plugin","modelText":"$output(text, options, callback) =>
  //debugger
\tif(!options) options = {smartLists:true, breaks:true}; 
  if(typeof text !== "string") {
    let lines = text.getRawListText.split("\
");
    lines.shift();
    text = lines.join("\
").trim().replace(/\
  /g,"\
").replace(/\
\\s\
/g,"\
\
");
    text = text.replace(/\\=/g, "=");
  }
\tif(!window._____marked123) {
\t  window._____marked123 = getMarkedFunction();
\t\tlet style = document.createElement('style');
\t\tstyle.type = 'text/css';
\t\tstyle.innerHTML = getMarkedCss();
\t\tdocument.querySelector("head").appendChild(style);
\t}
\treturn "<div class=\"markdown-body\" style=\"text-align:left;\">"+window._____marked123(text, options, callback)+"</div>"

// version 0.5.0
// https://cdnjs.cloudflare.com/ajax/libs/marked/0.5.0/marked.min.js
getMarkedFunction() =>
  let w = {};
\t(function(window) {
    !function(e){"use strict";var k={newline:/^\
+/,code:/^( {4}[^\
]+\
*)+/,fences:g,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\
+|$)/,heading:/^ *(#{1,6}) *([^\
]+?) *(?:#+ *)?(?:\
+|$)/,nptable:g,blockquote:/^( {0,3}> ?(paragraph|[^\
]*)(?:\
|$))+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\
{2,}(?! )(?!\1bull )\
*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\
]*\\
+|$)|comment[^\\
]*(\\
+|$)|<\\?[\\s\\S]*?\\?>\\
*|<![A-Z][\\s\\S]*?>\\
*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\
*|</?(tag)(?: +|\\
|/?>)[\\s\\S]*?(?:\\
{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=\\h*\\
)[\\s\\S]*?(?:\\
{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=\\h*\\
)[\\s\\S]*?(?:\\
{2,}|$))",def:/^ {0,3}\[(label)\]: *\
? *<?([^\s>]+)>?(?:(?: +\
? *| *\
 *)(title))? *(?:\
+|$)/,table:g,lheading:/^([^\
]+)\
 *(=|-){2,} *(?:\
+|$)/,paragraph:/^([^\
]+(?:\
(?!hr|heading|lheading| {0,3}>|<\/?(?:tag)(?: +|\
|\/?>)|<(?:script|pre|style|!--))[^\
]+)*)/,text:/^[^\
]+/};function a(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||d.defaults,this.rules=k.normal,this.options.pedantic?this.rules=k.pedantic:this.options.gfm&&(this.options.tables?this.rules=k.tables:this.rules=k.gfm)}k._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,k._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\
]*(?:\
[^'\
]+)*\
?'|\([^()]*\))/,k.def=t(k.def).replace("label",k._label).replace("title",k._title).getRegex(),k.bullet=/(?:[*+-]|\d+\.)/,k.item=/^( *)(bull) [^\
]*(?:\
(?!\1bull )[^\
]*)*/,k.item=t(k.item,"gm").replace(/bull/g,k.bullet).getRegex(),k.list=t(k.list).replace(/bull/g,k.bullet).replace("hr","\\
+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\
+|$))").replace("def","\\
+(?="+k.def.source+")").getRegex(),k._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",k._comment=/<!--(?!-?>)[\s\S]*?-->/,k.html=t(k.html,"i").replace("comment",k._comment).replace("tag",k._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\
]*"| *= *'[^'\
]*'| *= *[^\s"'=<>`]+)?/).getRegex(),k.paragraph=t(k.paragraph).replace("hr",k.hr).replace("heading",k.heading).replace("lheading",k.lheading).replace("tag",k._tag).getRegex(),k.blockquote=t(k.blockquote).replace("paragraph",k.paragraph).getRegex(),k.normal=f({},k),k.gfm=f({},k.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\
([\s\S]*?)\
? *\1 *(?:\
+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\
]+?) *#* *(?:\
+|$)/}),k.gfm.paragraph=t(k.paragraph).replace("(?!","(?!"+k.gfm.fences.source.replace("\\1","\\2")+"|"+k.list.source.replace("\\1","\\3")+"|").getRegex(),k.tables=f({},k.gfm,{nptable:/^ *([^|\
 ].*\|.*)\
 *([-:]+ *\|[-| :]*)(?:\
((?:.*[^>\
 ].*(?:\
|$))*)\
*|$)/,table:/^ *\|(.+)\
 *\|?( *[-:]+[-| :]*)(?:\
((?: *[^>\
 ].*(?:\
|$))*)\
*|$)/}),k.pedantic=f({},k.normal,{html:t("^ *(?:comment *(?:\\
|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\
{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\
{2,}|\\s*$))").replace("comment",k._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\
]+[")]))? *(?:\
+|$)/}),a.rules=k,a.lex=function(e,t){return new a(t).lex(e)},a.prototype.lex=function(e){return e=e.replace(/\r\
|\r/g,"\
").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\
"),this.token(e,!0)},a.prototype.token=function(e,t){var n,r,s,i,l,o,a,h,p,u,c,g,f,d,b,m;for(e=e.replace(/^ +$/gm,"");e;)if((s=this.rules.newline.exec(e))&&(e=e.substring(s[0].length),1<s[0].length&&this.tokens.push({type:"space"})),s=this.rules.code.exec(e))e=e.substring(s[0].length),s=s[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?s:y(s,"\
")});else if(s=this.rules.fences.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"code",lang:s[2],text:s[3]||""});else if(s=this.rules.heading.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"heading",depth:s[1].length,text:s[2]});else if(t&&(s=this.rules.nptable.exec(e))&&(o={type:"table",header:x(s[1].replace(/^ *| *\| *$/g,"")),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3]?s[3].replace(/\
$/,"").split("\
"):[]}).header.length===o.align.length){for(e=e.substring(s[0].length),c=0;c<o.align.length;c++)/^ *-+: *$/.test(o.align[c])?o.align[c]="right":/^ *:-+: *$/.test(o.align[c])?o.align[c]="center":/^ *:-+ *$/.test(o.align[c])?o.align[c]="left":o.align[c]=null;for(c=0;c<o.cells.length;c++)o.cells[c]=x(o.cells[c],o.header.length);this.tokens.push(o)}else if(s=this.rules.hr.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"hr"});else if(s=this.rules.blockquote.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"blockquote_start"}),s=s[0].replace(/^ *> ?/gm,""),this.token(s,t),this.tokens.push({type:"blockquote_end"});else if(s=this.rules.list.exec(e)){for(e=e.substring(s[0].length),a={type:"list_start",ordered:d=1<(i=s[2]).length,start:d?+i:"",loose:!1},this.tokens.push(a),n=!(h=[]),f=(s=s[0].match(this.rules.item)).length,c=0;c<f;c++)u=(o=s[c]).length,~(o=o.replace(/^ *([*+-]|\d+\.) +/,"")).indexOf("\
 ")&&(u-=o.length,o=this.options.pedantic?o.replace(/^ {1,4}/gm,""):o.replace(new RegExp("^ {1,"+u+"}","gm"),"")),this.options.smartLists&&c!==f-1&&(i===(l=k.bullet.exec(s[c+1])[0])||1<i.length&&1<l.length||(e=s.slice(c+1).join("\
")+e,c=f-1)),r=n||/\
\
(?!\s*$)/.test(o),c!==f-1&&(n="\
"===o.charAt(o.length-1),r||(r=n)),r&&(a.loose=!0),m=void 0,(b=/^\[[ xX]\] /.test(o))&&(m=" "!==o[1],o=o.replace(/^\[[ xX]\] +/,"")),p={type:"list_item_start",task:b,checked:m,loose:r},h.push(p),this.tokens.push(p),this.token(o,!1),this.tokens.push({type:"list_item_end"});if(a.loose)for(f=h.length,c=0;c<f;c++)h[c].loose=!0;this.tokens.push({type:"list_end"})}else if(s=this.rules.html.exec(e))e=e.substring(s[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===s[1]||"script"===s[1]||"style"===s[1]),text:s[0]});else if(t&&(s=this.rules.def.exec(e)))e=e.substring(s[0].length),s[3]&&(s[3]=s[3].substring(1,s[3].length-1)),g=s[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[g]||(this.tokens.links[g]={href:s[2],title:s[3]});else if(t&&(s=this.rules.table.exec(e))&&(o={type:"table",header:x(s[1].replace(/^ *| *\| *$/g,"")),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3]?s[3].replace(/(?: *\| *)?\
$/,"").split("\
"):[]}).header.length===o.align.length){for(e=e.substring(s[0].length),c=0;c<o.align.length;c++)/^ *-+: *$/.test(o.align[c])?o.align[c]="right":/^ *:-+: *$/.test(o.align[c])?o.align[c]="center":/^ *:-+ *$/.test(o.align[c])?o.align[c]="left":o.align[c]=null;for(c=0;c<o.cells.length;c++)o.cells[c]=x(o.cells[c].replace(/^ *\| *| *\| *$/g,""),o.header.length);this.tokens.push(o)}else if(s=this.rules.lheading.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"heading",depth:"="===s[2]?1:2,text:s[1]});else if(t&&(s=this.rules.paragraph.exec(e)))e=e.substring(s[0].length),this.tokens.push({type:"paragraph",text:"\
"===s[1].charAt(s[1].length-1)?s[1].slice(0,-1):s[1]});else if(s=this.rules.text.exec(e))e=e.substring(s[0].length),this.tokens.push({type:"text",text:s[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var n={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:g,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(href(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s])__(?!_)|^\*\*([^\s])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*"<\[])\*(?!\*)|^_([^\s][\s\S]*?[^\s_])_(?!_)|^_([^\s_][\s\S]*?[^\s])_(?!_)|^\*([^\s"<\[][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,br:/^( {2,}|\\)\
(?!\s*$)/,del:g,text:/^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\
|$)/};function h(e,t){if(this.options=t||d.defaults,this.links=e,this.rules=n.normal,this.renderer=this.options.renderer||new r,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=n.pedantic:this.options.gfm&&(this.options.breaks?this.rules=n.breaks:this.rules=n.gfm)}function r(e){this.options=e||d.defaults}function s(){}function p(e){this.tokens=[],this.token=null,this.options=e||d.defaults,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options}function u(e,t){return e.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function c(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function t(n,e){return n=n.source||n,e=e||"",{replace:function(e,t){return t=(t=t.source||t).replace(/(^|[^\[])\^/g,"$1"),n=n.replace(e,t),this},getRegex:function(){return new RegExp(n,e)}}}function i(e,t){return l[" "+e]||(/^[^:]+:\/*[^/]*$/.test(e)?l[" "+e]=e+"/":l[" "+e]=y(e,"/",!0)),e=l[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^/]*)[\s\S]*/,"$1")+t:e+t}n._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,n._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,n._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,n.autolink=t(n.autolink).replace("scheme",n._scheme).replace("email",n._email).getRegex(),n._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,n.tag=t(n.tag).replace("comment",k._comment).replace("attribute",n._attribute).getRegex(),n._label=/(?:\[[^\[\]]*\]|\\[\[\]]?|`[^`]*`|[^\[\]\\])*?/,n._href=/\s*(<(?:\\[<>]?|[^\s<>\\])*>|(?:\\[()]?|\([^\s\x00-\x1f\\]*\)|[^\s\x00-\x1f()\\])*?)/,n._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,n.link=t(n.link).replace("label",n._label).replace("href",n._href).replace("title",n._title).getRegex(),n.reflink=t(n.reflink).replace("label",n._label).getRegex(),n.normal=f({},n),n.pedantic=f({},n.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:t(/^!?\[(label)\]\((.*?)\)/).replace("label",n._label).getRegex(),reflink:t(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",n._label).getRegex()}),n.gfm=f({},n.normal,{escape:t(n.escape).replace("])","~|])").getRegex(),url:t(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace("email",n._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:t(n.text).replace("]|","~]|").replace("|","|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\|}~-]+@|").getRegex()}),n.breaks=f({},n.gfm,{br:t(n.br).replace("{2,}","*").getRegex(),text:t(n.gfm.text).replace("{2,}","*").getRegex()}),h.rules=n,h.output=function(e,t,n){return new h(t,n).output(e)},h.prototype.output=function(e){for(var t,n,r,s,i,l,o="";e;)if(i=this.rules.escape.exec(e))e=e.substring(i[0].length),o+=i[1];else if(i=this.rules.autolink.exec(e))e=e.substring(i[0].length),r="@"===i[2]?"mailto:"+(n=u(this.mangle(i[1]))):n=u(i[1]),o+=this.renderer.link(r,null,n);else if(this.inLink||!(i=this.rules.url.exec(e))){if(i=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(i[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(i[0])&&(this.inLink=!1),e=e.substring(i[0].length),o+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):u(i[0]):i[0];else if(i=this.rules.link.exec(e))e=e.substring(i[0].length),this.inLink=!0,r=i[2],this.options.pedantic?(t=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=t[1],s=t[3]):s="":s=i[3]?i[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),o+=this.outputLink(i,{href:h.escapes(r),title:h.escapes(s)}),this.inLink=!1;else if((i=this.rules.reflink.exec(e))||(i=this.rules.nolink.exec(e))){if(e=e.substring(i[0].length),t=(i[2]||i[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){o+=i[0].charAt(0),e=i[0].substring(1)+e;continue}this.inLink=!0,o+=this.outputLink(i,t),this.inLink=!1}else if(i=this.rules.strong.exec(e))e=e.substring(i[0].length),o+=this.renderer.strong(this.output(i[4]||i[3]||i[2]||i[1]));else if(i=this.rules.em.exec(e))e=e.substring(i[0].length),o+=this.renderer.em(this.output(i[6]||i[5]||i[4]||i[3]||i[2]||i[1]));else if(i=this.rules.code.exec(e))e=e.substring(i[0].length),o+=this.renderer.codespan(u(i[2].trim(),!0));else if(i=this.rules.br.exec(e))e=e.substring(i[0].length),o+=this.renderer.br();else if(i=this.rules.del.exec(e))e=e.substring(i[0].length),o+=this.renderer.del(this.output(i[1]));else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),o+=this.renderer.text(u(this.smartypants(i[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{for(;l=i[0],i[0]=this.rules._backpedal.exec(i[0])[0],l!==i[0];);e=e.substring(i[0].length),"@"===i[2]?r="mailto:"+(n=u(i[0])):(n=u(i[0]),r="www."===i[1]?"http://"+n:n),o+=this.renderer.link(r,null,n)}return o},h.escapes=function(e){return e?e.replace(h.rules._escapes,"$1"):e},h.prototype.outputLink=function(e,t){var n=t.href,r=t.title?u(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,u(e[1]))},h.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"â€”").replace(/--/g,"â€“").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1â€˜").replace(/'/g,"â€™").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1â€œ").replace(/"/g,"â€").replace(/\.{3}/g,"â€¦"):e},h.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,s=0;s<r;s++)t=e.charCodeAt(s),.5<Math.random()&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},r.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class="'+this.options.langPrefix+u(t,!0)+'">'+(n?e:u(e,!0))+"</code></pre>\
":"<pre><code>"+(n?e:u(e,!0))+"</code></pre>"},r.prototype.blockquote=function(e){return"<blockquote>\
"+e+"</blockquote>\
"},r.prototype.html=function(e){return e},r.prototype.heading=function(e,t,n){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+n.toLowerCase().replace(/[^\w]+/g,"-")+'">'+e+"</h"+t+">\
":"<h"+t+">"+e+"</h"+t+">\
"},r.prototype.hr=function(){return this.options.xhtml?"<hr/>\
":"<hr>\
"},r.prototype.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\
"+e+"</"+r+">\
"},r.prototype.listitem=function(e){return"<li>"+e+"</li>\
"},r.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},r.prototype.paragraph=function(e){return"<p>"+e+"</p>\
"},r.prototype.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\
<thead>\
"+e+"</thead>\
"+t+"</table>\
"},r.prototype.tablerow=function(e){return"<tr>\
"+e+"</tr>\
"},r.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\
"},r.prototype.strong=function(e){return"<strong>"+e+"</strong>"},r.prototype.em=function(e){return"<em>"+e+"</em>"},r.prototype.codespan=function(e){return"<code>"+e+"</code>"},r.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},r.prototype.del=function(e){return"<del>"+e+"</del>"},r.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(c(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return n}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return n}this.options.baseUrl&&!o.test(e)&&(e=i(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,"%")}catch(e){return n}var s='<a href="'+u(e)+'"';return t&&(s+=' title="'+t+'"'),s+=">"+n+"</a>"},r.prototype.image=function(e,t,n){this.options.baseUrl&&!o.test(e)&&(e=i(this.options.baseUrl,e));var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},r.prototype.text=function(e){return e},s.prototype.strong=s.prototype.em=s.prototype.codespan=s.prototype.del=s.prototype.text=function(e){return e},s.prototype.link=s.prototype.image=function(e,t,n){return""+n},s.prototype.br=function(){return""},p.parse=function(e,t){return new p(t).parse(e)},p.prototype.parse=function(e){this.inline=new h(e.links,this.options),this.inlineText=new h(e.links,f({},this.options,{renderer:new s})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},p.prototype.next=function(){return this.token=this.tokens.pop()},p.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},p.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\
"+this.next().text;return this.inline.output(e)},p.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,c(this.inlineText.output(this.token.text)));case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,s="",i="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(s+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});i+=this.renderer.tablerow(n)}return this.renderer.table(s,i);case"blockquote_start":for(i="";"blockquote_end"!==this.next().type;)i+=this.tok();return this.renderer.blockquote(i);case"list_start":i="";for(var l=this.token.ordered,o=this.token.start;"list_end"!==this.next().type;)i+=this.tok();return this.renderer.list(i,l,o);case"list_item_start":i="";var a=this.token.loose;for(this.token.task&&(i+=this.renderer.checkbox(this.token.checked));"list_item_end"!==this.next().type;)i+=a||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(i);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}};var l={},o=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function g(){}function f(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function x(e,t){var n=e.replace(/\|/g,function(e,t,n){for(var r=!1,s=t;0<=--s&&"\\"===n[s];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function y(e,t,n){if(0===e.length)return"";for(var r=0;r<e.length;){var s=e.charAt(e.length-r-1);if(s!==t||n){if(s===t||!n)break;r++}else r++}return e.substr(0,e.length-r)}function d(e,n,r){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(r||"function"==typeof n){r||(r=n,n=null);var s,i,l=(n=f({},d.defaults,n||{})).highlight,t=0;try{s=a.lex(e,n)}catch(e){return r(e)}i=s.length;var o=function(t){if(t)return n.highlight=l,r(t);var e;try{e=p.parse(s,n)}catch(e){t=e}return n.highlight=l,t?r(t):r(null,e)};if(!l||l.length<3)return o();if(delete n.highlight,!i)return o();for(;t<s.length;t++)!function(n){"code"!==n.type?--i||o():l(n.text,n.lang,function(e,t){return e?o(e):null==t||t===n.text?--i||o():(n.text=t,n.escaped=!0,void(--i||o()))})}(s[t])}else try{return n&&(n=f({},d.defaults,n)),p.parse(a.lex(e,n),n)}catch(e){if(e.message+="\
Please report this to https://github.com/markedjs/marked.",(n||d.defaults).silent)return"<p>An error occurred:</p><pre>"+u(e.message+"",!0)+"</pre>";throw e}}g.exec=g,d.options=d.setOptions=function(e){return f(d.defaults,e),d},d.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new r,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},d.defaults=d.getDefaults(),d.Parser=p,d.parser=p.parse,d.Renderer=r,d.TextRenderer=s,d.Lexer=a,d.lexer=a.lex,d.InlineLexer=h,d.inlineLexer=h.output,d.parse=d,"undefined"!=typeof module&&"object"==typeof exports?module.exports=d:"function"==typeof define&&define.amd?define(function(){return d}):e.marked=d}(this||("undefined"!=typeof window?window:global));
\t}).bind(w)(w);
\treturn w.marked;
\t
getMarkedCss() =>
  return `.markdown-body hr::after,.markdown-body::after{clear:both}@font-face{font-family:octicons-link;src:url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff')}.markdown-body{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;color:#24292e;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";font-size:16px;line-height:1.5;word-wrap:break-word}.markdown-body .pl-c{color:#6a737d}.markdown-body .pl-c1,.markdown-body .pl-s .pl-v{color:#005cc5}.markdown-body .pl-e,.markdown-body .pl-en{color:#6f42c1}.markdown-body .pl-s .pl-s1,.markdown-body .pl-smi{color:#24292e}.markdown-body .pl-ent{color:#22863a}.markdown-body .pl-k{color:#d73a49}.markdown-body .pl-pds,.markdown-body .pl-s,.markdown-body .pl-s .pl-pse .pl-s1,.markdown-body .pl-sr,.markdown-body .pl-sr .pl-cce,.markdown-body .pl-sr .pl-sra,.markdown-body .pl-sr .pl-sre{color:#032f62}.markdown-body .pl-smw,.markdown-body .pl-v{color:#e36209}.markdown-body .pl-bu{color:#b31d28}.markdown-body .pl-ii{color:#fafbfc;background-color:#b31d28}.markdown-body .pl-c2{color:#fafbfc;background-color:#d73a49}.markdown-body .pl-c2::before{content:"^M"}.markdown-body .pl-sr .pl-cce{font-weight:700;color:#22863a}.markdown-body .pl-ml{color:#735c0f}.markdown-body .pl-mh,.markdown-body .pl-mh .pl-en,.markdown-body .pl-ms{font-weight:700;color:#005cc5}.markdown-body .pl-mi{font-style:italic;color:#24292e}.markdown-body .pl-mb{font-weight:700;color:#24292e}.markdown-body .pl-md{color:#b31d28;background-color:#ffeef0}.markdown-body .pl-mi1{color:#22863a;background-color:#f0fff4}.markdown-body .pl-mc{color:#e36209;background-color:#ffebda}.markdown-body .pl-mi2{color:#f6f8fa;background-color:#005cc5}.markdown-body .pl-mdr{font-weight:700;color:#6f42c1}.markdown-body .pl-ba{color:#586069}.markdown-body .pl-sg{color:#959da5}.markdown-body .pl-corl{text-decoration:underline;color:#032f62}.markdown-body .octicon{display:inline-block;fill:currentColor;vertical-align:text-bottom}.markdown-body hr::after,.markdown-body hr::before,.markdown-body::after,.markdown-body::before{display:table;content:""}.markdown-body a{background-color:transparent;color:#0366d6;text-decoration:none}.markdown-body a:active,.markdown-body a:hover{outline-width:0}.markdown-body h1{margin:.67em 0}.markdown-body img{border-style:none}.markdown-body hr{box-sizing:content-box}.markdown-body input{font:inherit;margin:0;overflow:visible;font-family:inherit;font-size:inherit;line-height:inherit}.markdown-body dl dt,.markdown-body strong,.markdown-body table th{font-weight:600}.markdown-body code,.markdown-body pre{font-family:SFMono-Regular,Consolas,"Liberation Mono",Menlo,Courier,monospace}.markdown-body [type=checkbox]{box-sizing:border-box;padding:0}.markdown-body *{box-sizing:border-box}.markdown-body a:hover{text-decoration:underline}.markdown-body td,.markdown-body th{padding:0}.markdown-body blockquote{margin:0}.markdown-body ol ol,.markdown-body ul ol{list-style-type:lower-roman}.markdown-body ol ol ol,.markdown-body ol ul ol,.markdown-body ul ol ol,.markdown-body ul ul ol{list-style-type:lower-alpha}.markdown-body dd{margin-left:0}.markdown-body .pl-0{padding-left:0!important}.markdown-body .pl-1{padding-left:4px!important}.markdown-body .pl-2{padding-left:8px!important}.markdown-body .pl-3{padding-left:16px!important}.markdown-body .pl-4{padding-left:24px!important}.markdown-body .pl-5{padding-left:32px!important}.markdown-body .pl-6{padding-left:40px!important}.markdown-body>:first-child{margin-top:0!important}.markdown-body>:last-child{margin-bottom:0!important}.markdown-body a:not([href]){color:inherit;text-decoration:none}.markdown-body .anchor{float:left;padding-right:4px;margin-left:-20px;line-height:1}.markdown-body .anchor:focus{outline:0}.markdown-body blockquote,.markdown-body dl,.markdown-body ol,.markdown-body p,.markdown-body pre,.markdown-body table,.markdown-body ul{margin-top:0;margin-bottom:16px}.markdown-body hr{overflow:hidden;background:#e1e4e8;height:.25em;padding:0;margin:24px 0;border:0}.markdown-body blockquote{padding:0 1em;color:#6a737d;border-left:.25em solid #dfe2e5}.markdown-body h1,.markdown-body h2{padding-bottom:.3em;border-bottom:1px solid #eaecef}.markdown-body blockquote>:first-child{margin-top:0}.markdown-body blockquote>:last-child{margin-bottom:0}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.markdown-body h1 .octicon-link,.markdown-body h2 .octicon-link,.markdown-body h3 .octicon-link,.markdown-body h4 .octicon-link,.markdown-body h5 .octicon-link,.markdown-body h6 .octicon-link{color:#1b1f23;vertical-align:middle;visibility:hidden}.markdown-body h1:hover .anchor,.markdown-body h2:hover .anchor,.markdown-body h3:hover .anchor,.markdown-body h4:hover .anchor,.markdown-body h5:hover .anchor,.markdown-body h6:hover .anchor{text-decoration:none}.markdown-body h1:hover .anchor .octicon-link,.markdown-body h2:hover .anchor .octicon-link,.markdown-body h3:hover .anchor .octicon-link,.markdown-body h4:hover .anchor .octicon-link,.markdown-body h5:hover .anchor .octicon-link,.markdown-body h6:hover .anchor .octicon-link{visibility:visible}.markdown-body h1{font-size:2em}.markdown-body h2{font-size:1.5em}.markdown-body h3{font-size:1.25em}.markdown-body h4{font-size:1em}.markdown-body h5{font-size:.875em}.markdown-body h6{font-size:.85em;color:#6a737d}.markdown-body ol,.markdown-body ul{padding-left:2em}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:0;margin-bottom:0}.markdown-body li{word-wrap:break-all}.markdown-body li>p{margin-top:16px}.markdown-body li+li{margin-top:.25em}.markdown-body dl{padding:0}.markdown-body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic}.markdown-body dl dd{padding:0 16px;margin-bottom:16px}.markdown-body table{border-spacing:0;border-collapse:collapse;display:block;width:100%;overflow:auto}.markdown-body table td,.markdown-body table th{padding:6px 13px;border:1px solid #dfe2e5}.markdown-body table tr{background-color:#fff;border-top:1px solid #c6cbd1}.markdown-body table tr:nth-child(2n){background-color:#f6f8fa}.markdown-body img{max-width:100%;box-sizing:content-box;background-color:#fff}.markdown-body img[align=right]{padding-left:20px}.markdown-body img[align=left]{padding-right:20px}.markdown-body code{padding:.2em .4em;margin:0;font-size:85%;background-color:rgba(27,31,35,.05);border-radius:3px}.markdown-body pre{word-wrap:normal}.markdown-body pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:0 0;border:0}.markdown-body .highlight{margin-bottom:16px}.markdown-body .highlight pre{margin-bottom:0;word-break:normal}.markdown-body .highlight pre,.markdown-body pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;background-color:#f6f8fa;border-radius:3px}.markdown-body pre code{display:inline;max-width:auto;padding:0;margin:0;overflow:visible;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}.markdown-body .full-commit .btn-outline:not(:disabled):hover{color:#005cc5;border-color:#005cc5}.markdown-body kbd{display:inline-block;padding:3px 5px;font:11px SFMono-Regular,Consolas,"Liberation Mono",Menlo,Courier,monospace;line-height:10px;color:#444d56;vertical-align:middle;background-color:#fafbfc;border:1px solid #d1d5da;border-bottom-color:#c6cbd1;border-radius:3px;box-shadow:inset 0 -1px 0 #c6cbd1}.markdown-body :checked+.radio-label{position:relative;z-index:1;border-color:#0366d6}.markdown-body .task-list-item{list-style-type:none}.markdown-body .task-list-item+.task-list-item{margin-top:3px}.markdown-body .task-list-item input{margin:0 .2em .25em -1.6em;vertical-align:middle}.markdown-body hr{border-bottom-color:#eee}`;
\t
\t
\t
text
  # My title
\tThe first line of my first paragraph.
\tSecond line of first paragraph.
\t\s
\tSecond paragraph. You can *italicize* or **bold** your text easily.
\t
\t## Sub-header
\tHere's a list of items:
\t\t* Bullet point 1
\t\t* Bullet point 2
\t\t* Bullet point 3
\t\t  * Sub-bullet-point
\t\t* Bullet point 4
\t\s
\tAnd we can do numbered lists too:
\t  1. First item
\t\t2. Second item
\t\t3. ~~Scratch this~~
\t\s
\tAdding a [link](https://dillinger.io) is easy with markdown.
\tImages are easy too:
\t\s
\t![image hover tex](https://web.archive.org/web/20091018220201/http://www.geocities.com/roqofages/Rainbowflagwaving.gif)
  \s
  And you can still put HTML code in if needed:
\t\s
\t<video controls src\="https://i.imgur.com/26DZgXM.mp4"></a>
\t```
\tYou can do code-blcks like this.
\tSecond line of code.
\t  Third line of code (indented)
\t```
\t> And quoted text like this. Quotes automatically wrap: foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar.
\t\s
\t> Break quotes up into paragraphs using the \\\\s trick.
\t\s
\tHeader  | Header
\t--------|---------
\tYou     | Can
\tMake    | Neat
\tLittle  | Tables
\tToo     | !
\t\s
\tSo that's a brief intro to some of markdown's basic features!
\t
\t","imports":[],"lastEditTime":1715399399590,"found":true},{"name":"markov-name-generator-plugin","modelText":"// Note: Text that comes after "//" is ignored, which allows
// you to write notes - like the one you're reading now!
$meta
  title = Markov Name Generator Plugin
  description = Generate Markovified Words

md = {import:markdown-plugin}
markovName = {import:markov-name-generator-plugin}
text
  ## Introduction
  This is a plugin that takes a list of names (or words) to generate random names that looks like the input list, it uses **Markov Chains** (see [this website to learn more about it with visualizations!](https://setosa.io/ev/markov-chains/)).
  \s
  This is similar to the [**`markov-chain-plugin`**](/markov-chain-plugin) but it is better for single words/names rather than paragraphs or texts.
  \s
  If you want to generate a *paragraph* based on an input corpus, you might want to use the [**`markov-chain-plugin`**](/markov-chain-plugin), if you want to generate *words* based on an input corpus, then you can use this plugin.
  \s
  ## Using the Plugin
  To use the plugin, paste the following in your Perchance Code Panel (Lists Panel/Quadrant).
  ```
  markovName \= \{import:markov-name-generator-plugin\}
  ```
  > The variable `markovName` can be named anything.
  \s
  ### Example Usage
  Lets say we have a list of names:
  ```
  name
    Aaliyah
    Aaron
    Abby
    Abigail
    ...
    Xavier
    Zachary
    Zoe
    Zoey
  ```
  > List taken from [`common-first-name`](/common-first-name)
  \s
  You can then use the plugin like so:
  ```
  markovOptions
    list \= \[name\]
  \s
  output
    \[markovName(markovOptions)\]
  \s
  or
  \s
  output
    \[markovName(\{list: \[name\]\})\]
  ```
  Here is the output:

text2
  ## Options
  Here are the following options for the plugin:
  \s
  Parameter | Description | Default | Accepted Values
  -|-|-|-
  `list`|This is where you input the list. If your list is an imported one, it is also accepted. (*Required*)|None|Any Perchance List, Arrays, Objects, Imported Generators<br>e.g.`\[name\]`, `\{import:common-first-name\}`
  `type`|This is where you specify the type of output. |`markov`|`markov`, `normal`, `reset`
  `number`|The number of items the generator will output, in an Array/List form|`1`| Any integer, expression that will return a number<br>e.g. `\{1-13\}`, `4`, `\{1-3\}+3` etc.
  `scale` | This will scale the 'count' or 'probability' of each state. | `1.3` | Any number (high value is not recommended since it is passed as an exponent i.e. `count**scale`)
  `depth` | Number of characters to be considered as a chain. The words will be sliced by this number e.g. Hello, with depth `1` will be `H,e,l,l,o`, depth `2` will be `He,ll,o` | `1` | Any integer
  `numItems` | Number of items to be considered from the list. If number is higher than the number of items in the list, all items in the list are instead taken. | `100` | Any integer (loading names from a imported generator takes about 5ms, so 100 will be 0.5s of loading).
  \s
  ```
  makovOptions
    list \= \[name_list\]
    type \= markov
    number = 1
    scale = 1.3
    depth = 1
    numItems = 100
  \s
  or
  \s
  markovOptions = \{list: name_list, type: "markov", number: 1, scale: 1.3, depth: 1, numItems: 100\}  
  ```
  
  ### Types
  * `markov` - this will return a Markovified Word based on the input list.
  * `normal` - this will return a random item from the input list.
  * `reset` - this will return a button to reset the created 'chain' (this is mostly used if the `numItems` is set lower than the number of items in the list, to create a new 'chain' on the new list of items). This also resets the 'scale' and 'depth' on the chains. Clicking the reset will update **All** square brackets.
  \s
  Demo of Types:
  \s
  \s
  
text3
  ## Notes
  * [Here is an example generator](/markov-name-gen-plugin-example) that uses two different imported generators.
  * Once again, this is mostly for **markov words** generation, if you want the similar thing for **paragraphs**, checkout the [`markov-chain-plugin`](/markov-chain-plugin).
  * **The code used for the Markov Chains is from [Donjon's Markov Name Generator](https://donjon.bin.sh/name/markov.html) made by 'drow' and released under [Creative Commons 1.0](http://creativecommons.org/publicdomain/zero/1.0/), it is modified a little bit to work with Perchance. Please checkout [their website](https://donjon.bin.sh/).**
  * This is made by [Vionet20](/vionet20-gens), if you found any bugs, suggest other features, or create a generator using this plugin, feel free to comment on my Gen Hub.
  * Check out more plugins at [perchance.org/plugins](/plugins)
  
  
n = {1-4}

markovOpts
  list = [name]
  
demoOpts
  list = [name]
  type = markov
  number = 1
  scale = 1.3
  depth = 1
  numItems = 100
  
$output(opts) =>
  if(!opts) opts = {};
  let listName;
  if(opts.type != "reset") {
    if(!opts.list) {
      throw new Error(`Error: Please Provide a List on the \`list\` property of the passed settings`);
      return undefined;
    }
    if(!opts.type) opts.type = "markov";
    if(!opts.number) opts.number = 1;
    if(!opts.scale) opts.scale = 1.3;
    if(!opts.depth) opts.depth = 1;
    if(!opts.numItems) opts.numItems = 100;
    listName = "main";
  }
  if (opts.type != "reset") {
    if (!window.window.__addedNameGeneratorJS4392845) {
      addJS();
    }
    let names;
    if (!window.names_set) {
      window.names_set = {}
    }
    if (window.prevList != opts.list) {
      window.names_set = {}
      window.prevList = opts.list;
      if (opts.list.getLength > 1) {
        // console.log(opts.list.getLength > opts.numItems);
        if (opts.list.getLength > opts.numItems) {
          names = getRandomSubarray(opts.list.selectAll, opts.numItems).map(a => a.evaluateItem.trim());
        } else {
          names = opts.list.selectAll.map(a => a.evaluateItem.trim());
        }
      }
      if (opts.list.selectAll.getLength == 1) {
        let x = new Set();
        console.time("Creating Set");
        while(x.size != opts.numItems) {
          x.add(opts.list.evaluateItem.trim());
          // console.log("added an item");
        }
        console.timeEnd("Creating Set");
        // console.time("Set to Array");
        names = [... x];
        // console.timeEnd("Set to Array");
        // console.log(names);
      }
      // console.log(opts.list);
      window.names_set[`${listName}`] = names;
    }
    // console.log(window.names_set);

    window.chain_cache = {};
    window.scale = opts.scale;
    window.depth = opts.depth;
    opts.number = opts.number < 0 ? 1 : opts.number;
    generated = opts.type ? opts.type == "markov" ? Array(opts.number.evaluateItem).fill(0).map(a => generate_name(listName)) : Array(opts.number.evaluateItem).fill(0).map(a => normal_name(listName)) : "Error: Incomplete Parameters" ;
    // console.log(chain_cache);
    
    return generated;
  } else {
    return `<button onclick="window.prevList = '', window.names_set = '', update()">Reset Chain Cache</button`;
  }

getRandomSubarray(arr, size) =>
  var shuffled = arr.slice(0), i = arr.length, min = i - size, temp, index;
  while (i-- > min) {
    index = Math.floor((i + 1) * Math.random());
    temp = shuffled[index];
    shuffled[index] = shuffled[i];
    shuffled[i] = temp;
  }
  return shuffled.slice(min);

addJS() =>
  let script = document.createElement('script');
  script.id = "genCode";
  script.type = "text/javascript";
  script.innerHTML = `
  // Code is from https://donjon.bin.sh/name/markov.html
  // Please Support Their Work! They have a lot of good generators for TTRPG and other Stuff!
  // https://donjon.bin.sh/ <- Site
  //
  // written and released to the public domain by drow <drow@bin.sh>
  // http://creativecommons.org/publicdomain/zero/1.0/
  //
  // Modified a little bit to use 'window' variables to interact with the added script
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // normal generator function
  function normal_name (type) {
    let list; if ((list = window.names_set[type]) && list.length){
      return list[Math.floor(Math.random() * list.length)];
    }
    return '';
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // generator function

  function generate_name (type) {
    let chain; if (chain = markov_chain(type)) {
      return markov_name(chain);
    }
    return '';
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // get markov chain by type
  function markov_chain (type) {
    let chain; if (chain = window.chain_cache[type]) {
      return chain;
    } else {
      let list; if ((list = window.names_set[type]) && list.length) {
        let chain; if (chain = construct_chain(list)) {
          window.chain_cache[type] = chain;
          return chain;
        }
      }
    }
    return false;
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // construct markov chain from list of names
  function construct_chain (list) {
    let chain = {};

    let i; for (i = 0; i < list.length; i++) {
      let names = list[i].split(/\\s/);
      chain = incr_chain(chain,'parts',names.length);

      let j; for (j = 0; j < names.length; j++) {
        let name = names[j];
        chain = incr_chain(chain,'name_len',name.length);

        let c = name.substring(0,window.depth);
        chain = incr_chain(chain,'initial',c);

        let string = name.substring(window.depth);
        let last_c = c;

        while (string.length > 0) {
          let c = string.substring(0,window.depth);
          chain = incr_chain(chain,last_c,c);

          string = string.substring(window.depth);
          last_c = c;
        }
      }
    }
    return scale_chain(chain);
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // count number of occurances of chains
  function incr_chain (chain, key, token) {
    if (chain[key]) {
      if (chain[key][token]) {
        chain[key][token]++;
      } else {
        chain[key][token] = 1;
      }
    } else {
      chain[key] = {};
      chain[key][token] = 1;
    }
    return chain;
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // scale the number of occurances
  function scale_chain (chain) {
    let table_len = {};

    Object.keys(chain).forEach(key => {
      table_len[key] = 0;

      Object.keys(chain[key]).forEach(token => {
        let count = chain[key][token];
        let weighted = Math.floor(Math.pow(count, window.scale));

        chain[key][token] = weighted;
        table_len[key] += weighted;
      });
    });
    chain['table_len'] = table_len;
    return chain;
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // construct name from markov chain
  function markov_name (chain) {
    let parts = select_link(chain,'parts');
    let names = [];

    let i; for (i = 0; i < parts; i++) {
      let name_len = select_link(chain,'name_len');
      let c = select_link(chain,'initial');
      let name = c;
      let last_c = c;

      while (name.length < name_len) {
        c = select_link(chain,last_c);
        if (! c) break;

        name += c;
        last_c = c;
      }
      names.push(name);
    }
    return names.join(' ');
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // select from the chain randomly
  function select_link (chain, key) {
    let len = chain['table_len'][key];
    if (! len) return false;
    let idx = Math.floor(Math.random() * len);
    let tokens = Object.keys(chain[key]);
    let acc = 0;

    let i; for (i = 0; i < tokens.length; i++) {
      let token = tokens[i];

      acc += chain[key][token];
      if (acc > idx) return token;
    }
    return false;
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  `;
  document.head.appendChild(script);
  window.window.__addedNameGeneratorJS4392845 = true;

name
  Aaliyah
  Aaron
  Abby
  Abigail
  Abraham
  Adam
  Addison
  Adrian
  Adriana
  Adrianna
  Aidan
  Aiden
  Alan
  Alana
  Alejandro
  Alex
  Alexa
  Alexander
  Alexandra
  Alexandria
  Alexia
  Alexis
  Alicia
  Allison
  Alondra
  Alyssa
  Amanda
  Amber
  Amelia
  Amy
  Ana
  Andrea
  Andres
  Andrew
  Angel
  Angela
  Angelica
  Angelina
  Anna
  Anthony
  Antonio
  Ariana
  Arianna
  Ashley
  Ashlyn
  Ashton
  Aubrey
  Audrey
  Austin
  Autumn
  Ava
  Avery
  Ayden
  Bailey
  Benjamin
  Bianca
  Blake
  Braden
  Bradley
  Brady
  Brandon
  Brayden
  Breanna
  Brendan
  Brian
  Briana
  Brianna
  Brittany
  Brody
  Brooke
  Brooklyn
  Bryan
  Bryce
  Bryson
  Caden
  Caitlin
  Caitlyn
  Caleb
  Cameron
  Camila
  Carlos
  Caroline
  Carson
  Carter
  Cassandra
  Cassidy
  Catherine
  Cesar
  Charles
  Charlotte
  Chase
  Chelsea
  Cheyenne
  Chloe
  Christian
  Christina
  Christopher
  Claire
  Cody
  Colby
  Cole
  Colin
  Collin
  Colton
  Conner
  Connor
  Cooper
  Courtney
  Cristian
  Crystal
  Daisy
  Dakota
  Dalton
  Damian
  Daniel
  Daniela
  Danielle
  David
  Delaney
  Derek
  Destiny
  Devin
  Devon
  Diana
  Diego
  Dominic
  Donovan
  Dylan
  Edgar
  Eduardo
  Edward
  Edwin
  Eli
  Elias
  Elijah
  Elizabeth
  Ella
  Ellie
  Emily
  Emma
  Emmanuel
  Eric
  Erica
  Erick
  Erik
  Erin
  Ethan
  Eva
  Evan
  Evelyn
  Faith
  Fernando
  Francisco
  Gabriel
  Gabriela
  Gabriella
  Gabrielle
  Gage
  Garrett
  Gavin
  Genesis
  George
  Gianna
  Giovanni
  Giselle
  Grace
  Gracie
  Grant
  Gregory
  Hailey
  Haley
  Hannah
  Hayden
  Hector
  Henry
  Hope
  Hunter
  Ian
  Isaac
  Isabel
  Isabella
  Isabelle
  Isaiah
  Ivan
  Jack
  Jackson
  Jacob
  Jacqueline
  Jada
  Jade
  Jaden
  Jake
  Jalen
  James
  Jared
  Jasmin
  Jasmine
  Jason
  Javier
  Jayden
  Jayla
  Jazmin
  Jeffrey
  Jenna
  Jennifer
  Jeremiah
  Jeremy
  Jesse
  Jessica
  Jesus
  Jillian
  Jocelyn
  Joel
  John
  Johnathan
  Jonah
  Jonathan
  Jordan
  Jordyn
  Jorge
  Jose
  Joseph
  Joshua
  Josiah
  Juan
  Julia
  Julian
  Juliana
  Justin
  Kaden
  Kaitlyn
  Kaleb
  Karen
  Karina
  Kate
  Katelyn
  Katherine
  Kathryn
  Katie
  Kayla
  Kaylee
  Kelly
  Kelsey
  Kendall
  Kennedy
  Kenneth
  Kevin
  Kiara
  Kimberly
  Kyle
  Kylee
  Kylie
  Landon
  Laura
  Lauren
  Layla
  Leah
  Leonardo
  Leslie
  Levi
  Liam
  Liliana
  Lillian
  Lilly
  Lily
  Lindsey
  Logan
  Lucas
  Lucy
  Luis
  Luke
  Lydia
  Mackenzie
  Madeline
  Madelyn
  Madison
  Makayla
  Makenzie
  Malachi
  Manuel
  Marco
  Marcus
  Margaret
  Maria
  Mariah
  Mario
  Marissa
  Mark
  Martin
  Mary
  Mason
  Matthew
  Max
  Maxwell
  Maya
  Mckenzie
  Megan
  Melanie
  Melissa
  Mia
  Micah
  Michael
  Michelle
  Miguel
  Mikayla
  Miranda
  Molly
  Morgan
  Mya
  Naomi
  Natalia
  Natalie
  Nathan
  Nathaniel
  Nevaeh
  Nicholas
  Nicolas
  Nicole
  Noah
  Nolan
  Oliver
  Olivia
  Omar
  Oscar
  Owen
  Paige
  Parker
  Patrick
  Paul
  Payton
  Peter
  Peyton
  Preston
  Rachel
  Raymond
  Reagan
  Rebecca
  Ricardo
  Richard
  Riley
  Robert
  Ruby
  Ryan
  Rylee
  Sabrina
  Sadie
  Samantha
  Samuel
  Sara
  Sarah
  Savannah
  Sean
  Sebastian
  Serenity
  Sergio
  Seth
  Shane
  Shawn
  Shelby
  Sierra
  Skylar
  Sofia
  Sophia
  Sophie
  Spencer
  Stephanie
  Stephen
  Steven
  Summer
  Sydney
  Tanner
  Taylor
  Thomas
  Tiffany
  Timothy
  Travis
  Trenton
  Trevor
  Trinity
  Tristan
  Tyler
  Valeria
  Valerie
  Vanessa
  Veronica
  Victor
  Victoria
  Vincent
  Wesley
  William
  Wyatt
  Xavier
  Zachary
  Zoe
  Zoey","imports":["markdown-plugin"],"lastEditTime":1725184753448,"found":true},{"name":"nationality","modelText":"title = Random Nationality Generator
subtitle = Simply generates a random nationality at each click :)
fontSize = 200
fontColor = black
buttonText = randomize
numberOfItems = 1
itemSeperator = <br/>
description
\t{import:simple-gen-footer}
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)

// thanks to: http://www.esldesk.com/vocabulary/countries
$output = [nationality]

nationality
\tAfghan
\tAlbanian
\tAlgerian
\tAndorran
\tAngolan
\tArgentinian
\tArmenian
\tAustralian
\tAustrian
\tAzerbaijani
\tBahamian
\tBangladeshi
\tBarbadian
\tBelorussian
\tBelgian
\tBeninese
\tBhutanese
\tBolivian
\tBosnian
\tBrazilian
\tBritish
\tBruneian
\tBulgarian
\tBurmese
\tBurundian
\tCambodian
\tCameroonian
\tCanadian
\tChadian
\tChilean
\tChinese
\tColombian
\tCongolese
\tCroatian
\tCuban
\tCypriot
\tCzech
\tDanish
\tDominican
\tEcuadorean
\tEgyptian
\tSalvadorean
\tEnglish
\tEritrean
\tEstonian
\tEthiopian
\tFijian
\tFinnish
\tFrench
\tGabonese
\tGambian
\tGeorgian
\tGerman
\tGhanaian
\tGreek
\tGrenadian
\tGuatemalan
\tGuinean
\tGuyanese
\tHaitian
\tDutch
\tHonduran
\tHungarian
\tIcelander
\tIndian
\tIndonesian
\tIranian
\tIraqi
\tIrish
\tIsraeli
\tItalian
\tJamaican
\tJapanese
\tJordanian
\tKazakh
\tKenyan
\tKorean
\tKuwaiti
\tLaotian
\tLatvian
\tLebanese
\tLiberian
\tLibyan
\tLiechtensteiner
\tLithuanian
\tLuxembourger
\tMacedonian
\tMadagascan
\tMalawian
\tMalaysian
\tMaldivian
\tMalian
\tMaltese
\tMauritanian
\tMauritian
\tMexican
\tMoldovan
\tMonacan
\tMongolian
\tMontenegrin
\tMoroccan
\tMozambican
\tNamibian
\tNepalese
\tNicaraguan
\tNigerien
\tNigerian
\tNorwegian
\tPakistani
\tPanamanian
\tParaguayan
\tPeruvian
\tFilipino
\tPolish
\tPortuguese
\tQatari
\tRomanian
\tRussian
\tRwandan
\tSaudi
\tScottish
\tSenegalese
\tSerbian
\tSingaporean
\tSlovakian
\tSlovenian
\tSomali
\tSpanish
\tSriLankan
\tSudanese
\tSurinamese
\tSwazi
\tSwedish
\tSwiss
\tSyrian
\tTaiwanese
\tTadzhik
\tTanzanian
\tThai
\tTogolese
\tTrinidadian
\tTunisian
\tTurkish
\tUgandan
\tUkrainian
\tBritish
\tAmerican
\tUruguayan
\tUzbek
\tVenezuelan
\tVietnamese
\tWelsh
\tYemeni
\tZambian
\tZimbabwean
\t","imports":["simple-gen-footer"],"lastEditTime":1696679298600,"found":true},{"name":"perchance-callouts","modelText":"// Note: Text that comes after "//" is ignored, which allows
// you to write notes - like the one you're reading now!
title
  Perchance Callouts

callout = {import:perchance-callouts}
md = {import:markdown-plugin}

$meta
  title = Perchance Callouts
  description = Obsidian Callout inspired Callouts for your generators!
  // image = https://i.imgur.com/7xvFrP5.png

text
  ## Introduction
  These are HTML and CSS based callouts derived and inspired by the [Obsidian Callouts](https://help.obsidian.md/Editing+and+formatting/Callouts). This uses the `<details>` and `<summary>` HTML tags for collapsibles, and an ordinary `<div>` for the non-collapsible. (**Background Colors** and **Borders** are <mark>***Transparent***</mark>, if you want a solid color refer to the *Styled Callouts* section). 
  \s
  Here is an example of a callout:
  [callout()]
  ## How to Use
  To use the callouts copy and paste the following in your Perchance Code Panel.
  ```
  callout = \{import:perchance-callouts\}
  \s
  exampleNote
    type \= note
    header \= This is an example callout
    data \= This is the text inside the callout
    collapsible
      state \= open
    
  ```
  > Note
  > The options can also be in a Object form (i.e. `\{type: "note", header: "Header", data: "content", collapsible: \{ open: "open" \} \}`)
  \s
  Then at the HTML Code Panel, paste the following.
  ```
  \[callout(exampleNote)\]
  ```
  \s
  And it will output:
  [callout(exampleNote)]
  ## Parameters
  Here are the following descriptions of each paramter for the callouts
  \s
  Parameter | Description | Default | Values
  -|-|-|-
  `type` | This is the callout type, this determines the color and the icon the callout has. Some types are aliases of the others. | `note` | `note`<br>`info`<br> `abstract`,`summary`,`tldr`<br>`todo`<br>`tip`, `hint`, `important`<br>`done`, `check`, `success`, `correct`<br>`faq`, `help`, `question`<br>`warning`, `caution`, `attention`<br>`fail`, `failure`, `missing`, `incorrect`<br>`danger`, `error`<br>`bug`<br>`example`<br>`quote`,`cite`
  `header` | This is the title or header of the callout. | "Callout Header" | Any HTML/String
  `data` | This is the content inside the callout. | "Callout Content" | Any HTML/String
  `collapsible` | This states if the callout is collapsible or not. | `none` | `state` (see below)
  `collapsible: state` | This states the collapsible callout's current state. | `close` | `open`, `close`
  `style` | This is an option to directly change the style of the collapsible, header, and content containers. | `none` | `icon`, `callout`, `header`, `content` (see below)
  `style: icon` | This is an option to change the icon (uses Bootstrap Icons) | `none` | `name`, `style` (see below)
  `icon: name` | This is the icon name (see Bootstrap Icons for icon names) | `none` | Any Bootstrap Icon Name
  `icon: style` | This is the style for the icon | `none` | Any CSS
  `style: callout` | This is the style for the callout's container | `none` | Any CSS 
  `style: header` | This is the style for the header's container | `none` | Any CSS 
  `style: content` | This is the style for the content's container | `none` | Any CSS 
  \s
  ```
  example
    type = ...
    header = ...
    data = ...
    collapsible
      state = ...
    style
      icon
        name = ...
        style = ...
      callout = ...
      header = ...
      content = ...
  \s
  or
  \s
  example = \{ type: ..., header: ..., data: ..., collapsible: \{ state: ... \}, style: \{ icon: \{ name: ..., style: ... \}, callout: ..., header: ..., content: ... \} \}
  ```
  \s
  ## Showcase
  ### Further Examples
  ```
  nonCollapse
    type \= fail
    header \= Non Collapsible
    data \= This callout is non-collapsible.
  \s
  collapse
    type \= done
    header \= Collapsible
    data \= This callout is collapsible and initially open.
    collapsible
      state \= open
  \s
  collapseClose
    type \= warning
    header \= Collapsible Closed Initially
    data \= This callout is collapsible but initially closed.
    collapsible
      state \= close
  ```
  \s
  [callout(nonCollapse)][callout(collapse)][callout(collapseClose)]
  ### All Types
  [callout(exampleNote2)][callout(exampleAbstract)][callout(exampleInfo)][callout(exampleTodo)] [callout(exampleTip)][callout(exampleDone)][callout(exampleFaq)][callout(exampleWarning)][callout(exampleFail)][callout(exampleError)][callout(exampleBug)][callout(exampleExample)][callout(exampleCite)]
  \s
  ### Other HTML inside the callout
  [callout(mdPluginInCallout)]
  \s
  [callout(htmlCallout)]
  \s
  ### Styled Callouts
  ```
  styledCalloutOne
  type = note
  header = Styled Callout One
  data = \[data\]
  collapsible
    state = open
  style
    icon 
      name = peace-fill
      style = font-size: 2rem; color: white;
    callout = background-color: rgb(0,0,0); color: white; border: 0px; border-radius: 0px;
    header = color: cyan; border-radius: 0px; text-shadow: 2px 2px 10px white; font-family: monospace; font-variant: small-caps; font-size: xx-large;
    content = font-family: monospace; color: cyan; border-top: 1px solid white;
    
  \s
  \s
  styledCalloutTwo
    type = danger
    header = Styled Callout Two
    data = \[data\]
    collapsible
      state = open
    style
      icon 
        name = hearts
        style = font-size: 2rem; color: red;
      callout = color: white; border: 0px; border-top-left-radius: 50px;border-top-right-radius: 50px; max-width: 400px; 
      header = font-size: x-large; justify-content:center; width:100%; font-family: decorative; color: red; border: 3px solid pink; border-top-right-radius: 50px; border-top-left-radius: 50px; text-shadow: 2px 2px 20px pink; background-color: white;
      content = font-size: 1.125rem; background-color: rgba(255,220, 220, 0.10) ; font-family: decorative; color: red; width: 100%; margin: 0em auto; border: 3px solid pink; border-top: none;
  \s
  \s
  styledCalloutThree
    type = note
    header = <span style="font-size: medium;">Styled </span><span style="font-size: large;">Callout </span><span style="font-size: x-large;">Three</span>
    data = \[data\]
    style
      icon
        name = badge-vr
        style = font-size: 1.5rem;
      callout = background: none; border: none;
      header = background: none; border: 1px solid blue; color: blue; font-variant: small-caps; 
      content = border: 1px solid blue;border-top: none; color: blue; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px; font-variant: small-caps;
  ```
  [callout(styledCalloutOne)][callout(styledCalloutTwo)][callout(styledCalloutThree)]
  ### Nested Callouts
  ```
  aCallout
    type = note
    header = Another Callout
    data = \[callout(bCallout)\]
    collapsible
      state = open
  \s
  \s
  bCallout
    type = example
    header = The last Callout
    data = This is the last callout
    collapsible
      state = open
  \s
  \s
  \[callout(\{type:"question", header: "Main Callout", data: \[callout(aCallout)\], collapsible:\{ state: "open" \}\})\]

  ```
  [callout(\{type:\"question\", header: \"Main Callout\", data: \[callout(aCallout)\], collapsible: { state: \"open\" }\})] // Needed backslashed since it is in the Markdown parser.
  \s
  ### Random Text in Callouts
  ```
  calloutWithHTML
    type = tip
    header = \[adjective\]
    data = \[generatorInCallout()\]
    collapsible
      state = open
  \s  
  generatorInCallout() \=> /* This returns HTML elements */
    return `
    <div>
      $\{output\} /* Calling the 'output' list */
    </div>
    <br>
    <button onclick\="update(output1)">
      Randomize
    </button> /* This updates 'output1' */
    `;
  \s
  @ HTML
  <div id\="output1">\[callout(calloutWithHTML)\]</div> /* Added 'id' to the div */
  ```
  [callout(ccc)]
  
text2
  ## Notes
  * [Example Generator](https://perchance.org/perchance-callouts-demo) using the callouts.
  * All credits to the designer of callouts in Obsidian.
  * Icons used are Bootstrap Icons, [here](https://icons.getbootstrap.com/) is their website.
  * This is made by **[/u/Vionet20](https://www.reddit.com/user/VioneT20)**, here is a [link to my generators](https://perchance.org/vionet20-gens).

$output(list) =>
  (list == undefined) ? list = {} : list;
  let type = list.type ? list.type : "note";
  
  let header = list.header ? list.header : "Callout Header";
  
  let data = list.data ? list.data == "none" ? '' : list.data : "Callout Content";
  
  let collapsible = list.collapsible ? list.collapsible : "no";
  let state = collapsible != "no" ? list.collapsible.state ? list.collapsible.state : "" : "open";
  
  let iconList = calloutIcons.getChildNames;
  let index;
  iconList.forEach((a,i) => a.split(", ").includes(type) ? index = i : "");
  let iconName = calloutIcons.selectAll[index]
  
  let style = list.style ? list.style : "no";
  let calloutIcon = style != "no" ? list.style.icon ? list.style.icon : "" : "";
  iconName = calloutIcon ? list.style.icon.name ? list.style.icon.name : iconName : iconName;
  let calloutIconStyle = calloutIcon ?  list.style.icon.style ? list.style.icon.style : "" : "";
  let calloutStyle = style != "no" ? list.style.callout ? list.style.callout : "" : "";
  let calloutHeaderStyle = style != "no" ? list.style.header ? list.style.header : "" : "";
  let calloutContentStyle = style != "no" ? list.style.content ? list.style.content : "" : "";


  

  if(!window.__alreadyAddedCalloutsCSS12mskaf) {
    let style = document.createElement('style'); 
    style.type = 'text/css';
    style.innerHTML = getCalloutCSS();
    document.head.appendChild(style);
    window.__alreadyAddedCalloutsCSS12mskaf = true;
  }

  let html = ``;
  if(collapsible != "no") {
    html += `
    <details class="callout" data-callout="${type}" ${state} style="${calloutStyle}">
      <summary class="callout-title" style="${calloutHeaderStyle}">
        <div class="callout-icon">
          <i class="bi-${iconName}" style="${calloutIconStyle}"></i>
        </div>
        <div class="callout-header">
          ${header}
        </div>
      </summary>
      ${data == "none" ? ``: `<div class="callout-content" style="${calloutContentStyle}">${data}</div>`}
    </details>
    `;
  } else {
    html += `
    <div class="callout" data-callout="${type}" ${state} style="${calloutStyle}">
      <summary class="callout-title" style="${calloutHeaderStyle}">
        <div class="callout-icon">
          <i class="bi-${iconName}" style="${calloutIconStyle}"></i>
        </div>
        <div class="callout-header">
          ${header}
        </div>
      </summary>
      ${data == '' ? ``: `<div class="callout-content" style="${calloutContentStyle}">${data}</div>`}
    </div>
    `;
  }
  return html;

getCalloutCSS() => 
  return `
  @import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css");
  :root {
    interpolate-size: allow-keywords;
  }
  body {
    --color-gray-rgb: 128, 128, 128;
    --color-red-rgb: 233, 49, 71;
    --color-orange-rgb: 236, 117, 0;
    --color-yellow-rgb: 224, 172, 0;
    --color-green-rgb: 8, 185, 78;
    --color-cyan-rgb: 0, 191, 188;
    --color-blue-rgb: 8, 109, 221;
    --color-purple-rgb: 120, 82, 238;
    --color-pink-rgb: 213, 57, 132;
  }
  
  .callout {
    max-width: 700px;
    margin: 1em auto;
    border: 2px solid var(--callout-color-border);
    border-radius: 10px;
    overflow: hidden;
  }
  
  .callout > * {
    padding: 1rem;
  }

  .callout > .callout-title {
    list-style: none;
    // font-family: 'Noto Sans', sans-serif;
  }
  .callout-title::-webkit-details-marker {
    display: none;
  }

  .callout-title:after {
    content: "►";
    font-family: sans-serif;
    font-size: medium !important;
    margin-left: 10px;
    transform: rotate(0deg);
    transition: 0.15s transform ease-in-out;
  }
  
  .callout[open] > .callout-title::after {
    transform: rotate(90deg);
  }
  

  .callout > .callout-title {
    display: flex;
    font-size: medium;
    // font-weight: bold;
    align-items: center;
    color: var(--callout-color);
    background-color: var(--callout-color-bg);
    cursor: pointer;
    text-align: left;
    transition: 0.25s background-color ease-out;
    border-top-right-radius: 8px;
    border-top-left-radius: 8px;
    border-bottom: 0px solid var(--callout-color-border);
    border-bottom-right-radius: 8px;
    border-bottom-left-radius: 8px;
  }
  div.callout > .callout-title {
    cursor: default;
  }
  div.callout > .callout-title:after {
    content: "";
  }
  
  // .callout > .callout-title:hover {
  //   background-color: var(--callout-color-border);
  // }
  
  .callout[open] > .callout-title {
    border-bottom-right-radius: 0px;
    border-bottom-left-radius: 0px;
    border-bottom: 2px solid var(--callout-color-border);
  }

  
  // .callout-header {
  //   font-size: medium;
  //   font-weight: bold;
  // }

  .callout-title > .callout-icon {
    // font-size: medium;
    font-weight: 800;
    margin-right: 10px;
  }

  .callout > .callout-content {
    text-align: left;
    // border: 1px solid var(--callout-color-border);
  }
  .callout::details-content {
    block-size: 0;
    transition: all .2s;
    transition-behavior: allow-discrete;
  }
  .callout[open]::details-content {
    block-size: auto;
  }
  
  

  .callout[data-callout="note"] {
    --callout-color: rgba(var(--color-blue-rgb), 1);
    --callout-color-bg: rgba(var(--color-blue-rgb), 0.1);
    --callout-color-border: rgba(var(--color-blue-rgb), 0.25);
  }

  .callout[data-callout="abstract"],
  .callout[data-callout="summary"],
  .callout[data-callout="tldr"] {
    --callout-color: rgba(var(--color-cyan-rgb), 1);
    --callout-color-bg: rgba(var(--color-cyan-rgb), 0.1);
    --callout-color-border: rgba(var(--color-cyan-rgb), 0.25);
  }

  .callout[data-callout="info"] {
    --callout-color: rgba(var(--color-blue-rgb), 1);
    --callout-color-bg: rgba(var(--color-blue-rgb), 0.1);
    --callout-color-border: rgba(var(--color-blue-rgb), 0.25);
  }

  .callout[data-callout="todo"] {
    --callout-color: rgba(var(--color-blue-rgb), 1);
    --callout-color-bg: rgba(var(--color-blue-rgb), 0.1);
    --callout-color-border: rgba(var(--color-blue-rgb), 0.25);
  }

  .callout[data-callout="important"],
  .callout[data-callout="tip"],
  .callout[data-callout="hint"] {
    --callout-color: rgba(var(--color-cyan-rgb), 1);
    --callout-color-bg: rgba(var(--color-cyan-rgb), 0.1);
    --callout-color-border: rgba(var(--color-cyan-rgb), 0.25);
  }

  .callout[data-callout="success"],
  .callout[data-callout="check"],
  .callout[data-callout="done"],
  .callout[data-callout="correct"] {
    --callout-color: rgba(var(--color-green-rgb), 1);
    --callout-color-bg: rgba(var(--color-green-rgb), 0.1);
    --callout-color-border: rgba(var(--color-green-rgb), 0.25);
  }

  .callout[data-callout="question"],
  .callout[data-callout="help"],
  .callout[data-callout="faq"] {
    --callout-color: rgba(var(--color-yellow-rgb), 1);
    --callout-color-bg: rgba(var(--color-yellow-rgb), 0.1);
    --callout-color-border: rgba(var(--color-yellow-rgb), 0.25);
  }

  .callout[data-callout="warning"],
  .callout[data-callout="caution"],
  .callout[data-callout="attention"] {
    --callout-color: rgba(var(--color-orange-rgb), 1);
    --callout-color-bg: rgba(var(--color-orange-rgb), 0.1);
    --callout-color-border: rgba(var(--color-orange-rgb), 0.25);
  }

  .callout[data-callout="failure"],
  .callout[data-callout="fail"],
  .callout[data-callout="incorrect"], 
  .callout[data-callout="missing"] {
    --callout-color: rgba(var(--color-red-rgb), 1);
    --callout-color-bg: rgba(var(--color-red-rgb), 0.1);
    --callout-color-border: rgba(var(--color-red-rgb), 0.25);
  }

  .callout[data-callout="danger"],
  .callout[data-callout="error"] {
    --callout-color: rgba(var(--color-red-rgb), 1);
    --callout-color-bg: rgba(var(--color-red-rgb), 0.1);
    --callout-color-border: rgba(var(--color-red-rgb), 0.25);
  }

  .callout[data-callout="bug"] {
    --callout-color: rgba(var(--color-red-rgb), 1);
    --callout-color-bg: rgba(var(--color-red-rgb), 0.1);
    --callout-color-border: rgba(var(--color-red-rgb), 0.25);
  }

  .callout[data-callout="example"] {
    --callout-color: rgba(var(--color-purple-rgb), 1);
    --callout-color-bg: rgba(var(--color-purple-rgb), 0.1);
    --callout-color-border: rgba(var(--color-purple-rgb), 0.25);
  }

  .callout[data-callout="quote"],
  .callout[data-callout="cite"] {
    --callout-color: rgba(var(--color-gray-rgb), 1);
    --callout-color-bg: rgba(var(--color-gray-rgb), 0.1);
    --callout-color-border: rgba(var(--color-gray-rgb), 0.25);
  }`;

calloutIcons
  note
    pencil
  abstract, summary, tldr
    card-text
  info
    info-circle
  todo
    check2-square
  tip, hint, important
    fire
  success, check, done, correct
    check-lg
  question, help, faq
    question-circle
  warning, caution, attention
    exclamation-triangle
  failure, fail, missing, incorrect
    x-lg
  danger, error
    lightning-charge
  bug
    bug
  example
    list-ul
  quote, cite
    quote

data
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut sit amet quam faucibus, aliquam urna pulvinar, pharetra lorem. Mauris egestas aliquam lacus, sed iaculis lacus. Suspendisse sodales sagittis nunc, vitae varius leo lacinia quis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Maecenas feugiat nulla in dolor vulputate tincidunt. Curabitur convallis sodales magna. Donec interdum, odio sit amet rhoncus interdum, velit augue porta quam, vel mollis nisi arcu vel neque. Fusce quis placerat lacus, eget cursus lacus. Aenean eu lectus vitae dolor imperdiet imperdiet. Nunc nisl justo, malesuada in arcu non, maximus scelerisque magna. Curabitur.

styledCalloutOne
  type = note
  header = Styled Callout One
  data = [data]
  collapsible
    state = open
  style
    icon 
      name = peace-fill
      style = font-size: 2rem; color: white;
    callout = background-color: rgb(0,0,0); color: white; border: 0px; border-radius: 0px;
    header = color: cyan; border-radius: 0px; text-shadow: 2px 2px 10px white; font-family: monospace; font-variant: small-caps; font-size: xx-large;
    content = font-family: monospace; color: cyan; border-top: 1px solid white;
    

styledCalloutTwo
  type = danger
  header = Styled Callout Two
  data = [data]
  collapsible
    state = open
  style
    icon 
      name = hearts
      style = font-size: 2rem; color: red;
    callout = color: white; border: 0px; border-top-left-radius: 50px;border-top-right-radius: 50px; max-width: 400px; 
    header = font-size: x-large; justify-content:center; width: 100%; font-family: decorative; color: red; border: 3px solid pink; border-top-right-radius: 50px; border-top-left-radius: 50px; text-shadow: 2px 2px 20px pink; background-color: white;
    content = font-size: 1.125rem; background-color: rgba(255,220, 220, 0.10) ; font-family: decorative; color: red; width: 100%; margin: 0em auto; border: 3px solid pink; border-top: none;

styledCalloutThree
  type = note
  header = <span style="font-size: medium;">Styled </span><span style="font-size: large;">Callout </span><span style="font-size: x-large;">Three</span>
  data = [data]
  style
    icon
      name = badge-vr
      style = font-size: 1.5rem;
    callout = background: none; border: none;
    header = background: none; border: 1px solid blue; color: blue; font-variant: small-caps; 
    content = border: 1px solid blue;border-top: none; color: blue; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px; font-variant: small-caps;

nonCollapse
  type = fail
  header = Non Collapsible
  data = This callout is non-collapsible.

collapse
  type = done
  header = Collapsible
  data = This callout is collapsible and initially open.
  collapsible
    state = open

collapseClose
  type = warning
  header = Collapsible Closed Initially
  data = This callout is collapsible but initially closed.
  collapsible

ccc
  type = info
  header = Creating HTML
  data = Creating HTML with return functions <code>function() \=> return `html here`;</code> is much better since using the multiline string, or using backticks <code>``</code>, or also called as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank">Template Literals</a> you can create a template for your HTML.

calloutWithHTML
  type = tip
  header = [adjective]
  data = [generatorInCallout()]
  collapsible
    state = open

generatorInCallout() =>
  return `
  <div>
    ${output}
  </div>
  <br>
  <button onclick="update(output1)">
    Randomize
  </button>
  `;

aCallout
  type = note
  header = Another Callout
  data = [callout(bCallout)]
  collapsible
    state = open

bCallout
  type = example
  header = The last Callout
  data = This is the last callout
  collapsible
    state = open

htmlCallout
  type = success
  header = HTML in Callout
  data = [htmlInCallout()]


htmlInCallout() =>
  return `
  <h1>HTML Cheat Sheet</h1>
  <body>
  <hr />
  <!-- Headings -->
  <h1>Heading One</h1>
  <h2>Heading Two</h2>
  <h3>Heading Three</h3>
  <h4>Heading Four</h4>
  <h5>Heading Five</h5>
  <h6>Heading Six</h6>

  <!-- Paragraph -->
  <p>
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Excepturi
    <strong>doloremque illo nostrum, aperiam commodi debitis molestiae </strong
    >reiciendis, exercitationem beatae obcaecati
    <em>atque quasi dolorem minus </em>vero adipisci suscipit aspernatur ipsa
    laborum.
  </p>
  <p>
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Excepturi
    doloremque
    <a href="https://www.youtube.com/" target="_blank"
      >illo nostrum, aperiam commodi debitis molestiae </a
    >reiciendis, exercitationem beatae obcaecati atque quasi dolorem minus vero
    adipisci suscipit aspernatur ipsa laborum.
  </p>

  <!-- Lists -->
  <ul>
    <li>List Item 1</li>
    <li>List Item 2</li>
    <li>List Item 3</li>
    <li>List Item 4</li>
  </ul>

  <ol>
    <li>List Item 1</li>
    <li>List Item 2</li>
    <li>List Item 3</li>
    <li>List Item 4</li>
  </ol>

  <!-- Table -->
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>E-mail</th>
        <th>Age</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Jacob Weber</td>
        <td>jacob.weber@stu.boone.kyschools.us</td>
        <td>13</td>
      </tr>
      <tr>
        <td>John Doe</td>
        <td>jdoe@something.com</td>
        <td>45</td>
      </tr>
      <tr>
        <td>Sara Williams</td>
        <td>sara@something.com</td>
        <td>25</td>
      </tr>
    </tbody>
  </table>

  <br />
  <hr />
  <br />

  <!-- Forms-->
  <form action="process.php" method="POST">
    <div>
      <label>First Name</label>
      <input type="text" name="firstName" placeholder="Enter first name" />
    </div>
    <br />
    <div>
      <label>Last Name</label>
      <input type="text" name="lastName" />
    </div>
    <br />
    <div>
      <label>Email</label>
      <input type="email" name="email" />
    </div>
    <br />
    <div>
      <label>Message</label>
      <textarea name="message"></textarea>
    </div>
    <br />
    <div>
      <label>Gender</label>
      <select name="gender">
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
      </select>
    </div>
    <br />
    <div>
      <label>Age:</label>
      <input type="number" name="age" value="13" />
    </div>
    <br />
    <div>
      <label>Birthday:</label>
      <input type="date" name="birthday" />
    </div>
    <br />
    <input type="submit" name="submit" value="Submit" />
  </form>

  <!-- Button -->
  <button>Click Me!!</button>

  <!-- Image -->
  <img src="download.jpeg" alt="" />

  <div style="margin-top: 100px"></div>
  `;


exampleNote
  type = note
  header = This is an example callout
  data = This is the text inside the callout
  collapsible
    state = open
  
exampleNote2
  type = note
  header = Callout ( type = note )
  data = [data]
  collapsible
    state = close

exampleAbstract
  type = abstract
  header = Callout ( type = abstract, summary, tldr )
  data = [data]
  collapsible
    state = close

exampleInfo
  type = info
  header = Callout ( type = info )
  data = [data]
  collapsible
    state = close

exampleTodo
  type = todo
  header = Callout ( type = todo )
  data = [data]
  collapsible
    state = close
  
exampleTip
  type = tip
  header = Callout ( type = tip, hint, important )
  data = [data]
  collapsible
    state = close

exampleDone
  type = correct
  header = Callout ( type = done, check, success, correct )
  data = [data]
  collapsible
    state = close
  
exampleFaq
  type = faq
  header = Callout ( type = faq, help, question )
  data = [data]
  collapsible
    state = close
  
exampleWarning
  type = warning
  header = Callout ( type = warning, caution, attention )
  data = [data]
  collapsible
    state = close

exampleFail
  type = incorrect
  header = Callout ( type = fail, failure, missing, incorrect )
  data = [data]
  collapsible
    state = close

exampleError
  type = error
  header = Callout ( type = danger, error )
  data = [data]
  collapsible
    state = close

exampleBug
  type = bug
  header = Callout ( type = bug )
  data = [data]
  collapsible
    state = close
  
exampleExample
  type = example
  header = Callout ( type = example )
  data = [data]
  collapsible
    state = close
  
exampleCite
  type = cite
  header = Callout ( type = quote, cite )
  data = [data]
  collapsible
    state = close

mdPluginInCallout
  type = tip
  header = <code>markdown-plugin</code> in Callout
  data = [md(Testtext)]


Testtext
  # My title
  The first line of my first paragraph.
  Second line of first paragraph.
  \s // <-- paragraph break
  You can *italicize* or **bold** your text easily.
  
  ## Sub-header
  Here's a list of items:
    * Bullet point 1
    * Bullet point 2
    * Bullet point 3
      * Sub-bullet-point
    * Bullet point 4
  \s  // <-- end lists like this too
  And we can do numbered lists too:
    1. First item
    2. Second item
    3. ~~Scratch this~~
  \s
  Adding a [link](https://dillinger.io) is easy with markdown.
  Images are easy too:
  \s
  ![image hover text](https://web.archive.org/web/20091018220201/http://www.geocities.com/roqofages/Rainbowflagwaving.gif)
  \s
  And you can still put HTML code in if needed:
  \s
  <video controls src\="https://i.imgur.com/26DZgXM.mp4"></a>
  ```
  You can do code-blcks like this.
  Second line of code.
    Third line of code (indented)
  ```
  > And quoted text like this. Quotes automatically wrap: foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar.
  \s
  > Break quotes up into paragraphs using the \s trick.
  \s
  Header  | Header
  --------|---------
  You     | Can
  Make    | Neat
  Little  | Tables
  Too     | !
  \s
  So that's a brief intro to some of markdown's basic features!

output
  {This|That} [animal] is so [adjective]!
  I wish I could [verb] that [animal].
  Aren't [animal.pluralForm] just so [adjective]?
  There must be at least {1-10} [animal]{s} [location]!
  THE [animal.upperCase]! It's eating the {import:common-noun}!
  {A} [animal] is a bit like {a} {import:common-noun}. // {A} and {a} will automatically choose "a" and "an" as appropriate

animal
  pig
  cow
  chicken
  zebra
  crayfish
  jellyfish^0.5  // this item is HALF as likely as the others
  worm^2         // this item is TWICE as likely as the others
  
adjective
  small
  big
  cute
  sneaky
  unusual
  helpful
  mean
  
verb
  pat
  befriend
  help
  
location
  on {the|this|that} island
  in {the|this|that} valley
  {around|in} here
  over there
  under this {thing^2|thingie}

// Tips:
//  - Highlight multiple lines and press Tab or Shift+Tab to indent and un-indent them all an once
//  - You can change the URL of your generator by clicking the "settings" button in the top-right
//  - Use this template if you want your generator to be vertically centered on the page:  perchance.org/centered-minimal#edit
//  - Add background images, fonts, and other stuff with plugins: perchance.org/plugins
//  - Here are some templates that you can use to create nice-looking generators without learning HTML and CSS:  perchance.org/templates
//  - Use the "layout maker" plugin to create complex layouts without learning how to code:  perchance.org/layout-maker-plugin
//  - Here are some generators you might like to import:  perchance.org/useful-generators
//  - Read this page after reading the tutorial:  perchance.org/examples
//  - There's a "wrap" button in the top-right if your lines are really long. If you add   $output=[this.joinItems(" ")]   as the first item in your list, then writing [yourListName] will magically output all of the items joined together, rather than a random item from the "yourListName" list.
//  - Ask our friendly community members if you need help:  reddit.com/r/perchance
// \( ﾟヮﾟ)/




","imports":["common-noun","markdown-plugin"],"lastEditTime":1732758356185,"found":true},{"name":"remember-plugin","modelText":"$output(callerRoot, command) =>
  if(!callerRoot || !command) return "(error: you didn't input root and/or variable names to the remember plugin)";
  
  // To prevent conflict with other generators (EDIT: not actually needed anymore now that each generator has its own subdomain, but need to keep it the same else they'll lose their data)
  let prefix = generatorName+"__rememberPlugin__variable__"; 
  
  if(command === "@forget") {
  
  
    clearInterval(window.__rememberPluginSaveInterval7645665);
    for(let key in localStorage) {
      // if(key.startsWith(prefix)) delete localStorage[key];
      if(key.startsWith(prefix)) localStorage.removeItem(key);
    }
    window.location.reload();
    return;
    
    
  } else {
  
  
    let variables = command.split(",").map(v => v.trim());
    
    // Deal with the @input option stuff:
    if(variables.includes("@inputs")) {
      variables = variables.filter(v => v !== "@inputs");
  
      if(!window.___alreadyAddedRememberUserInputsHandler23942397) {
        window.___alreadyAddedRememberUserInputsHandler23942397 = true;
        
        // We need to set a timeout because otherwise these triggers can cause the handlers to run in the middle of the
        // initial page update(), which messes with stuff, because the handlers can themselves call update(). You
        // should think of it like we're just emulating what the user would do if they themselves remembered the
        // data and manually entered it in after the page load.
        // Note that this is for input fields only - the variables are loaded instantly (see the code closer to the bottom of this function)
        setTimeout(() => {
        
          let els = document.querySelectorAll('input, select, textarea');

          // load data from localStorage into input forms:
          for(let el of els) {
            let data = localStorage.getItem( prefix + "_input_forms_" + getCssPath(el) );
            
            // Note that we also need to trigger change and input events in case the person using this plugin has input/change handlers on their inputs,
            // like <input oninput="..."> or <select onchange="...">.
            // Remember, we're really just trying to "emulate" the user changing typing/selecting the inputs after loading the page.
            
            if(data) {
              if(el.type === "checkbox") {
                el.checked = data==="false" ? false : true;
                triggerEvent(el, "change");
                triggerEvent(el, "input");
              } else if(el.type === "radio") {
                el.checked = data==="false" ? false : true;
                if(el.checked) { // only the "clicked" radio button in a group of radio buttons has its oninput and onchange fired, even though the state of one of the others (which was the previously selected one) does actually change (from true to false)
                  triggerEvent(el, "change");
                  triggerEvent(el, "input");
                }
              } else {
                el.value = data;
                triggerEvent(el, "change");
                triggerEvent(el, "input");
              }
            }
          }

          // attach listeners so that when user changes input values, the text gets saved to localstorage
          // we do this a little while after loading the data so it doesn't get unnecessarily run due to the above triggers
          setTimeout(() => {
            function handler() {
              // let key = prefix + "_input_forms_" + getCssPath(this);
              // let value = (this.type=="checkbox" || this.type=="radio") ? this.checked : this.value;
              // localStorage.setItem(key, value);
              if (this.type == "checkbox") { // If a checkbox, set the localStorage based on the item's current state.
                localStorage.setItem( prefix + "_input_forms_" + getCssPath(this), this.checked);
              } else if (this.type == "radio") { // If a radio, set the get the group of the item and set their states accordingly - i.e. set the checked radio to true, and others in the group false.
                let group = document.querySelectorAll(`input[type='radio'][name='${this.name}']`);
                group.forEach(a => localStorage.setItem( prefix + "_input_forms_" + getCssPath(a), a.checked));
              } else { // Else, save the value from the input
                localStorage.setItem( prefix + "_input_forms_" + getCssPath(this), this.value);
              }
            }
            for(let el of els) {
              el.addEventListener('input', handler);
              el.addEventListener('change', handler);
            }
          }, 400);
        
        }, 200);

      }
      
    }
    
    // Periodically save variables to localStorage:
    clearInterval(window.__rememberPluginSaveInterval7645665);
    window.__rememberPluginSaveInterval7645665 = setInterval(() => {
      for(let v of variables) {
        if(callerRoot[v] !== undefined) {
          let value = callerRoot[v];
          if(Array.isArray(value.getPropertyNames) && value.getLength !== undefined) value = `[ERROR: Looks like you're trying to save a Perchance list called "${v}" using the remember-plugin? Currently this plugin only supports remembering variables.]`; // the brackets are just a hacky way to trigger the red error box and show this text. 
          // if(Array.isArray(value.getPropertyNames) && value.getLength !== undefined) { // hackily detect if it's a Perchance node
          //   // if it's all properties, then save it as JSON, otherwise toString it (we can't persist a perchance list/node).
          //   if(value.getPropertyNames.length > 0 && value.getLength === 0) {
          //     let newValue = {};
          //     for(let name of value.getPropertyNames) {
          //       newValue[name] = value[name];
          //     }
          //     value = newValue;
          //   } else {
          //     value = value.toString(); // it's a node/list, so we need to toString it to persist it (otherwise JSON.stringify will give us "[object Object]"
          //   }
          // }
          localStorage[prefix+v] = JSON.stringify(value);
        } else if(window[v] !== undefined) {
          let value = window[v];
          if(Array.isArray(value.getPropertyNames) && value.getLength !== undefined) value = `[ERROR: Looks like you're trying to save a Perchance list called "${v}" using the remember-plugin? Currently this plugin only supports remembering variables.]`; // the brackets are just a hacky way to trigger the red error box and show this text. 
          localStorage[prefix+v] = JSON.stringify(value);
        } else {
          delete localStorage[prefix+v];
        }
      }
    }, 500);
    // Load variables:
    if(!window.__rememberPluginAlreadyLoadedVariables34394539) {
      for(let v of variables) {
        if(localStorage[prefix+v] !== undefined) {
          callerRoot[v] = JSON.parse(localStorage[prefix+v]);
        }
      }
      window.__rememberPluginAlreadyLoadedVariables34394539 = true;
    }
    
    
  }
  
  return "";
  


triggerEvent(el, type) =>
  if (document.createEvent) {
    let event = document.createEvent("HTMLEvents");
    event.initEvent(type, true, true);
    el.dispatchEvent(event);
  } else {
    let event = document.createEventObject();
    el.fireEvent('on' + type, event);
  }


getCssPath(el) =>
  if(!(el instanceof Element)) {
    return;
  }
  let path = [];
  while(el.nodeType === Node.ELEMENT_NODE) {
    let selector = el.nodeName.toLowerCase();
    if(el.id) {
      selector += '#' + el.id;
      path.unshift(selector);
      break;
    } else {
      let sib = el, nth = 1;
      while(sib = sib.previousElementSibling) {
        if (sib.nodeName.toLowerCase() == selector) {
          nth++;
        }
      }
      if(nth != 1) {
        selector += ":nth-of-type("+nth+")";
      }
    }
    path.unshift(selector);
    el = el.parentNode;
  }
  return path.join(" > ");
","imports":[],"lastEditTime":1700453573480,"found":true},{"name":"seeder-plugin","modelText":"// We need the forceUpdate because this function gets run at every update()
// and so we only update the seed when it changes, but sometimes we want to
// reset the seed: https://www.reddit.com/r/perchance/comments/9hc77w/is_there_a_way_to_use_copy_and_pasteable_random/e6cmz6k
$output(s, ...commands) =>
  // since the `commands` argument was originally called forceUpdate (a boolean):
  commands = commands.map(c => (c === true || c === "true") ? "forceUpdate" : c);
  commands = new Set(commands);
  
  // remember, forceUpdate and cache are NOT mutually exclusive (the combination of the two tells us to update the cache with a new function)
  
  // save the Math.random function so we can use it later if needed:
  if(window.__haveSavedMathRandomFunction87245847 === undefined) {
\t  window.__originalMathRandomFunction236235 = Math.random;
\t\twindow.__haveSavedMathRandomFunction87245847 = true;
\t}
  let originalMathRandomFunction = window.__originalMathRandomFunction236235;
  // setup the seed cache:
  if(!window.__seederPluginRandomFunctionCache2395638) {
    window.__seederPluginRandomFunctionCache2395638 = {};
  }
  let randomFunctionCache = window.__seederPluginRandomFunctionCache2395638; // seed string --> cached random function (used if they specify the "cache" command when changing/creating a seed
  let existingSeed = window.__seededRandomNumberPluginSeed7853856;
  
  
  

  
  // empty seed string is a special value that means we should use the actual Math.random function (i.e. no seed)
  if(s === undefined || s === "") {
\t  Math.random = originalMathRandomFunction;
    window.__seededRandomNumberPluginSeed7853856 = s;
    
\t} else if(existingSeed !== s || (existingSeed === s && commands.has("forceUpdate"))) {
    let newRand;
    if(commands.has("cache") && !commands.has("forceUpdate")) {
      newRand = randomFunctionCache[s] || random(s);
    } else {
      newRand = random(s);
    }
    
\t  Math.random = newRand;
\t  window.__seededRandomNumberPluginSeed7853856 = s;
    
    if(commands.has("cache")) randomFunctionCache[s] = newRand;
\t}
\t
\tfunction random(seedStr) {
\t\t// https://stackoverflow.com/a/47593316/993683
\t\tfunction xfnv1a(k) {
\t\t\tfor(var i = 0, h = 2166136261 >>> 0; i < k.length; i++) {
\t\t\t  h = Math.imul(h ^ k.charCodeAt(i), 16777619);
\t\t\t}
\t\t\treturn function() {
\t\t\t\th += h << 13; h ^= h >>> 7;
\t\t\t\th += h << 3;  h ^= h >>> 17;
\t\t\t\treturn (h += h << 5) >>> 0;
\t\t\t}
\t\t}
\t\tlet seed = xfnv1a(seedStr);
\t\tlet a = seed();
\t\tconsole.log("Changed seed:", s);
\t\treturn function() {
\t\t\tlet t = a += 0x6D2B79F5;
\t\t\tt = Math.imul(t ^ t >>> 15, t | 1);
\t\t\tt ^= t + Math.imul(t ^ t >>> 7, t | 61);
\t\t\treturn ((t ^ t >>> 14) >>> 0) / 4294967296; // seeder(asfs, "cache")
\t\t}
\t}
  
  Math.random.toString = function() { return ""; } // make it to it stringifies to nothing so they don't need `, ""`
  return Math.random; // return the current Math.random function
  
  
  
  ","imports":[],"lastEditTime":1692528813906,"found":true},{"name":"text-to-image-plugin","modelText":"
// NOTE TO SELF: If you add more properties, make sure you add to the regex below, and the variable declarations in each 'branch'

$output(data) =>
  if(data === undefined) return "(Error: you've input an empty value/variable into the text-to-image-plugin)";
  // if(options === undefined) options = {};
  
  let serverOrigin = "https://image-generation.perchance.org";
  
  let evaluatedInputs;
  
  // This is used for the heart-button gallery. It's a bit hacky, but most often devs will want the "open gallery" button to show a gallery with e.g. the same moderation options as the gallery that they've displayed on the page, if any.
  window.lastUsedTextToImagePluginGalleryIframeUrl = null;
  
  let shouldRemoveIframeOnFinish = false; // for the case where the iframe was added automatically - i.e. when called like:  `let result = await image({prompt:"a cute mouse"})`

  ////////////////////////////////////////////////
  //       set up handler for gallery           //
  ////////////////////////////////////////////////

  if(!window.___addedTextToImagePluginFirstTimeCode98420274) {
    window.addEventListener("message", function(e) {
      let origin = e.origin || e.originalEvent.origin; // For Chrome, the origin property is in the event.originalEvent object.
      if(origin !== serverOrigin) {
        return;
      }
      if(e.data.openGallerySignal) {
        let ctn = document.createElement("div");
        let subChannelName = e.data.subChannelName;
        let url;
        if(window.lastUsedTextToImagePluginGalleryIframeUrl) {
          url = new URL(window.lastUsedTextToImagePluginGalleryIframeUrl);
          url.searchParams.set("subChannelName", subChannelName);
          url = url.href;
        } else {
          url = `${serverOrigin}/gallery?channel=${window.generatorName}&subChannel=${encodeURIComponent(subChannelName)}&sort=trending&timeRange=1-month&contentFilter=pg13`;
        }
        let backgroundColor = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? "#242424" : "white";
        ctn.innerHTML = `<div onclick="this.remove()" style="backdrop-filter:brightness(0.3);position:fixed;top:0;left:0;right:0;bottom:0;z-index:999;"><div style="position:fixed;top:5vh;bottom:5vh;left:5vh;right:5vh;background:${backgroundColor};border-radius:3px;"><iframe src="${url}" style="border:0;width:100%;height:100%;"></iframe></div></div>`;
        document.body.appendChild(ctn.firstElementChild);
      }
      if(e.data.savedImageToGallerySignal) {
        document.querySelectorAll(".text-to-image-plugin-gallery").forEach(el => {
          let targetOrigin = serverOrigin;
          el.contentWindow.postMessage({doRefreshIfSortingByRecent:true}, targetOrigin);
          
          // the code below is commented out because it doesn't work for the case where the user has switched the sort to recent (since, counter-intuitively, iframe's window.location can change, while iframe.src stays as the original value - I'm assuming this is due to cross-origin security stuff)
          // if(el.src.includes("sort=recent")) {
          //   // refresh galleries that are sorted by recent if the user makes a submission
          //   let url = new URL(el.src);
          //   url.searchParams.set("cacheBust", Math.random().toString());
          //   el.src = ""; // we do this instead of el.src=el.src because that doesn't work if the URL has a hash in it, and I might need to add data in the hash later
          //   setTimeout(() =>el.src=url.href, 700); // we need to wait a bit for the iframe to actually initiate a reload/refresh before setting the src again
          // }
        });
      }
      if(e.data.documentHeightChanged) {
        document.querySelectorAll(".text-to-image-plugin-gallery").forEach(el => {
          if(el.dataset.adaptiveHeight === "yes") {
            el.style.height = (e.data.newHeight+1)+"px";
            console.debug("Updated gallery height", e.data.newHeight);
          }
        });
      }
    });
    window.___addedTextToImagePluginFirstTimeCode98420274 = true;
  }
  
  if(data.gallery) {
    // NOTE: this is a somewhat 'breaking' change, but I'm no longer allowing unfiltered content to be shown by default.
    // The user must specifically choose to switch the gallery to unfiltered mode.
    data.contentFilter = "pg13";
  
    let sort = data.sort ? data.sort.evaluateItem : "recent";
    if(sort === "best") sort = "top"; // alias
    
    let contentFilter = data.contentFilter ? data.contentFilter.evaluateItem.toLowerCase() : "pg13";
    if(contentFilter === "pg-13") contentFilter = "pg13";
    
    let bannedUsers = data.bannedUsers ? data.bannedUsers.selectAll.map(item => item.toString()) : [];
    let bannedPromptPhrases = data.bannedPromptPhrases ? data.bannedPromptPhrases.selectAll.map(item => item.getRawListText.replace("/\\^", "/^")) : [];
    let bannedNegativePromptPhrases = data.bannedNegativePromptPhrases ? data.bannedNegativePromptPhrases.selectAll.map(item => item.getRawListText.replace("/\\^", "/^")) : [];
    
    let timeRange = data.timeRange ? data.timeRange.evaluateItem : (sort === "recent" ? "all-time" : "1-month");
    let hideIfScoreIsBelow = data.hideIfScoreIsBelow !== undefined ? Number(data.hideIfScoreIsBelow.evaluateItem) : -1000000000;
    if(isNaN(hideIfScoreIsBelow)) hideIfScoreIsBelow = -1000000000;
    
    let galleryOptions = {sort, timeRange, hideIfScoreIsBelow, contentFilter, subChannel:"public"}; // this is also used for checking if gallery options have been udpated (see below)
    if(data.forceColorScheme) galleryOptions.forceColorScheme = data.forceColorScheme;
    
    let hashData = {bannedUsers, bannedPromptPhrases, bannedNegativePromptPhrases, injectedStyles:{}};
    if(data.style) {
      let style = data.style.evaluateItem.trim();
      if(style.includes("background:")) {
        hashData.injectedStyles.background = (style.match(/(?:^|;) *background:(.+?)(?:;|$)/) || [])[1];
      } else if(style.includes("background-color:")) {
        hashData.injectedStyles.background = (style.match(/(?:^|;) *background-color:(.+?)(?:;|$)/) || [])[1];
      }
    }
    
    let otherUrlParams = {channel:window.generatorName};
    let iframeUrl = new URL(`${serverOrigin}/gallery`);
    Object.entries(galleryOptions).forEach(([key, value]) => iframeUrl.searchParams.set(key, value));
    Object.entries(otherUrlParams).forEach(([key, value]) => iframeUrl.searchParams.set(key, value));
    
    
    function makeGalleryIframeHtml() {
      let url = iframeUrl.href + `#data=${encodeURIComponent(JSON.stringify(hashData))}`;
      window.lastUsedTextToImagePluginGalleryIframeUrl = url;
      return `<iframe data-gallery-options="${encodeURIComponent(JSON.stringify(galleryOptions))}" data-adaptive-height="${data.adaptiveHeight ? "yes" : "no"}" style="width:100%; height:70vh; border:none; ${data.style || ""}" class="text-to-image-plugin-gallery" src="${url}" allow="clipboard-write"></iframe>`;
    }
    
    if(!document.querySelector(".text-to-image-plugin-gallery")) {
      setTimeout(() => {
        let marker = document.querySelector("#temporaryMarkerElForTextToImageGallery84738932");
        if(marker) marker.outerHTML = makeGalleryIframeHtml()
      }, 50);
      return `<span id="temporaryMarkerElForTextToImageGallery84738932"></span>`;
    } else {
      // update any gallery parameters if they have been changed:
      let galleryIframe = document.querySelector(".text-to-image-plugin-gallery");
      let newGalleryOptionsText = encodeURIComponent(JSON.stringify(galleryOptions));
      if(galleryIframe.dataset.galleryOptions !== newGalleryOptionsText) {
        galleryIframe.outerHTML = makeGalleryIframeHtml();
      }
      return "";
    }
  }
  
  
  
  
  
  ///////////////////////////////////////////////////////////////////////////////////////
  //              parse and evaluate prompt data/options from input                    //
  ///////////////////////////////////////////////////////////////////////////////////////
  const defaultGuidanceScale = 7;
  
  let d = {}; 
  // let dataInputWasNotAnOptionsObject = false;
  
  if(data.prompt === undefined) {
    d.prompt = data.evaluateItem.toString(); // they passed in some text directly like [image("a carrot")]
  } else {
    d.prompt = data.prompt.evaluateItem.toString();
  }
  // Apply some covenience fixes to the prompt, even though the plugin user should ideally fix this on their end:
  d.prompt = d.prompt.replace(/<span [^>]+______tippy-tooltip-[^>]+>(.+?)<\/span>/, "$1");
  
  // parse values from prompts like: `this is the prompt text (size:::400) (resolution:::512x768) (guidanceScale:::10)`
  if(d.prompt.includes(":::")) {
    let matches = [...d.prompt.matchAll(/\((seed|size|style|resolution|width|height|guidanceScale|saveTitle|saveDescription)\:\:\:/g)];
    // console.debug("matches:", matches);
    const numericProps = ["seed", "width", "height", "guidanceScale", "width", "height", "size"];
    for(let match of matches) {
      let re = new RegExp(`\\(${match[1]}\\:\\:\\:(.+?)\\).*?(?:\\:\\:\\:|$)`, "m");
      let value = (d.prompt.match(re) || [])[1]
      let key = match[1];
      if(value !== undefined) {
        d[key] = numericProps.includes(key) ? Number(value) : value;
        d.prompt = d.prompt.replace(`(${key}:::${value})`, "");
      }
    }
    d.prompt = d.prompt.trim();
  }
  if(!window.___t2i__parseNegativePrompt) {
    window.___t2i__parseNegativePrompt = function(str) {
      const prefix = '(negativePrompt:::';
      const start = str.indexOf(prefix);
      if (start === -1) return null;
      let depth = 0;
      let result = '';
      for(let i = start + prefix.length; i < str.length; i++) {
        if(str[i] === '(') {
          depth++;
        } else if (str[i] === ')') {
          if(depth === 0) {
            break;
          }
          depth--;
        }
        result += str[i];
      }
      return result;
    };
  }
  if(d.prompt.includes("(negativePrompt:::")) {
    let result = window.___t2i__parseNegativePrompt(d.prompt);
    if(result) {
      d.negativePrompt = result;
      d.prompt = d.prompt.replace(`(negativePrompt:::${d.negativePrompt})`, "");
      d.prompt = d.prompt.replace(`(negativePrompt:::${d.negativePrompt}`, ""); // since if final bracket is missing, then all following text is considered the negative prompt
    }
    d.prompt = d.prompt.trim();
  }
  
  if(!data.prompt) { // they passed in some text directly like [image("a carrot")], so add some defaults/fallbacks.
    if(d.seed === undefined) d.seed = -1;
    if(d.width === undefined) d.width = 300;
    if(d.height === undefined) d.height = 300;
    if(d.resolution === undefined) d.resolution = "512x512";   
    if(d.guidanceScale === undefined) d.guidanceScale = defaultGuidanceScale;
    if(d.negativePrompt === undefined) d.negativePrompt = "";
    if(d.style === undefined) d.style = "";
  }
  
  
  // EDIT: Not going ahead with this for now in favor of a setting a global variable which contains data on the last-used prompt.
  // // NOTE: Originally `data` was the only param and it could be the prompt, or a promptOptions object/list.
  // // But I realised that it's not very ergonomic (see e.g. reddit.com/r/perchance/comments/yta11r), so now, in a backwards-compatible way,
  // // I'm allowing the user to pass the options as the second parameter instead. This just means that if data is a prompt (rather than a
  // // promptOptions object), then we use the `options` parameter (which defaults to an empty object) for the generation options:
  // if(dataInputWasNotAnOptionsObject) {
  //   data = options; // this
  // }
  
  if(!d.seed) d.seed = data.seed ? data.seed.evaluateItem : -1;
  if(!d.resolution) d.resolution = data.resolution ? data.resolution.evaluateItem : "512x512";
  if(!d.guidanceScale) d.guidanceScale = data.guidanceScale ? data.guidanceScale.evaluateItem : defaultGuidanceScale;
  if(!d.negativePrompt) d.negativePrompt = data.negativePrompt ? data.negativePrompt.evaluateItem : "";
  if(!d.width) d.width = data.width ? data.width.evaluateItem : undefined; 
  if(!d.height) d.height = data.height ? data.height.evaluateItem : undefined; 
  if(!d.style) d.style = data.style ? data.style.evaluateItem : "";
  if(!d.saveTitle) d.saveTitle = data.saveTitle ? data.saveTitle.evaluateItem : "";
  if(!d.saveDescription) d.saveDescription = data.saveDescription ? data.saveDescription.evaluateItem : "";
  
  
  // NOTE: This stuff is not longer needed because we do the parsing above regardless of whether they passed a plain string in, or a promptOptions object.
  // // if seed is specified within the prompt with the (key:::value) format - i.e. they used promptOptions input but specified the seed within promptOptions.prompt, and so long as promptOptions.seed is not specified, then we set the seed to the one specified in the prompt:
  // if(data.seed === undefined && d.prompt.includes("(seed:::")) {
  //   let seed = null;
  //   d.prompt = d.prompt.replace(/\(seed:::([0-9]+)\)/g, (m, p1) => { seed=Number(p1); return ""; });
  //   if(seed) {
  //     d.seed = seed;
  //   }
  // }
  // // same for guidanceScale:
  // if(data.guidanceScale === undefined && d.prompt.includes("(guidanceScale:::")) {
  //   let guidanceScale = null;
  //   d.prompt = d.prompt.replace(/\(guidanceScale:::([0-9]+)\)/g, (m, p1) => { guidanceScale=Number(p1); return ""; });
  //   if(guidanceScale) {
  //     d.guidanceScale = guidanceScale;
  //   }
  // }
  // // same for width:
  // if(data.guidanceScale === undefined && d.prompt.includes("(width:::")) {
  //   let width = null;
  //   d.prompt = d.prompt.replace(/\(width:::([0-9]+)\)/g, (m, p1) => { width=Number(p1); return ""; });
  //   if(width) {
  //     d.width = width;
  //   }
  // }
  // // same for height:
  // if(data.guidanceScale === undefined && d.prompt.includes("(height:::")) {
  //   let height = null;
  //   d.prompt = d.prompt.replace(/\(height:::([0-9]+)\)/g, (m, p1) => { height=Number(p1); return ""; });
  //   if(height) {
  //     d.height = height;
  //   }
  // }
  // // same for size:
  // if(data.guidanceScale === undefined && d.prompt.includes("(size:::")) {
  //   let size = null;
  //   d.prompt = d.prompt.replace(/\(size:::([0-9]+)\)/g, (m, p1) => { size=Number(p1); return ""; });
  //   if(size) {
  //     d.size = size;
  //   }
  // }
  
  
  ////////////////////////////////////////////////
  //           sanity checks on inputs          //
  ////////////////////////////////////////////////
  
  if(d.size && d.resolution && d.resolution.split("x")[0] !== d.resolution.split("x")[1]) {
    return `(text-to-image-plugin: <b>size</b> is only a valid parameter with square resolutions. use <b>width</b> and <b>height</b> instead)`;
  }

  if(d.guidanceScale < 1 || Math.round(d.guidanceScale) !== d.guidanceScale) {
    return `(text-to-image-plugin: <b>guidanceScale</b> should be a whole number between 1 and 30, inclusive)`;
  }
  
  if(!["512x512", "512x768", "768x512"].includes(d.resolution)) {
    return "(text-to-image-plugin: Currently, the only valid resolutions are 512x512, 512x768 and 768x512)";
  }
  
  
  
  ////////////////////////////////////////////////
  //        un-shortcut size/width/height       //
  ////////////////////////////////////////////////
  let resW = Number(d.resolution.split("x")[0]);
  let resH = Number(d.resolution.split("x")[1]);
  let widthHeightCss = "";
  if(d.size) {
    let size = d.size.evaluateItem;
    if(typeof size === "number") size += "px";
    widthHeightCss = `width:${size}`;
  } else {
    if(d.width && !d.height) {
      d.width = d.width.evaluateItem;
      if(typeof d.width === "number") d.width += "px";
      widthHeightCss = `width:${d.width}`;
      // d.height = d.width * (resH/resW);
    } else if(!d.width && d.height) {
      d.height = d.height.evaluateItem;
      if(typeof d.height === "number") d.height += "px";
      widthHeightCss = `height:${d.height}`;
      // d.width = d.height * (resW/resH);
    } else if(!d.width && !d.height) {
      // make the smallest side 300px by default:
      if(resW > resH) {
        d.height = 300;
        widthHeightCss = `height:${d.height}px`;
        // d.width = d.height * (resW/resH);
      } else {
        d.width = 300;
        widthHeightCss = `width:${d.width}px`;
        // d.height = d.width * (resH/resW);
      }
    } else if(d.width && d.height) {
      if(typeof d.width === "number") d.width += "px";
      if(typeof d.height === "number") d.height += "px";
      widthHeightCss = `width:${d.width}; height:${d.height}`;
    }
  }
  
  if(d.style && /[;\s]?(width|height):/.test(d.style)) widthHeightCss = "";
  
  if(!CSS.supports("aspect-ratio", "1/2")) { // hackily help old browsers that don't support aspect-ratio if possible
    let width = (widthHeightCss.match(/width:([^;]+)px;?/) || [])[1];
    if(width && !widthHeightCss.includes("height") && !isNaN(Number(width))) {
      widthHeightCss += `; height:${Number(width) * (resH/resW)}px;`;
    }
    let height = (widthHeightCss.match(/height:([^;]+)px;?/) || [])[1];
    if(height && !widthHeightCss.includes("width") && !isNaN(Number(height))) {
      widthHeightCss += `; width:${Number(height) * (resW/resH)}px;`;
    }
  }
  
  let requestId = Math.random().toString();
  let privateIframeId = "id" + Math.random().toString().replace(".", "");
  
  // let iframePromiseResolver;
  // let iframePromise = new Promise(r => iframePromiseResolver=r);
  // let canvasPromiseResolver;
  // let canvasPromise = new Promise(r => canvasPromiseResolver=r);
  // let dataUrlPromiseResolver;
  // let dataUrlPromise = new Promise(r => dataUrlPromiseResolver=r);
  let onFinishPromiseResolver;
  let onFinishPromise = new Promise(r => onFinishPromiseResolver=r);
  
  window.addEventListener('message', async function(event) {
    if(event.data.type === 'finished' && event.data.id === privateIframeId) {
      
      function drawDataURLToCanvas(dataURL) {
        return new Promise((resolve, reject) => {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          const img = new Image();
          img.onload = () => {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            resolve(canvas);
          };
          img.src = dataURL;
        });
      }

      let canvas = await drawDataURLToCanvas(event.data.dataUrl);
      let iframe = document.querySelector(`iframe.${privateIframeId}`); // NOTE: may be null if it has been removed! (todo: keep original reference around instead of querySelector?)
      let dataUrl = event.data.dataUrl;
      
      let outputData = new String(dataUrl);
      outputData.canvas = canvas;
      outputData.iframe = iframe;
      outputData.dataUrl = dataUrl;
      outputData.inputs = evaluatedInputs;
      
      if(iframe) iframe.textToImagePluginOutput = outputData;
      
      if(shouldRemoveIframeOnFinish) {
        delete outputData.iframe;
        iframe.remove();
      }
      
      if(data.onFinish) {
        data.onFinish(outputData);
      }
      onFinishPromiseResolver(outputData);
      
      // EDIT: This is no longer needed - the fix is now within the iframe - basically just awaits a requestAnimationFrame before and after hiding the "Processing" facade.
      // hack to fix weird bug in Windows causing iframe rendering to not update once image is done (stays on "Processing" frame, but weirdly with spinner still going):
      // setTimeout(async () => {
      //   let originalTop = iframe.style.top;
      //   let originalPosition = iframe.style.position;
      //   let originalOffsetTop = iframe.offsetTop;
      //   iframe.style.top = "1px";
      //   iframe.style.position = "relative";
      //   let waitedMs = 0;
      //   while(iframe.offsetTop === originalOffsetTop) {
      //     await new Promise(r => setTimeout(r, 2));
      //     waitedMs += 2;
      //     if(waitedMs > 1000) break;
      //   }
      //   iframe.style.top = originalTop;
      //   iframe.style.position = originalPosition;
      // }, 1);
      
      // dataUrlPromiseResolver(event.data.dataUrl);
      // canvasPromiseResolver(canvas);
      // iframePromiseResolver(document.querySelector(`iframe.${privateIframeId}`));
    }
  });
  
  function blobToDataUrl(blob) {
    return new Promise(r => {
      const reader = new FileReader();
      reader.onload = () => r(reader.result);
      reader.readAsDataURL(blob);
    });
  }
  
  let referenceImage = null;
  if(data.referenceImage) {
    referenceImage = {};
    // url can actually be a blob or a blob URL, in which case we postMessage the data to the iframe
    let isBlobby = data.referenceImage.url instanceof Blob; // blobby means Blob or blob URL string
    let url, blobby;
    
    if(isBlobby) blobby = data.referenceImage.url;
    else url = data.referenceImage.url.evaluateItem;
    
    if(url.startsWith("blob:")) {
      isBlobby = true;
      blobby = url;
      url = null;
    }
    
    if(isBlobby) {
      referenceImage.url = "<data-via-postmessage>";
      (async () => {
        let blob;
        if(typeof blobby === "string" && blobby.startsWith("blob:")) {
          blob = await fetch(blobby).then(r => r.blob());
        } else {
          blob = blobby;
        }
        let dataUrl = await blobToDataUrl(blob);
        window.addEventListener('message', function(event) {
          if(event.data.type === 'readyForData' && event.data.id === privateIframeId) {
            document.querySelector(`iframe.${privateIframeId}`).contentWindow.postMessage({id:privateIframeId, referenceImageDataUrl:dataUrl}, serverOrigin);
          }
        });
      })();
    } else {
      referenceImage.url = url;
    }
    referenceImage.blur = data.referenceImage.blur.evaluateItem;
    if(referenceImage.url > 1 || referenceImage.url < 0) return `referenceImage.url must either be a 'data URL' (starting with 'data:') or a https://user-uploads.perchance.org URL - i.e. an image that has been uploaded to https://perchance.org/upload - the URL you've used is: '${referenceImage.url && typeof referenceImage.url === "string" && referenceImage.url.length > 30 ? referenceImage.url.slice(0, 30)+"..." : referenceImage.url}'.`;
    if(referenceImage.blur > 1 || referenceImage.blur < 0) return `referenceImage.blur must be between 0 and 1, but is instead '${referenceImage.blur > 1}'.`
  }
  
  window.addEventListener('message', function(event) {
    if(event.data.type === 'readyForData' && event.data.id === privateIframeId) {
      let iframe = document.querySelector(`iframe.${privateIframeId}`);
      if(iframe) iframe.contentWindow.postMessage({type:"originNotify", frameId:privateIframeId}, serverOrigin);
    }
  });
  
  let urlHashData = {
    saveChannel: window.generatorName,
    saveTitle: d.saveTitle,
    saveDescription: d.saveDescription,
    prompt: d.prompt,
    seed: d.seed,
    resolution: d.resolution,
    guidanceScale: d.guidanceScale,
    defaultGuidanceScale,
    negativePrompt: d.negativePrompt,
    requestId: requestId,
    forceColorScheme: data.forceColorScheme,
    verifyOnly: data.verifyOnly,
    iframeId: privateIframeId,
    hideGalleryButtons: data.hideGalleryButtons,
    referenceImage,
  };
  
  // clone input for onFinish data:
  evaluatedInputs = JSON.parse(JSON.stringify(d));
  
  let iframeId = data.id ? data.id.evaluateItem : "";
  if(iframeId) {
    setTimeout(() => {
      document.querySelector("#"+iframeId).reload = function() {
        let src = this.src;
        this.src = "";
        setTimeout(() =>this.src=src, 700);
      };
    }, 500);
  }
  
  window.lastTextToImagePrompt = d.prompt;
  if(data.prompt) { // <-- i.e. if they passed a promptOptions object
    data.lastUsedPrompt = d.prompt;
    data.lastUsedNegativePrompt = d.negativePrompt;
  }
  
  // VERY lazily load the iframe (only when screen actually intersects) because some people add a lot of images in subsections and in several different tabs of tabs-plugin, etc.
  // This ensures they don't spam the server, and the visible ones get generated first.
  setTimeout(async () => {
    // the dev may have generated the HTML, but not actually added it to the DOM for a while, so we wait up to 5 mins for it
    let waitedSeconds = 0;
    while([...document.querySelectorAll(".text-to-image-plugin-image-iframe")].filter(el => el.dataset.alreadyAddedIntersectionObserver === "no").length === 0) {
      await new Promise(r => setTimeout(r, 500));
      waitedSeconds += 0.5;
      if(waitedSeconds > 60*5) return;
    }
    for(let el of [...document.querySelectorAll(".text-to-image-plugin-image-iframe")]) {
      if(el.dataset.alreadyAddedIntersectionObserver === "yes") continue;
      el.dataset.alreadyAddedIntersectionObserver = "yes";
      
      let observer1, observer2;
      
      let rootMarginSize = Math.min(1000, (window.innerHeight*2));
      if(window.innerWidth < 600) {
        rootMarginSize = Math.min(1500, (window.innerHeight*3)); // larger on mobile because e.g. images that might otherwise be displayed side by side are instead displayed vertically
      }
      
      function handler(entries) {
        if(entries[0].isIntersecting) {
          // console.debug("t2i iframe: Visible");
          if(!el.src) {
            el.removeAttribute("srcdoc");
            el.src = el.dataset.src;
            observer1.disconnect();
            observer2.disconnect(); 
          }
        } else {
          // console.debug("t2i iframe: NOT Visible");
        }
      }
      observer1 = new IntersectionObserver(handler, {
        root: document.documentElement, // otherwise I think it uses the top-level viewport? either way, it doesn't seem to work without specifying this.
        rootMargin: rootMarginSize+"px", // it's important that this is quite big - so that e.g. mobile users don't have to scroll down to trigger stuff. we basically want to trigger ~all visible elements anyway - just not stuff hidden within e.g. tabs plugin or whatever.
      });
      observer1.observe(el);
      // for some reason, in some situations, the above intersection observer was reporting the `root` and `el` bounding rects as 0x0x0x0. Adding a second observer using the viewport root fixes this:
      observer2 = new IntersectionObserver(handler, {
        rootMargin: rootMarginSize+"px",
      });
      observer2.observe(el);
    }
  }, 100); // CAUTION: do not remove/lower this delay. Some generators may create a large "feed" of images, and expect them to be lazy-loaded when scrolled to (e.g. AI chat feeds), so if you add the intersection observers ~synchronously, they could be triggered during the process of actually generating the feed, which would cause them to all start generating during page load.
  
  // let outputString = new String(`<iframe ${iframeId ? `id="${iframeId}"` : ""} class="text-to-image-plugin-image-iframe ${privateIframeId}" data-already-added-intersection-observer="no" data-src="${serverOrigin}/embed#${encodeURIComponent(JSON.stringify(urlHashData))}" style="border:0; background:transparent; ${widthHeightCss}; aspect-ratio:${resW}/${resH}; ${d.style}"></iframe>`);
  // // leaving these out for now in favor of 'onFinish' in prompt options
  // // outputString.dataUrl = dataUrlPromise;
  // // outputString.canvas = canvasPromise;
  // outputString.onFinishPromise = onFinishPromise;
  // outputString.iframeHtml = outputString;
  // return outputString;
  
  // we return the promise which stringifies into the iframe html, we can write [textToImage(promptOptions)] and while also being able to write `let result = await textToImage(promptOptions);`
  let outputString = `<iframe ${iframeId ? `id="${iframeId}"` : ""} class="text-to-image-plugin-image-iframe ${privateIframeId}" data-already-added-intersection-observer="no" data-src="${serverOrigin}/embed#${encodeURIComponent(JSON.stringify(urlHashData))}" style="border:0; background:transparent; ${widthHeightCss}; aspect-ratio:${resW}/${resH}; ${d.style}"></iframe>`;
  let outputStringHasBeenRead = false;
  onFinishPromise.toString = function() {
    outputStringHasBeenRead = true;
    return outputString;
  };
  // onFinishPromise.iframeHtml = outputString;
  Object.defineProperty(onFinishPromise, 'iframeHtml', {
    get: function() {
      outputStringHasBeenRead = true;
      return outputString;
    }
  });
  Object.defineProperty(onFinishPromise, 'evaluateItem', {
    get: function() {
      outputStringHasBeenRead = true;
      return outputString;
    }
  });
  onFinishPromise.onFinishPromise = onFinishPromise;
  
  // trigger the loading automatically if they haven't added the iframe to the document:
  setTimeout(() => {
    if(!outputStringHasBeenRead && !iframeId && !document.querySelector(`.${privateIframeId}`)) {
      shouldRemoveIframeOnFinish = true;
      let div = document.createElement("div");
      div.innerHTML = outputString.replace(`data-already-added-intersection-observer="no"`, "");
      let iframe = div.firstElementChild;
      iframe.style.cssText = `opacity:0; pointer-events:none; position:fixed; top:0; left:0;`;
      document.body.append(iframe);
      iframe.src = iframe.dataset.src;
    }
  }, 150); // this should be longer than 100ms for backward-compat because then it runs after the intersection observer is added, which means it wouldn't have loaded anyway, so it guards against the case where they're just a bit slow to add it to the HTML doc.
  
  return onFinishPromise;


character
  a {mech|demon|cyberpunk} {warrior|minion|samurai}

place
  soviet russia
  a small village
  a mountainous region
  an underwater cavern

season
  winter
  summer
  
prompt
  detailed painting of [character] in [place], [season]
  
  
  
","imports":[],"lastEditTime":1738218782426,"found":true},{"name":"simple-gen-footer","modelText":"$output
\tThe <a href\="/useful-generators">useful generators list</a> is a handy list of simple text generators on various topics. If you're a Perchance builder then you'll probably find some of them useful for importing into your own projects.
\tIf you'd like to learn how to create a random text generator, then check out the <a href\="/minimal#edit">minimal generator template</a> and the <a href\="/tutorial">tutorial</a>. It's easier than you'd think and is great fun :)
\t$output = <p>[this.joinItems("</p><p>")]</p>","imports":[],"lastEditTime":1618109989813,"found":true},{"name":"pre-pro","modelText":"$meta
  title = 🤖 • Preprocessor • 💖
  description = Currently For Imports & Inline Dent & Slash Commands

$output(txt) =>
  txt = txt.replaceAll(`{s:comments}`,`{i:coc}{i:cor}{i:cos}`)
  obj = asd()
  /**/for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      regex = new RegExp(`{i:${key}}`, 'g')
      //txt = txt.replaceAll(regex, `${key} = {import:${obj[key]}}`)
      if (regex.test(txt)) {
        txt = txt.replaceAll(regex,"")
        txt += `\
\
${key} = [d('${obj[key]}')]`
      }
    }
  }/**//*
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      let regex = new RegExp(`{i:${key}(,\\w+)?}`, 'g')
      txt = txt.replace(regex, (match, placeholder) => {
        if (placeholder) {
          console.log(`\
\
${placeholder.slice(1) || key} = [d('${obj[key]}')] || ${key}`)
          txt += `\
\
${placeholder.slice(1)} = [d('${obj[key]}')]`
        } else {
          txt += `\
\
${key} = [d('${obj[key]}')]`
        }
        return ""
      });
    }
  }*/
  txt = txt/*.replaceAll(`!d`,`d = {import:dynamic-import-plugin}\
`)*/.replaceAll(`!y`,`y = {import:plugin-framework}\
`).replaceAll(`{:}`,`{>} output = `)//
  //console.log("VERSION 1 POST MINIMAL",txt)
  txt = txt.replace(/{s:([^,]+),([^,\(}]+)(\((.*?)\))?}/g, (m, x, y, z) => 
    `${x}{>}output=[d('${y}')${(z === "()") ? "(this.input)" : z || ""}]{<}`
  )
  txt = c(txt) + `\
\
d = {import:dynamic-import-plugin}`
  console.groupCollapsed("pre-pro",window.generatorName)
  console.log("PRE-PRO FINAL: " + window.generatorName,txt)
  console.groupEnd()
  window.__preprocessorDebuggingLog = txt
  return txt


d = {import:dynamic-import-plugin}
c = [d('inline-dent-preprocessor')]

yas(input) =>
  return input.replaceAll(" ","-").split('-').map(word => word[0].toUpperCase() + word.slice(1).toLowerCase())

mxy() =>
  obj = {
    a:{regex:'',rep:''}
  }

arr
  audio-plugin
  global-emoji-pack
  a-plugin
  comments-relay
  comments-clone
  comments-setup
  dynamic-import-plugin
  plugin-framework
  unforkable-plugin
  iframe-plugin
  text-file-appender
  chat-embed
  text-to-image-plugin
  comments-plugin
  comments-pre-setup-1
  background-image-plugin
  smash-or-pass-prompts
  pulsating-heart
  ai-text-plugin
  tap-plugin
  favicon-plugin
  url-params-plugin
  upload-plugin
  remember-plugin
  generator-stats-plugin
  font-plugin
  typewriter-plugin
  text-to-speech-plugin
  download-button-plugin
  fullscreen-button-plugin
  tabs-plugin
  date-plugin
  glow-plugin
  link-plugin
  basic-auto-theme-plugin
  character-map
  comments-embed-plugin
  emoji-image-plugin
  super-fetch-plugin
  track-imports-plugin

asd() =>
  obj = {
    gep: "global-emoji-pack", 
    rel: "comments-relay", 
    dip: "dynamic-import-plugin", 
    plf: "plugin-framework", 
    unf: "unforkable-plugin",
    cry: "crypto-plugin-",
    tbp: 'tabs-plugin-'
    }
  arr.$allKeys.forEach(item => {
    x = yas(item).map(x => x.toLowerCase())
    switch(true) {
      case (x[2] && !Object.keys(obj).includes(String(x[0][0] + x[1][0] + x[2][0]))):
        obj[x[0][0] + x[1][0] + x[2][0]] = item
        break
      case (x[1] && x[0].slice(0,2).length == 2 && !Object.keys(obj).includes(x[0].slice(0,2) + x[1][0])):
        obj[x[0].slice(0,2) + x[1][0]] = item
        break
      case (x[1] && x[1].slice(0,2).length == 2 && !Object.keys(obj).includes(x[0][0] + x[1].slice(0,2))):
        obj[x[0][0] + x[1].slice(0,2)] = item
        break
      case (!Object.keys(obj).includes(x[0].slice(0,3))):
        obj[x[0].slice(0,3)] = item
        break
      default:
        obj["spill"] = item
    }
  })
  return Object.fromEntries(Object.entries(obj).sort((a, b) => a[1].localeCompare(b[1])));

cmo(txt) =>
  return txt.toLowerCase().replaceAll(/[^0-9a-z\-]/g, '-')

ret(obj) =>
  return Object.keys(obj).map(i => {value = obj[i];sel = Object.values(obj).filter(val => val === value);if (Object.values(obj).filter(val => val === value).length > 1){value = `${value} ${i} ${obj[i]}: ${sel.length}`};
  return `${i} >>>> ${value}<br>`}).join('')
  
sov(txt) =>
  uniqueValues = [...new Set(Object.values(asd()).filter(value => String(value.replaceAll("-","")).toLowerCase().includes(String(txt.replace("-","")))))]
  resultsList = document.getElementById('resultsList');
  resultsList.innerHTML = ''
  if (uniqueValues.length == 0) {
    resultsList.innerHTML = '<li>No results found.</li>'
  } else {
    uniqueValues.forEach(value => {listItem = document.createElement('li'); listItem.textContent = Object.keys(asd())[Object.values(asd()).indexOf(value)] + " " + String(value); resultsList.appendChild(listItem); });
  }

aas = _s:hi,therea__aasd

aasas(txt)=>
  txt = txt.replace(/_s:([^,]+),([^,\(]+)((?:\(|\.a)(.*)(?:\)|\.b))?_/g, (m, x, y, z) => `${x}{>}output=[d('${y}')${(z === "()") ? "(this.input)" : z || ""}]{<}`);
  console.log(txt)
  return ``","imports":["dynamic-import-plugin"],"lastEditTime":1734789299132,"found":true},{"name":"comments-plugin","modelText":"$output(opts) =>
  if(!opts) opts = {};
  let width = opts.width;
  let height = opts.height;
  if(!width) width = "300px";
  if(!height) height = "250px"; 
  if(typeof width === "number") width += "px";    
  if(typeof height === "number") height += "px";
  let containerStyle = opts.containerStyle || opts.style || `width:${width}; height:${height};`;
  
  let iframeUniqueId = "id"+Math.random().toString().replaceAll(".", "")+ Math.random().toString().replaceAll(".", "");
  let ctx = {};
  ctx.currentInputElText = "";
  ctx.iframeUniqueId = iframeUniqueId;
  
  console.debug("comments-plugin 1");
  
  function addMethodsToReturnValue(stringObj) {
    stringObj.submit = async function(optionalText, opts={}) {
      // Note: if optionalText is specified, that text will be submitted instead of what's currently in the text box, and the text box will not be cleared after submission.
      if(optionalText) optionalText = optionalText.toString();
      
      let nickname = opts.nickname ? opts.nickname.toString() : null;
      
      let resolver;
      let promise = new Promise(r => resolver=r);
      let requestId = Math.random().toString()+Math.random().toString();
      async function messageHandler(e) {
        if(e.origin !== "https://comments-plugin.perchance.org") return;
        if(e.data.iframeUniqueId !== ctx.iframeUniqueId) return;
        if(e.data.requestId !== requestId) return;
        
        if(e.data.type === "message_submit_response") {
          console.debug(`parent frame got message_submit_response:`, e.data.success);
          resolver({success:e.data.success});
        } else {
          console.warn("Invalid event type for this requestId?");
        }
        window.removeEventListener("message", messageHandler);
      }
      window.addEventListener("message", messageHandler);
      while(!ctx.finishedLoading) { console.debug("Waiting for comments-plugin iframe to load before sending .submit() postMessage"); await new Promise(r => setTimeout(r, 500)); }
      ctx.iframeContentWindow.postMessage({type:"trigger_programmatic_submit", text:optionalText, nickname, channel:ctx.urlHashData.channel, requestId}, "https://comments-plugin.perchance.org");
      return promise;
    };
    
    Object.defineProperty(stringObj, 'inputText', {
      get: function() {
        return ctx.currentInputElText;
      },
      set: function(value) {
        ctx.currentInputElText = value;
        ctx.iframeContentWindow.postMessage({type:"set_input_el_text", channel:ctx.urlHashData.channel, text:value}, "https://comments-plugin.perchance.org");
      },
    });
    
    stringObj.setNicknameForNextComment = async function(nickname) {
      ctx.iframeContentWindow.postMessage({type:"set_next_submit_nickname", channel:ctx.urlHashData.channel, nickname:nickname}, "https://comments-plugin.perchance.org");
    };
    stringObj.setAvatarUrlForNextComment = async function(avatarUrl) {
      ctx.iframeContentWindow.postMessage({type:"set_next_submit_avatar_url", channel:ctx.urlHashData.channel, nickname:avatarUrl}, "https://comments-plugin.perchance.org");
    };
    
    Object.defineProperty(stringObj, 'comments', { get: () => ctx.allComments.slice(0) });
    Object.defineProperty(stringObj, 'channel', { get: () => ctx.urlHashData.channel });
    
    return stringObj;
  }
  
  let queryParams = {};
  if(opts.adminPasswordHash) queryParams.adminPasswordHash = opts.adminPasswordHash.evaluateItem;
  
  let urlHashData = {};
  urlHashData.iframeUniqueId = iframeUniqueId;
  if(opts.adminPasswordHash) urlHashData.adminPasswordHash = opts.adminPasswordHash;
  if(opts.bannedWords) {
    if(typeof opts.bannedWords === "string") {
      urlHashData.bannedWords = opts.bannedWords.trim().split(",").map(w => w.trim()).filter(w => w);
    } else if(!opts.bannedWords.getLength && opts.getPropertyNames && opts.getPropertyNames.includes("bannedWords")) {
      urlHashData.bannedWords = opts.bannedWords.getRawListText.split("=").slice(1).join("=").trim().split(",").map(w => w.trim()).filter(w => w);
    } else {
      urlHashData.bannedWords = opts.bannedWords.selectAll.map(item => item.getRawListText.replace("/\\^", "/^"));
    }
  }

  if(opts.commentPlaceholderText) urlHashData.commentPlaceholderText = opts.commentPlaceholderText.evaluateItem;
  if(opts.submitButtonText) urlHashData.submitButtonText = opts.submitButtonText.evaluateItem;
  if(opts.submitButtonSuccessText) urlHashData.submitButtonSuccessText = opts.submitButtonSuccessText.evaluateItem;
  if(opts.hideComments) urlHashData.hideComments = opts.hideComments;
  if(opts.hideDates) urlHashData.hideDates = opts.hideDates;
  if(opts.hideCommentsBeforeDate) urlHashData.hideCommentsBeforeDate = opts.hideCommentsBeforeDate;
  
  if(opts.hideSettingsButton) urlHashData.hideSettingsButton = opts.hideSettingsButton;
  if(opts.hideFullscreenButton) urlHashData.hideFullscreenButton = opts.hideFullscreenButton;
  if(opts.submitButtonStyle) urlHashData.submitButtonStyle = opts.submitButtonStyle.evaluateItem;
  if(opts.settingsButtonStyle) urlHashData.settingsButtonStyle = opts.settingsButtonStyle.evaluateItem;
  if(opts.fullscreenButtonStyle) urlHashData.fullscreenButtonStyle = opts.fullscreenButtonStyle.evaluateItem;
  if(opts.messageBubbleStyle) urlHashData.messageBubbleStyle = opts.messageBubbleStyle.evaluateItem;
  if(opts.messageFeedStyle) urlHashData.messageFeedStyle = opts.messageFeedStyle.evaluateItem;
  if(opts.inputAreaStyle) urlHashData.inputAreaStyle = opts.inputAreaStyle.evaluateItem;
  if(opts.loadFonts) urlHashData.loadFonts = opts.loadFonts.evaluateItem;
  if(opts.forceColorScheme) urlHashData.forceColorScheme = opts.forceColorScheme.evaluateItem;
  
  try { urlHashData.transparentBackground = /(^|\s)background(|-color): *(transparent|none transparent)/.test(containerStyle); } catch(e) { console.log(e); }
  
  if(opts.channelLabel) urlHashData.channelLabel = opts.channelLabel.evaluateItem;
  
  
  if(opts.adminFlair) urlHashData.adminFlair = opts.adminFlair.evaluateItem;
  if(opts.deleteButtonIcon) urlHashData.deleteButtonIcon = opts.deleteButtonIcon.evaluateItem;
  if(opts.bannedUsers) urlHashData.bannedUsers = opts.bannedUsers.selectAll.map(l => l.evaluateItem.split("-").slice(-1)[0]).joinItems(",");
  if(opts.rateLimits) urlHashData.rateLimits = opts.rateLimits;
  if(opts.slashCommands) urlHashData.slashCommands = encodeURIComponent(JSON.stringify(opts.slashCommands));
  if(opts.beforeSubmit) urlHashData.beforeSubmitHandlerEnabled = "true";
  if(opts.customEmojiSize) urlHashData.customEmojiSize = opts.customEmojiSize;
  if(opts.loneCustomEmojiSizeMultiplier) urlHashData.loneCustomEmojiSizeMultiplier = opts.loneCustomEmojiSizeMultiplier;
  if(opts.customEmojis) {
    if(typeof opts.customEmojis === "string" && opts.customEmojis.startsWith("https://user-uploads.perchance.org")) {
      urlHashData.customEmojis = opts.customEmojis.trim();
    } else {
      let text = opts.customEmojis.getRawListText;
      text = text.slice(text.indexOf("\
")).trim(); // remove list name
      // note: no need to remove indentation - parsing code in embed does that performantly
      
      // we need to evaluateItem for things like `@import = {import:my-emoji-list-url}
      urlHashData.customEmojis = /@import\s*=\s*[[{]/.test(text) ? text.replace(/@import\s*=\s*[[{].+/, m=>m.evaluateItem) : text;
    }
  }
  urlHashData.channel = opts.channel ? opts.channel.evaluateItem : "";
  
  if(!window.___commentsPluginSlashCommandsByChannel12321) window.___commentsPluginSlashCommandsByChannel12321 = {};
  window.___commentsPluginSlashCommandsByChannel12321[urlHashData.channel] = opts.slashCommands;    
  
  let folderName = window.generatorName; 
  if(opts.channel) {
    let channel = opts.channel.evaluateItem;
    if(!/^[a-z0-9\-]+$/.test(channel)) return `(ERROR: You gave a channel name of '${channel}' to the comments plugin, but channel names can only contain lower-case letters, numbers, and hyphens, like 'my-cool-channel-33'.)`;
    folderName += `+${channel}`;
  }
  
  // I've deprecated `reverseCommentOrder`, but it won't hurt existing implementations because the "reversed" order (new comments at bottom) is now default.
  // if(opts.reverseCommentOrder) urlHashData.reverseCommentOrder = opts.reverseCommentOrder;
  urlHashData.reverseCommentOrder = true;
  if(opts.newestCommentsAtTop) urlHashData.reverseCommentOrder = false; 
  
  let queryString = new URLSearchParams(queryParams).toString();
  
  let loadMoreButton = document.createElement("button");
  let originalLoadMoreButtonTextContent = "load more";
  let postMessageSource = null;
  loadMoreButton.innerHTML = originalLoadMoreButtonTextContent;
  loadMoreButton.style.cssText = "display:none; margin:0.5rem auto;";
  loadMoreButton.addEventListener("click", function() {
    originalLoadMoreButtonTextContent = loadMoreButton.textContent;
    loadMoreButton.textContent = "loading...";
    loadMoreButton.disabled = true;
    document.querySelector(`.${iframeUniqueId}`).contentWindow.postMessage({iframeUniqueId, loadMoreButtonClick:true}, "*");
  });
  
  ctx.loadMoreButton = loadMoreButton;
  ctx.opts = opts;
  ctx.urlHashData = urlHashData;
  ctx.allComments = [];
  ctx.onLoadAlreadyFired = false;
  ctx.alreadyGotCommentIds = new Set();
  
  if(!window.___alreadyAddedCommentsPluginStuff43211234) {
  
    window.___commentsPluginIframeUniqueIdToContext = new Map();
    
    // the iframe send us a message when it is finished loading (this is to get around Glitch's uncustomizable loading screens)
    window.addEventListener("message", async function(e) {
      if(e.origin !== "https://comments-plugin.perchance.org") return;
      if(!e.data.iframeUniqueId) return;
      
      // May need to wait a moment for the replacedDuringUpdate iframes to be 'tracked' since my current code hackily does that with a 'polling' method.
      while(!window.___commentsPluginIframeUniqueIdToContext.get(e.data.iframeUniqueId)) { console.debug("Waiting for comments-plugin iframe to be tracked."); await new Promise(r => setTimeout(r, 500)); }
      
      let ctx = window.___commentsPluginIframeUniqueIdToContext.get(e.data.iframeUniqueId)
      let opts = ctx.opts
      let loadMoreButton = ctx.loadMoreButton;
      
      // if(e.data.type === "perchance_comments_new_message_added") {
      //   console.debug("new message:", e.data.messageData);
      //   console.debug("event:", e);
      //   console.debug("window.___commentsPluginIframeContentWindowToContext:", window.___commentsPluginIframeUniqueIdToContext);
      //   console.debug("ctx:", ctx);
      //   console.debug("opts:", opts);
      // }
      
      if(e.data.type === "perchance_comments_new_message_added") {
        if(!ctx.alreadyGotCommentIds.has(e.data.messageData.id)) {
          ctx.allComments.push(e.data.messageData);
          ctx.alreadyGotCommentIds.add(e.data.messageData.id);
          ctx.allComments.sort((a,b) => a.time-b.time);
          
          if(opts.onComment) {
            opts.onComment(e.data.messageData);
          }
        }
      } else if(e.data.type === "input_el_text_change") {
        console.debug(`parent frame got input_el_text_change:`, e.data.text);
        ctx.currentInputElText = e.data.text;
        if(opts.onInputTextChange) {
          opts.onInputTextChange(e.data.text);
        }
      } else if(e.data.type === "perchance_comments_on_load_data") {
        let newComments = e.data.onLoadData.comments.filter(c => !ctx.alreadyGotCommentIds.has(c.id));
        for(let c of newComments) ctx.alreadyGotCommentIds.add(c.id);
        ctx.allComments.push(...newComments);
        ctx.allComments.sort((a,b) => a.time-b.time);
        
        if(ctx.onLoadAlreadyFired) {
          // the comments plugin sometimes self-reloads atm, which is not ideal, but it's fine so long as we don't count it as an actual reload.
          // instead, we trigger onComment for any new comments, and that's it.
          for(let comment of newComments) {
            opts.onComment(comment);
          }
          return;
        }
        ctx.onLoadAlreadyFired = true;
        
        postMessageSource = e.source;
        if(opts.onLoad) {
          if(e.data.onLoadData.comments.length > 0) {
            loadMoreButton.style.display = "block";
          }
          if(e.data.noMoreCommentsBeforeThis) {
            loadMoreButton.style.display = "none";
          }
          opts.onLoad(e.data.onLoadData.comments, {loadMoreButton});
        }
      } else if(e.data.type === "perchance_comments_on_load_more") {
        let newComments = e.data.onLoadMoreData.comments.filter(c => !ctx.alreadyGotCommentIds.has(c.id));
        for(let c of newComments) ctx.alreadyGotCommentIds.add(c.id);
        ctx.allComments.push(...newComments);
        ctx.allComments.sort((a,b) => a.time-b.time);
        
        if(e.data.onLoadMoreData.comments.length > 0) {
          loadMoreButton.disabled = false;
          loadMoreButton.textContent = originalLoadMoreButtonTextContent;
        } else {
          loadMoreButton.style.display = "none";
        }
        if(e.data.noMoreCommentsBeforeThis) {
          loadMoreButton.style.display = "none";
          loadMoreButton.disabled = true;
        }
        if(opts.onLoadMore) {
          opts.onLoadMore(e.data.onLoadMoreData.comments);
        }
      } else if(e.data.type === "perchance_comments_load_more_no_more") {
        loadMoreButton.style.display = "none";
      } else if(e.data.type === "perchance_comments_finished_loading") {
        ctx.finishedLoading = true;
        // hide the loader of the iframe:
        let ctn = document.querySelector(`.${e.data.iframeUniqueId}`).closest(".comments-plugin-ctn");
        // have to check if exists because i think with fullscreen button it's not in the ctn anymore:
        if(ctn) ctn.querySelector(".__perchance-comments-loading-facade-12345").style.display = "none";
        // and then tell it its parent origin:
        e.source.postMessage({parentOrigin:window.origin}, e.origin);
      } else if(e.data.type === "evaluateText") {
        let result = e.data.text.evaluateItem;
        e.source.postMessage({requestId:e.data.requestId, result}, e.origin);
      } else if(e.data.type === "before_submit_handler_call") {
        let result;
        if(opts.beforeSubmit) {
          try {
            result = await opts.beforeSubmit({inputText:e.data.inputText});
            if(result !== undefined) result = JSON.parse(JSON.stringify(result));
          } catch(e) {
            result = null; // IMPORTANT: return null if it fails, which cancels the submission. Important for cases like: perchance.org/send-me-a-secret-message where continue-submission-on-error is 'dangerous'
            alert(`beforeSubmit function failed with error: ${e.message}`);
            console.error(e);
          }
        }
        await new Promise(r => setTimeout(r, 50)); // important: allow e.g. set_input_el_text to be sent before this submit handler call is considered "done"
        e.source.postMessage({requestId:e.data.requestId, result}, e.origin);
      } else if(e.data.type === "slash_command") {
        let commandName = e.data.commandName;
        let argText = e.data.argText;
        let slashCommands = window.___commentsPluginSlashCommandsByChannel12321[e.data.channel];
        if(slashCommands[commandName] === undefined) {
          alert("Please refresh the page before testing newly-added commands.");
          return "";
        }
        slashCommands[commandName].input = argText;
        let resultText = slashCommands[commandName].output.evaluateItem;
        e.source.postMessage({requestId:e.data.requestId, resultText}, e.origin);
      } else if(e.data.type === "toggle_fullscreen") {
        let iframe = document.querySelector(`.${e.data.iframeUniqueId}`);
        
        // If iframe is currently fullscreen, then it's not in a `ctn`, so we use the pre-assigned data-comments-ctn-id to find the iframe's ctn so we can put it back in:
        let ctn = iframe.closest(".comments-plugin-ctn") || document.querySelector(`[data-comments-ctn-id="${iframe.dataset.commentsCtnId}"]`);
        
        if(ctn.dataset.isFullscreen === "no") {
          document.body.appendChild(iframe);
          iframe.style.position = "fixed";
          iframe.style.zIndex = "999999999"; // <-- caution: don't lower this
          iframe.style.top = "0"; iframe.style.left = "0";
          document.scrollingElement.style.overflow = "hidden";
          ctn.dataset.isFullscreen = "yes";
          // link the iframe and ctn with an id so we can get the ctn, given the id from the iframe that sent the "toggle_fullscreen" message:
          let commentsCtnId = Math.random();
          ctn.dataset.commentsCtnId = commentsCtnId;
          iframe.dataset.commentsCtnId = commentsCtnId;
        } else {
          ctn.appendChild(iframe);
          iframe.style.position = "";
          iframe.style.zIndex = "";
          iframe.style.top = ""; iframe.style.left = ""; 
          document.scrollingElement.style.overflow = "";
          ctn.dataset.isFullscreen = "no";
        }
//         if(ctn.dataset.isFullscreen === "no") {
//           ctn.dataset.originalCssHeight = ctn.style.height;
//           ctn.dataset.originalCssWidth = ctn.style.width;
//           ctn.dataset.originalCssPosition = ctn.style.position;
//           ctn.dataset.originalCssZIndex = ctn.style.zIndex;
          
//           // we need to change the ancestor z indices too:
//           let ancestorEls = [];
//           let aEl = ctn.parentElement;
//           while(aEl !== document.body) {
//             ancestorEls.push(aEl);
//             aEl = aEl.parentElement;
//           }
//           let ancestorZIndices = ancestorEls.map(el => el.style.zIndex);
//           ctn.dataset.originalAncestorZIndices = JSON.stringify(ancestorZIndices);
//           ancestorEls.forEach(el => el.style.zIndex="63829472");
          
//           ctn.style.height = "";
//           ctn.style.width = "";
//           ctn.style.position = "fixed";
//           ctn.style.zIndex = "63829472";
//           ctn.style.top = "0"; ctn.style.left = "0"; ctn.style.right = "0"; ctn.style.bottom = "0";
//           document.scrollingElement.style.overflow = "hidden";
//           ctn.dataset.isFullscreen = "yes";
//         } else if(ctn.dataset.isFullscreen === "yes") {
//           ctn.style.height = ctn.dataset.originalCssHeight;
//           ctn.style.width = ctn.dataset.originalCssWidth;
//           ctn.style.position = ctn.dataset.originalCssPosition;
//           ctn.style.zIndex = ctn.dataset.originalCssZIndex;
          
          
//           let ancestorEls = [];
//           let aEl = ctn.parentElement;
//           while(aEl !== document.body) {
//             ancestorEls.push(aEl);
//             aEl = aEl.parentElement;
//           }
//           let originalAncestorZIndices = JSON.parse(ctn.dataset.originalAncestorZIndices);
//           ancestorEls.forEach((el, i) => el.style.zIndex=originalAncestorZIndices[i]);
          
//           ctn.style.top = ""; ctn.style.left = ""; ctn.style.right = ""; ctn.style.bottom = "";
//           document.scrollingElement.style.overflow = "";
//           ctn.dataset.isFullscreen = "no";
//         }
      }
    }, false);
  
    let cssText = `
    .comments-plugin-ctn {
      position:relative;
      display:inline-block;
    }
    .loading-spinner-434142 { 
      border: 4px solid #f3f3f3;
      border-top: 4px solid #5d5d5d;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 0.9s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }`;
    let styleEl = document.createElement('style');
    styleEl.appendChild(document.createTextNode(cssText));
    document.head.appendChild(styleEl);
    
    // let addCommentsPluginInterval = setInterval(() => {
    //   document.querySelectorAll(".___perchance-comments-plugin-marker").forEach(markerEl => {
    //     // detect if a comments section has been injected after it yet (edit: for some reason it's injected before it?):
    //     if((!markerEl.nextElementSibling || markerEl.nextElementSibling.dataset.isCommentsSection !== "true") && (!markerEl.previousElementSibling || markerEl.previousElementSibling.dataset.isCommentsSection !== "true")) {
    //       let div = document.createElement("div");
    //       let containerStyle = markerEl.dataset.containerStyle;
    //       let queryString = markerEl.dataset.queryString;
    //       let folderName = markerEl.dataset.folderName;
    //       div.innerHTML = `<div class="comments-plugin-ctn" data-is-comments-section="true" style="position:relative; display:inline-block; ${containerStyle}">
    //         <div class="__perchance-comments-loading-facade-12345" style="position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center; background:white; border:1px solid rgba(0,0,0,0.25); border-radius:2px;"><div class="loading-spinner-434142"></div></div>
    //         <iframe class="___perchance-comments-plugin-iframe-12345" src="https://comments-plugin.perchance.org/embed/${folderName}?${queryString}" style="border:0; width:100%; height:100%;"></iframe>
    //       </div>`;
    //       let iframeContainer = div.firstElementChild;
    //       //debugger;
    //       markerEl.after(iframeContainer);
    //       clearInterval(addCommentsPluginInterval);
    //     }
    //   });
    // }, 200);
    
    window.___alreadyAddedCommentsPluginStuff43211234 = true;
  }

  let colorScheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? "dark" : "light";
  if(opts.forceColorScheme) colorScheme = opts.forceColorScheme.evaluateItem;
  
  function lazyLoadIframe({urlHashDataEncoded}) {
    let commentsCtn = document.querySelector(`[data-comments-section-folder-name="${folderName}"]:not(.already-added-intersection-observer-to-this-comments-plugin-ctn)`); // get the first one that we haven't added an intersection observer for yet - this is needed because they could have multiple instances of the same channel on the page, and we don't want to add all the intersection observers to the first one
    if(!commentsCtn) return; // i think this happens sometimes due to timing/race condition where iframe is deleted in a very small time window
    commentsCtn.classList.add("already-added-intersection-observer-to-this-comments-plugin-ctn");

    let observer1, observer2;
    // lazyload the iframe, because some generator pages have literally dozens of different channels.
    // I'm adding multiple observers because the default `root` is the browser viewport, and margin doesn't make sense for that, since it's not scrollable, but we still want it in case of the comments being in weird non-documentElement scrollable area or something. Note really sure how it works.
    const observerFn = entries => {
      if(entries[0].isIntersecting) {
        observer1.disconnect();
        observer2.disconnect();
        console.debug("comments ctn: Visible");
        let placeholder = commentsCtn.querySelector(".__perchance-comments-iframe-placeholder-el-12345");
        if(placeholder) {
          let iframeHtml = `<iframe class="${iframeUniqueId} ___perchance-comments-plugin-iframe-12345" src="https://comments-plugin.perchance.org/embed/${folderName}?${queryString}#${urlHashDataEncoded}" style="border:0; width:100%; height:100%; user-select:none;" ${urlHashData.transparentBackground ? `allowtransparency="true"` : ""}></iframe>`;
          placeholder.outerHTML = iframeHtml;
          ctx.iframeContentWindow = document.querySelector("."+iframeUniqueId).contentWindow;
          window.___commentsPluginIframeUniqueIdToContext.set(iframeUniqueId, ctx);
        }
      }
    };
    setTimeout(() => { // slight delay in case of e.g. tabs being rendered in such a way that they're all momentarily visible (we don't wnat to load them all at once - only the active tab)
      observer1 = new IntersectionObserver(observerFn, {
        rootMargin: "6000px", // we basically want to trigger ~all visible elements anyway - just not stuff hidden within e.g. tabs plugin or whatever.
      });
      observer1.observe(commentsCtn);
      observer2 = new IntersectionObserver(observerFn, {
        root: document.documentElement,
        rootMargin: "6000px", // we basically want to trigger ~all visible elements anyway - just not stuff hidden within e.g. tabs plugin or whatever.
      });
      observer2.observe(commentsCtn);
    }, 5);
  }
  
  let containerHtml = `<div data-is-fullscreen="no" data-comments-section-folder-name="${folderName}" class="comments-plugin-ctn" data-is-comments-section="true" style="${containerStyle}">
    <div class="__perchance-comments-loading-facade-12345" style="position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center; background:${colorScheme === "light" ? "white" : "#131516"}; border:1px solid rgba(0,0,0,0.25); border-radius:2px;"><div class="loading-spinner-434142"></div></div>
    <span class="__perchance-comments-iframe-placeholder-el-12345"></span>
  </div>`;
  
  if(opts.replacedDuringUpdate) {
    // setTimeout(async () => {
    //   while(!document.querySelector("."+iframeUniqueId)) {
    //     console.debug("Waiting for comments-plugin iframe to appear in document.");
    //     await new Promise(r => setTimeout(r, 500));
    //   }
    //   ctx.iframeContentWindow = document.querySelector("."+iframeUniqueId).contentWindow;
    //   window.___commentsPluginIframeUniqueIdToContext.set(iframeUniqueId, ctx);
    // }, 10);
    // return addMethodsToReturnValue(new String(`<div data-is-fullscreen="no" data-comments-section-folder-name="${folderName}" class="comments-plugin-ctn" data-is-comments-section="true" style="${containerStyle}">
    //   <div class="__perchance-comments-loading-facade-12345" style="position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center; background:${colorScheme === "light" ? "white" : "#131516"}; border:1px solid rgba(0,0,0,0.25); border-radius:2px;"><div class="loading-spinner-434142"></div></div>
    //   <iframe loading="lazy" class="${iframeUniqueId} ___perchance-comments-plugin-iframe-12345" src="https://comments-plugin.perchance.org/embed/${folderName}?${queryString}#${encodeURIComponent(JSON.stringify(urlHashData))}" style="border:0; width:100%; height:100%;"></iframe>
    // </div>`));
    setTimeout(async () => {
      let urlHashDataEncoded = encodeURIComponent(JSON.stringify(urlHashData));
      lazyLoadIframe({urlHashDataEncoded})
    }, 10);
    return addMethodsToReturnValue(new String(containerHtml));
  }
    
  if(!document.querySelector(`[data-comments-section-folder-name="${folderName}"]`)) {

    function swapMarkerElForRealEl() {
      let markerEl = document.querySelector(`[data-marker-tag="temporaryMarkerElForCommentsPlugin84738932-folderName-${folderName}"]`);
      if(!markerEl) return;
      let containerStyle = markerEl.dataset.containerStyle;
      let queryString = markerEl.dataset.queryString;
      let urlHashDataEncoded = markerEl.dataset.urlHashDataEncoded;
      // let folderName = markerEl.dataset.folderName;

      // NOTE: we don't use replaceWith here because that approach would mean that this would get updated during update() calls
      markerEl.outerHTML = containerHtml;
      
      lazyLoadIframe({urlHashDataEncoded});
    }

    // setTimeout(swapMarkerElForRealEl, 50);

    // the above commented-out setTimeout one-liner was the previous approach. the below MutationObserver-based monstrosity is a bit better because it ensures the swap happens *the moment* that the marker is added to the page, and we can wait a long time without the need for polling
    let markerEl = document.querySelector(`[data-marker-tag="temporaryMarkerElForCommentsPlugin84738932-folderName-${folderName}"]`);
    if(markerEl) {
      swapMarkerElForRealEl();
    } else {
      // they generated the comments HTML, but haven't put it in the page yet, so we wait for it using a mutation observer:
      let foundElement = false;
      let markerTagValue = `temporaryMarkerElForCommentsPlugin84738932-folderName-${folderName}`;
      let observer = new MutationObserver((mutations) => {
        for(let mutation of mutations) {
          for(let node of mutation.addedNodes) {
            if(node.dataset && node.dataset.markerTag === markerTagValue) {
              foundElement = true;
            } else if(node.querySelector) { // skip #text, #comment, etc.
              // since mutation observers don't trigger for all subnodes - only the highest-level nodes in a mutation
              let markerEl = node.querySelector(`[data-marker-tag="temporaryMarkerElForCommentsPlugin84738932-folderName-${folderName}"]`);
              if(markerEl) {
                foundElement = true;
              }
            }
            if(foundElement) {
              observer.disconnect();
              swapMarkerElForRealEl();
              return;
            }
          }
        }
      });
      observer.observe(document.body, { childList: true, subtree: true });
      setTimeout(() => {
        if(!foundElement) {
          console.error("Couldn't find marker element for comments plugin?");
          observer.disconnect();
        }
      }, 10000);
    }

    return addMethodsToReturnValue(new String(`<span data-marker-tag="temporaryMarkerElForCommentsPlugin84738932-folderName-${folderName}" data-folder-name="${folderName}" data-container-style="${containerStyle}" data-query-string="${queryString}" data-url-hash-data-encoded="${encodeURIComponent(JSON.stringify(urlHashData))}"></span>`));
  } else {
    return "";
  }
  
  


//   // This is a temporary fix because editing the text next to where the plugin is placed (within the same HTML "node"?) will cause the
//   // comments section to disappear which causes users to think that they can't edit the positioning of the comments. So we tell them to
//   // refresh the page. Ideally I'd fix this like I did with the text-to-image-plugin gallery - I just return/create a "fresh" one whenever
//   // the old one isn't detected with querySelector.
//   setTimeout(() => {
//     if(document.querySelectorAll(".___perchance-comments-plugin-marker").length !== document.querySelectorAll(".comments-plugin-ctn").length) {
//       document.querySelectorAll(".___perchance-comments-plugin-marker").forEach(markerEl => {
//         markerEl.style.cssText = `display:inline-block; border:1px solid grey; ${markerEl.dataset.containerStyle}`;
//         markerEl.innerHTML = `<div style="height:100%; display:flex; align-items:center; justify-content:center;"><span style="opacity:0.6; padding:1rem;">Please save your generator and refresh the page to reload the comments plugin.</span></div>`;
//       });
//     }
//   }, 600);
\t
// \t// can't just inject the iframe directly otherwise it gets reloaded every time update() is called. So we need the setInterval monstrosity above.
// \treturn `<span class="___perchance-comments-plugin-marker" data-folder-name="${folderName}" data-container-style="${containerStyle}" data-query-string="${queryString}"></span>`;
  
  
  
  
  
  
  
  ","imports":[],"lastEditTime":1737314689952,"found":true},{"name":"common-noun","modelText":"title = Random Common Noun Generator
subtitle = Generates random nouns that are relatively common (top 1000).
fontSize = 230
fontColor = black
buttonText = randomize
numberOfItems = 1
itemSeperator = <br/>
description
\t{import:simple-gen-footer}
\t$output = <p>[this.joinItems("</p><p>")]</p> // <-- don't remove this last line, it uses the special "$output" property to join and format your description as HTML paragraphs :)


$output = [noun]

// Credit goes to: http://www.momswhothink.com/reading/list-of-nouns.html
\t
\t
noun
\taccount
\tachiever
\tacoustics
\tact
\taction
\tactivity
\tactor
\taddition
\tadjustment
\tadvertisement
\tadvice
\taftermath
\tafternoon
\tafterthought
\tagreement
\tair
\tairplane
\tairport
\talarm
\tamount
\tamusement
\tanger
\tangle
\tanimal
\tanswer
\tant
\tants
\tapparatus
\tapparel
\tapple
\tapples
\tappliance
\tapproval
\tarch
\targument
\tarithmetic
\tarm
\tarmy
\tart
\tattack
\tattempt
\tattention
\tattraction
\taunt
\tauthority
\tbabies
\tbaby
\tback
\tbadge
\tbag
\tbait
\tbalance
\tball
\tballoon
\tballs
\tbanana
\tband
\tbase
\tbaseball
\tbasin
\tbasket
\tbasketball
\tbat
\tbath
\tbattle
\tbead
\tbeam
\tbean
\tbear
\tbears
\tbeast
\tbed
\tbedroom
\tbeds
\tbee
\tbeef
\tbeetle
\tbeggar
\tbeginner
\tbehavior
\tbelief
\tbelieve
\tbell
\tbells
\tberry
\tbike
\tbikes
\tbird
\tbirds
\tbirth
\tbirthday
\tbit
\tbite
\tblade
\tblood
\tblow
\tboard
\tboat
\tboats
\tbody
\tbomb
\tbone
\tbook
\tbooks
\tboot
\tborder
\tbottle
\tboundary
\tbox
\tboy
\tboys
\tbrain
\tbrake
\tbranch
\tbrass
\tbread
\tbreakfast
\tbreath
\tbrick
\tbridge
\tbrother
\tbrothers
\tbrush
\tbubble
\tbucket
\tbuilding
\tbulb
\tbun
\tburn
\tburst
\tbushes
\tbusiness
\tbutter
\tbutton
\tcabbage
\tcable
\tcactus
\tcake
\tcakes
\tcalculator
\tcalendar
\tcamera
\tcamp
\tcan
\tcannon
\tcanvas
\tcap
\tcaption
\tcar
\tcard
\tcare
\tcarpenter
\tcarriage
\tcars
\tcart
\tcast
\tcat
\tcats
\tcattle
\tcause
\tcave
\tcelery
\tcellar
\tcemetery
\tcent
\tchain
\tchair
\tchairs
\tchalk
\tchance
\tchange
\tchannel
\tcheese
\tcherries
\tcherry
\tchess
\tchicken
\tchickens
\tchildren
\tchin
\tchurch
\tcircle
\tclam
\tclass
\tclock
\tclocks
\tcloth
\tcloud
\tclouds
\tclover
\tclub
\tcoach
\tcoal
\tcoast
\tcoat
\tcobweb
\tcoil
\tcollar
\tcolor
\tcomb
\tcomfort
\tcommittee
\tcompany
\tcomparison
\tcompetition
\tcondition
\tconnection
\tcontrol
\tcook
\tcopper
\tcopy
\tcord
\tcork
\tcorn
\tcough
\tcountry
\tcover
\tcow
\tcows
\tcrack
\tcracker
\tcrate
\tcrayon
\tcream
\tcreator
\tcreature
\tcredit
\tcrib
\tcrime
\tcrook
\tcrow
\tcrowd
\tcrown
\tcrush
\tcry
\tcub
\tcup
\tcurrent
\tcurtain
\tcurve
\tcushion
\tdad
\tdaughter
\tday
\tdeath
\tdebt
\tdecision
\tdeer
\tdegree
\tdesign
\tdesire
\tdesk
\tdestruction
\tdetail
\tdevelopment
\tdigestion
\tdime
\tdinner
\tdinosaurs
\tdirection
\tdirt
\tdiscovery
\tdiscussion
\tdisease
\tdisgust
\tdistance
\tdistribution
\tdivision
\tdock
\tdoctor
\tdog
\tdogs
\tdoll
\tdolls
\tdonkey
\tdoor
\tdowntown
\tdrain
\tdrawer
\tdress
\tdrink
\tdriving
\tdrop
\tdrug
\tdrum
\tduck
\tducks
\tdust
\tear
\tearth
\tearthquake
\tedge
\teducation
\teffect
\tegg
\teggnog
\teggs
\telbow
\tend
\tengine
\terror
\tevent
\texample
\texchange
\texistence
\texpansion
\texperience
\texpert
\teye
\teyes
\tface
\tfact
\tfairies
\tfall
\tfamily
\tfan
\tfang
\tfarm
\tfarmer
\tfather
\tfather
\tfaucet
\tfear
\tfeast
\tfeather
\tfeeling
\tfeet
\tfiction
\tfield
\tfifth
\tfight
\tfinger
\tfinger
\tfire
\tfireman
\tfish
\tflag
\tflame
\tflavor
\tflesh
\tflight
\tflock
\tfloor
\tflower
\tflowers
\tfly
\tfog
\tfold
\tfood
\tfoot
\tforce
\tfork
\tform
\tfowl
\tframe
\tfriction
\tfriend
\tfriends
\tfrog
\tfrogs
\tfront
\tfruit
\tfuel
\tfurniture
\talley
\tgame
\tgarden
\tgate
\tgeese
\tghost
\tgiants
\tgiraffe
\tgirl
\tgirls
\tglass
\tglove
\tglue
\tgoat
\tgold
\tgoldfish
\tgood-bye
\tgoose
\tgovernment
\tgovernor
\tgrade
\tgrain
\tgrandfather
\tgrandmother
\tgrape
\tgrass
\tgrip
\tground
\tgroup
\tgrowth
\tguide
\tguitar
\tgun
\thair
\thaircut
\thall
\thammer
\thand
\thands
\tharbor
\tharmony
\that
\thate
\thead
\thealth
\thearing
\theart
\theat
\thelp
\then
\thill
\thistory
\thobbies
\thole
\tholiday
\thome
\thoney
\thook
\thope
\thorn
\thorse
\thorses
\those
\thospital
\thot
\thour
\thouse
\thouses
\thumor
\thydrant
\tice
\ticicle
\tidea
\timpulse
\tincome
\tincrease
\tindustry
\tink
\tinsect
\tinstrument
\tinsurance
\tinterest
\tinvention
\tiron
\tisland
\tjail
\tjam
\tjar
\tjeans
\tjelly
\tjellyfish
\tjewel
\tjoin
\tjoke
\tjourney
\tjudge
\tjuice
\tjump
\tkettle
\tkey
\tkick
\tkiss
\tkite
\tkitten
\tkittens
\tkitty
\tknee
\tknife
\tknot
\tknowledge
\tlaborer
\tlace
\tladybug
\tlake
\tlamp
\tland
\tlanguage
\tlaugh
\tlawyer
\tlead
\tleaf
\tlearning
\tleather
\tleg
\tlegs
\tletter
\tletters
\tlettuce
\tlevel
\tlibrary
\tlift
\tlight
\tlimit
\tline
\tlinen
\tlip
\tliquid
\tlist
\tlizards
\tloaf
\tlock
\tlocket
\tlook
\tloss
\tlove
\tlow
\tlumber
\tlunch
\tlunchroom
\tmachine
\tmagic
\tmaid
\tmailbox
\tman
\tmanager
\tmap
\tmarble
\tmark
\tmarket
\tmask
\tmass
\tmatch
\tmeal
\tmeasure
\tmeat
\tmeeting
\tmemory
\tmen
\tmetal
\tmice
\tmiddle
\tmilk
\tmind
\tmine
\tminister
\tmint
\tminute
\tmist
\tmitten
\tmom
\tmoney
\tmonkey
\tmonth
\tmoon
\tmorning
\tmother
\tmotion
\tmountain
\tmouth
\tmove
\tmuscle
\tmusic
\tnail
\tname
\tnation
\tneck
\tneed
\tneedle
\tnerve
\tnest
\tnet
\tnews
\tnight
\tnoise
\tnorth
\tnose
\tnote
\tnotebook
\tnumber
\tnut
\toatmeal
\tobservation
\tocean
\toffer
\toffice
\toil
\toperation
\topinion
\torange
\toranges
\torder
\torganization
\tornament
\toven
\towl
\towner
\tpage
\tpail
\tpain
\tpaint
\tpan
\tpancake
\tpaper
\tparcel
\tparent
\tpark
\tpart
\tpartner
\tparty
\tpassenger
\tpaste
\tpatch
\tpayment
\tpeace
\tpear
\tpen
\tpencil
\tperson
\tpest
\tpet
\tpets
\tpickle
\tpicture
\tpie
\tpies
\tpig
\tpigs
\tpin
\tpipe
\tpizzas
\tplace
\tplane
\tplanes
\tplant
\tplantation
\tplants
\tplastic
\tplate
\tplay
\tplayground
\tpleasure
\tplot
\tplough
\tpocket
\tpoint
\tpoison
\tpolice
\tpolish
\tpollution
\tpopcorn
\tporter
\tposition
\tpot
\tpotato
\tpowder
\tpower
\tprice
\tprint
\tprison
\tprocess
\tproduce
\tprofit
\tproperty
\tprose
\tprotest
\tpull
\tpump
\tpunishment
\tpurpose
\tpush
\tquarter
\tquartz
\tqueen
\tquestion
\tquicksand
\tquiet
\tquill
\tquilt
\tquince
\tquiver
\trabbit
\trabbits
\trail
\trailway
\train
\trainstorm
\trake
\trange
\trat
\trate
\tray
\treaction
\treading
\treason
\treceipt
\trecess
\trecord
\tregret
\trelation
\treligion
\trepresentative
\trequest
\trespect
\trest
\treward
\trhythm
\trice
\triddle
\trifle
\tring
\trings
\triver
\troad
\trobin
\trock
\trod
\troll
\troof
\troom
\troot
\trose
\troute
\trub
\trule
\trun
\tsack
\tsail
\tsalt
\tsand
\tscale
\tscarecrow
\tscarf
\tscene
\tscent
\tschool
\tscience
\tscissors
\tscrew
\tsea
\tseashore
\tseat
\tsecretary
\tseed
\tselection
\tself
\tsense
\tservant
\tshade
\tshake
\tshame
\tshape
\tsheep
\tsheet
\tshelf
\tship
\tshirt
\tshock
\tshoe
\tshoes
\tshop
\tshow
\tside
\tsidewalk
\tsign
\tsilk
\tsilver
\tsink
\tsister
\tsisters
\tsize
\tskate
\tskin
\tskirt
\tsky
\tslave
\tsleep
\tsleet
\tslip
\tslope
\tsmash
\tsmell
\tsmile
\tsmoke
\tsnail
\tsnails
\tsnake
\tsnakes
\tsneeze
\tsnow
\tsoap
\tsociety
\tsock
\tsoda
\tsofa
\tson
\tsong
\tsongs
\tsort
\tsound
\tsoup
\tspace
\tspade
\tspark
\tspiders
\tsponge
\tspoon
\tspot
\tspring
\tspy
\tsquare
\tsquirrel
\tstage
\tstamp
\tstar
\tstart
\tstatement
\tstation
\tsteam
\tsteel
\tstem
\tstep
\tstew
\tstick
\tsticks
\tstitch
\tstocking
\tstomach
\tstone
\tstop
\tstore
\tstory
\tstove
\tstranger
\tstraw
\tstream
\tstreet
\tstretch
\tstring
\tstructure
\tsubstance
\tsugar
\tsuggestion
\tsuit
\tsummer
\tsun
\tsupport
\tsurprise
\tsweater
\tswim
\tswing
\tsystem
\ttable
\ttail
\ttalk
\ttank
\ttaste
\ttax
\tteaching
\tteam
\tteeth
\ttemper
\ttendency
\ttent
\tterritory
\ttest
\ttexture
\ttheory
\tthing
\tthings
\tthought
\tthread
\tthrill
\tthroat
\tthrone
\tthumb
\tthunder
\tticket
\ttiger
\ttime
\ttin
\ttitle
\ttoad
\ttoe
\ttoes
\ttomatoes
\ttongue
\ttooth
\ttoothbrush
\ttoothpaste
\ttop
\ttouch
\ttown
\ttoy
\ttoys
\ttrade
\ttrail
\ttrain
\ttrains
\ttramp
\ttransport
\ttray
\ttreatment
\ttree
\ttrees
\ttrick
\ttrip
\ttrouble
\ttrousers
\ttruck
\ttrucks
\ttub
\tturkey
\tturn
\ttwig
\ttwist
\tumbrella
\tuncle
\tunderwear
\tunit
\tuse
\tvacation
\tvalue
\tvan
\tvase
\tvegetable
\tveil
\tvein
\tverse
\tvessel
\tvest
\tview
\tvisitor
\tvoice
\tvolcano
\tvolleyball
\tvoyage
\twalk
\twall
\twar
\twash
\twaste
\twatch
\twater
\twave
\twaves
\twax
\tway
\twealth
\tweather
\tweek
\tweight
\twheel
\twhip
\twhistle
\twilderness
\twind
\twindow
\twine
\twing
\twinter
\twire
\twish
\twoman
\twomen
\twood
\twool
\tword
\twork
\tworm
\twound
\twren
\twrench
\twrist
\twriter
\twriting
\tyak
\tyam
\tyard
\tyarn
\tyear
\tyoke
\tzebra
\tzephyr
\tzinc
\tzipper
\tzoo","imports":["simple-gen-footer"],"lastEditTime":1613513295514,"found":true}]